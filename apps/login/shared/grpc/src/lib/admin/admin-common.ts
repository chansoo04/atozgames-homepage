// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: admin-common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';

export const protobufPackage = 'admin';

/** 테이블명: users */
export interface User {
  userId: string;
  email: string;
  /** 사원번호 */
  employeeNumber: string;
  /** 이름 */
  name: string;
  /** 부서 ID */
  department?: IdNumberName | undefined;
  /** 직책 ID */
  position?: IdNumberName | undefined;
  /** 직무 ID */
  job?: IdNumberName | undefined;
  /** 전화번호 */
  phoneNumber: number;
  /** 사내번호 */
  extensionNumber: number;
  /** 계정 상태 */
  state: number;
  /** 생성일 */
  createdAt: string;
}

/** 테이블명: group_permissions */
export interface GroupPermission {
  permissionCode: string;
  name: string;
  description: string;
  isActive: boolean;
  createdAt: string;
}

/** 테이블명: group_permission_menus */
export interface GroupPermissionMenu {
  permissionCode: string;
  menuId: string;
  menuActionId: string;
  createdAt: string;
}

export interface MenuListOnGroupPermission {
  permissionCode: string;
  menu?: MenuOfGroupPermissionMenu | undefined;
}

export interface MenuOfGroupPermissionMenu {
  menuId: string;
  name: string;
  menuActionList: MenuActionList[];
  system?: IdName | undefined;
  privacyList: PrivacyOfGroupPermissionMenu[];
}

export interface MenuActionList {
  id: string;
  name: string;
  isActive: boolean;
}

export interface PrivacyOfGroupPermissionMenu {
  id: string;
  name: string;
  description: string;
}

/** 테이블명: group_permission_users */
export interface GroupPermissionUser {
  permissionCode: string;
  userId: string;
  createdAt: string;
}

/** 테이블명: user_permissions */
export interface UserPermission {
  userId: string;
  menuList: UserPermissionMenuList[];
}

export interface UserPermissionMenuList {
  menuId: string;
  system?: IdName | undefined;
  name: string;
  menuActionList: MenuActionList[];
  privacyList: PrivacyOfGroupPermissionMenu[];
}

/** 테이블명: code_groups */
export interface CodeGroup {
  groupCode: string;
  name: string;
  description: string;
  isActive: boolean;
  isDeleted: boolean;
  createdAt: string;
  updatedAt: string;
}

/** 테이블명: code_items */
export interface CodeItem {
  groupCode: string;
  itemCode: string;
  name: string;
  description: string;
  ordering: number;
  isActive: boolean;
  isDeleted: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface Department {
  departmentId: number;
  code: string;
  name: string;
  description: string;
  isActive: boolean;
  createdAt: string;
}

export interface Job {
  jobId: number;
  code: string;
  name: string;
  description: string;
  isActive: boolean;
  createdAt: string;
}

/** 테이블명: menus */
export interface Menu {
  /** 시스템 ID */
  system?: IdName | undefined;
  /** 메뉴 ID (varchar: 5) */
  menuId: string;
  menuActionList: MenuActionList[];
  /** 상위 메뉴 ID (varchar: 5) */
  parentMenu?: IdName | undefined;
  /** 메뉴명 */
  name: string;
  /** URL */
  url: string;
  /** 설명 */
  description: string;
  /** 정렬 순서 */
  ordering: number;
  /** 사용 여부 */
  isActive: boolean;
  /** 삭제 여부 */
  isDeleted: boolean;
  /** 생성일 */
  createdAt: string;
  /** 수정일 */
  updatedAt: string;
  privacyList: PrivacyOfGroupPermissionMenu[];
}

/** 테이블명: menu_actions */
export interface MenuAction {
  menuId: string;
  menuActionId: string;
  name: string;
  url: string;
  ordering: number;
  isActive: boolean;
  isDeleted: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface MenuPrivacy {
  menuId: string;
  privacyTypeId: number;
  createdAt: string;
}

export interface Position {
  positionId: number;
  code: string;
  name: string;
  description: string;
  isActive: boolean;
  createdAt: string;
}

export interface PrivacyType {
  privacyTypeId: number;
  name: string;
  description: string;
  isActive: boolean;
  isDeleted: boolean;
  createdAt: string;
  updatedAt: string;
}

/** 테이블명: required_user_fields */
export interface RequiredUserField {
  fieldId: number;
  field: string;
  isRequire: boolean;
  isActive: boolean;
  isDeleted: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface System {
  systemId: string;
  name: string;
  description: string;
  isActive: boolean;
  isDeleted: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface UserInfo {
  userId: string;
  email: string;
  /** 사원번호 */
  employeeNumber: string;
  /** 이름 */
  name: string;
  /** 부서 ID */
  department?: IdNumberName | undefined;
  /** 직책 ID */
  position?: IdNumberName | undefined;
  /** 직무 ID */
  job?: IdNumberName | undefined;
  /** 전화번호 */
  phoneNumber: number;
  /** 사내번호 */
  extensionNumber: number;
  /** 계정 상태 */
  state: number;
  /** 생성일 */
  createdAt: string;
  auth: UserInfoAuth[];
}

export interface UserInfoAuth {
  permissionCode: string;
  name: string;
}

export interface IdName {
  id: string;
  name: string;
}

export interface IdNumberName {
  id: number;
  name: string;
}

export interface GlobalNavigationMenus {
  systemId: string;
  systemName: string;
  menuId: string;
  menuName: string;
  parentMenuId: string;
  url: string;
}

function createBaseUser(): User {
  return {
    userId: '',
    email: '',
    employeeNumber: '',
    name: '',
    department: undefined,
    position: undefined,
    job: undefined,
    phoneNumber: 0,
    extensionNumber: 0,
    state: 0,
    createdAt: '',
  };
}

export const User = {
  encode(
    message: User,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userId !== '') {
      writer.uint32(10).string(message.userId);
    }
    if (message.email !== '') {
      writer.uint32(18).string(message.email);
    }
    if (message.employeeNumber !== '') {
      writer.uint32(26).string(message.employeeNumber);
    }
    if (message.name !== '') {
      writer.uint32(34).string(message.name);
    }
    if (message.department !== undefined) {
      IdNumberName.encode(message.department, writer.uint32(42).fork()).join();
    }
    if (message.position !== undefined) {
      IdNumberName.encode(message.position, writer.uint32(50).fork()).join();
    }
    if (message.job !== undefined) {
      IdNumberName.encode(message.job, writer.uint32(58).fork()).join();
    }
    if (message.phoneNumber !== 0) {
      writer.uint32(64).int64(message.phoneNumber);
    }
    if (message.extensionNumber !== 0) {
      writer.uint32(72).int32(message.extensionNumber);
    }
    if (message.state !== 0) {
      writer.uint32(80).int32(message.state);
    }
    if (message.createdAt !== '') {
      writer.uint32(90).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.employeeNumber = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.department = IdNumberName.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.position = IdNumberName.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.job = IdNumberName.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.phoneNumber = longToNumber(reader.int64());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.extensionNumber = reader.int32();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.state = reader.int32();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.createdAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : '',
      email: isSet(object.email) ? globalThis.String(object.email) : '',
      employeeNumber: isSet(object.employeeNumber)
        ? globalThis.String(object.employeeNumber)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      department: isSet(object.department)
        ? IdNumberName.fromJSON(object.department)
        : undefined,
      position: isSet(object.position)
        ? IdNumberName.fromJSON(object.position)
        : undefined,
      job: isSet(object.job) ? IdNumberName.fromJSON(object.job) : undefined,
      phoneNumber: isSet(object.phoneNumber)
        ? globalThis.Number(object.phoneNumber)
        : 0,
      extensionNumber: isSet(object.extensionNumber)
        ? globalThis.Number(object.extensionNumber)
        : 0,
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.userId !== '') {
      obj.userId = message.userId;
    }
    if (message.email !== '') {
      obj.email = message.email;
    }
    if (message.employeeNumber !== '') {
      obj.employeeNumber = message.employeeNumber;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.department !== undefined) {
      obj.department = IdNumberName.toJSON(message.department);
    }
    if (message.position !== undefined) {
      obj.position = IdNumberName.toJSON(message.position);
    }
    if (message.job !== undefined) {
      obj.job = IdNumberName.toJSON(message.job);
    }
    if (message.phoneNumber !== 0) {
      obj.phoneNumber = Math.round(message.phoneNumber);
    }
    if (message.extensionNumber !== 0) {
      obj.extensionNumber = Math.round(message.extensionNumber);
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.userId = object.userId ?? '';
    message.email = object.email ?? '';
    message.employeeNumber = object.employeeNumber ?? '';
    message.name = object.name ?? '';
    message.department =
      object.department !== undefined && object.department !== null
        ? IdNumberName.fromPartial(object.department)
        : undefined;
    message.position =
      object.position !== undefined && object.position !== null
        ? IdNumberName.fromPartial(object.position)
        : undefined;
    message.job =
      object.job !== undefined && object.job !== null
        ? IdNumberName.fromPartial(object.job)
        : undefined;
    message.phoneNumber = object.phoneNumber ?? 0;
    message.extensionNumber = object.extensionNumber ?? 0;
    message.state = object.state ?? 0;
    message.createdAt = object.createdAt ?? '';
    return message;
  },
};

function createBaseGroupPermission(): GroupPermission {
  return {
    permissionCode: '',
    name: '',
    description: '',
    isActive: false,
    createdAt: '',
  };
}

export const GroupPermission = {
  encode(
    message: GroupPermission,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.permissionCode !== '') {
      writer.uint32(10).string(message.permissionCode);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(26).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    if (message.createdAt !== '') {
      writer.uint32(42).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupPermission {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupPermission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissionCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createdAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupPermission {
    return {
      permissionCode: isSet(object.permissionCode)
        ? globalThis.String(object.permissionCode)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
    };
  },

  toJSON(message: GroupPermission): unknown {
    const obj: any = {};
    if (message.permissionCode !== '') {
      obj.permissionCode = message.permissionCode;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GroupPermission>, I>>(
    base?: I,
  ): GroupPermission {
    return GroupPermission.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GroupPermission>, I>>(
    object: I,
  ): GroupPermission {
    const message = createBaseGroupPermission();
    message.permissionCode = object.permissionCode ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    message.createdAt = object.createdAt ?? '';
    return message;
  },
};

function createBaseGroupPermissionMenu(): GroupPermissionMenu {
  return { permissionCode: '', menuId: '', menuActionId: '', createdAt: '' };
}

export const GroupPermissionMenu = {
  encode(
    message: GroupPermissionMenu,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.permissionCode !== '') {
      writer.uint32(10).string(message.permissionCode);
    }
    if (message.menuId !== '') {
      writer.uint32(18).string(message.menuId);
    }
    if (message.menuActionId !== '') {
      writer.uint32(26).string(message.menuActionId);
    }
    if (message.createdAt !== '') {
      writer.uint32(34).string(message.createdAt);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GroupPermissionMenu {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupPermissionMenu();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissionCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.menuId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.menuActionId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupPermissionMenu {
    return {
      permissionCode: isSet(object.permissionCode)
        ? globalThis.String(object.permissionCode)
        : '',
      menuId: isSet(object.menuId) ? globalThis.String(object.menuId) : '',
      menuActionId: isSet(object.menuActionId)
        ? globalThis.String(object.menuActionId)
        : '',
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
    };
  },

  toJSON(message: GroupPermissionMenu): unknown {
    const obj: any = {};
    if (message.permissionCode !== '') {
      obj.permissionCode = message.permissionCode;
    }
    if (message.menuId !== '') {
      obj.menuId = message.menuId;
    }
    if (message.menuActionId !== '') {
      obj.menuActionId = message.menuActionId;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GroupPermissionMenu>, I>>(
    base?: I,
  ): GroupPermissionMenu {
    return GroupPermissionMenu.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GroupPermissionMenu>, I>>(
    object: I,
  ): GroupPermissionMenu {
    const message = createBaseGroupPermissionMenu();
    message.permissionCode = object.permissionCode ?? '';
    message.menuId = object.menuId ?? '';
    message.menuActionId = object.menuActionId ?? '';
    message.createdAt = object.createdAt ?? '';
    return message;
  },
};

function createBaseMenuListOnGroupPermission(): MenuListOnGroupPermission {
  return { permissionCode: '', menu: undefined };
}

export const MenuListOnGroupPermission = {
  encode(
    message: MenuListOnGroupPermission,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.permissionCode !== '') {
      writer.uint32(10).string(message.permissionCode);
    }
    if (message.menu !== undefined) {
      MenuOfGroupPermissionMenu.encode(
        message.menu,
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MenuListOnGroupPermission {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuListOnGroupPermission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissionCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.menu = MenuOfGroupPermissionMenu.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuListOnGroupPermission {
    return {
      permissionCode: isSet(object.permissionCode)
        ? globalThis.String(object.permissionCode)
        : '',
      menu: isSet(object.menu)
        ? MenuOfGroupPermissionMenu.fromJSON(object.menu)
        : undefined,
    };
  },

  toJSON(message: MenuListOnGroupPermission): unknown {
    const obj: any = {};
    if (message.permissionCode !== '') {
      obj.permissionCode = message.permissionCode;
    }
    if (message.menu !== undefined) {
      obj.menu = MenuOfGroupPermissionMenu.toJSON(message.menu);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuListOnGroupPermission>, I>>(
    base?: I,
  ): MenuListOnGroupPermission {
    return MenuListOnGroupPermission.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuListOnGroupPermission>, I>>(
    object: I,
  ): MenuListOnGroupPermission {
    const message = createBaseMenuListOnGroupPermission();
    message.permissionCode = object.permissionCode ?? '';
    message.menu =
      object.menu !== undefined && object.menu !== null
        ? MenuOfGroupPermissionMenu.fromPartial(object.menu)
        : undefined;
    return message;
  },
};

function createBaseMenuOfGroupPermissionMenu(): MenuOfGroupPermissionMenu {
  return {
    menuId: '',
    name: '',
    menuActionList: [],
    system: undefined,
    privacyList: [],
  };
}

export const MenuOfGroupPermissionMenu = {
  encode(
    message: MenuOfGroupPermissionMenu,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.menuId !== '') {
      writer.uint32(10).string(message.menuId);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.menuActionList) {
      MenuActionList.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.system !== undefined) {
      IdName.encode(message.system, writer.uint32(34).fork()).join();
    }
    for (const v of message.privacyList) {
      PrivacyOfGroupPermissionMenu.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MenuOfGroupPermissionMenu {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuOfGroupPermissionMenu();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.menuId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.menuActionList.push(
            MenuActionList.decode(reader, reader.uint32()),
          );
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.system = IdName.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.privacyList.push(
            PrivacyOfGroupPermissionMenu.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuOfGroupPermissionMenu {
    return {
      menuId: isSet(object.menuId) ? globalThis.String(object.menuId) : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      menuActionList: globalThis.Array.isArray(object?.menuActionList)
        ? object.menuActionList.map((e: any) => MenuActionList.fromJSON(e))
        : [],
      system: isSet(object.system) ? IdName.fromJSON(object.system) : undefined,
      privacyList: globalThis.Array.isArray(object?.privacyList)
        ? object.privacyList.map((e: any) =>
            PrivacyOfGroupPermissionMenu.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: MenuOfGroupPermissionMenu): unknown {
    const obj: any = {};
    if (message.menuId !== '') {
      obj.menuId = message.menuId;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.menuActionList?.length) {
      obj.menuActionList = message.menuActionList.map(e =>
        MenuActionList.toJSON(e),
      );
    }
    if (message.system !== undefined) {
      obj.system = IdName.toJSON(message.system);
    }
    if (message.privacyList?.length) {
      obj.privacyList = message.privacyList.map(e =>
        PrivacyOfGroupPermissionMenu.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuOfGroupPermissionMenu>, I>>(
    base?: I,
  ): MenuOfGroupPermissionMenu {
    return MenuOfGroupPermissionMenu.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuOfGroupPermissionMenu>, I>>(
    object: I,
  ): MenuOfGroupPermissionMenu {
    const message = createBaseMenuOfGroupPermissionMenu();
    message.menuId = object.menuId ?? '';
    message.name = object.name ?? '';
    message.menuActionList =
      object.menuActionList?.map(e => MenuActionList.fromPartial(e)) || [];
    message.system =
      object.system !== undefined && object.system !== null
        ? IdName.fromPartial(object.system)
        : undefined;
    message.privacyList =
      object.privacyList?.map(e =>
        PrivacyOfGroupPermissionMenu.fromPartial(e),
      ) || [];
    return message;
  },
};

function createBaseMenuActionList(): MenuActionList {
  return { id: '', name: '', isActive: false };
}

export const MenuActionList = {
  encode(
    message: MenuActionList,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    if (message.isActive !== false) {
      writer.uint32(24).bool(message.isActive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MenuActionList {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuActionList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuActionList {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: MenuActionList): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuActionList>, I>>(
    base?: I,
  ): MenuActionList {
    return MenuActionList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuActionList>, I>>(
    object: I,
  ): MenuActionList {
    const message = createBaseMenuActionList();
    message.id = object.id ?? '';
    message.name = object.name ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBasePrivacyOfGroupPermissionMenu(): PrivacyOfGroupPermissionMenu {
  return { id: '', name: '', description: '' };
}

export const PrivacyOfGroupPermissionMenu = {
  encode(
    message: PrivacyOfGroupPermissionMenu,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): PrivacyOfGroupPermissionMenu {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrivacyOfGroupPermissionMenu();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrivacyOfGroupPermissionMenu {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
    };
  },

  toJSON(message: PrivacyOfGroupPermissionMenu): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrivacyOfGroupPermissionMenu>, I>>(
    base?: I,
  ): PrivacyOfGroupPermissionMenu {
    return PrivacyOfGroupPermissionMenu.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrivacyOfGroupPermissionMenu>, I>>(
    object: I,
  ): PrivacyOfGroupPermissionMenu {
    const message = createBasePrivacyOfGroupPermissionMenu();
    message.id = object.id ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    return message;
  },
};

function createBaseGroupPermissionUser(): GroupPermissionUser {
  return { permissionCode: '', userId: '', createdAt: '' };
}

export const GroupPermissionUser = {
  encode(
    message: GroupPermissionUser,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.permissionCode !== '') {
      writer.uint32(10).string(message.permissionCode);
    }
    if (message.userId !== '') {
      writer.uint32(18).string(message.userId);
    }
    if (message.createdAt !== '') {
      writer.uint32(26).string(message.createdAt);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GroupPermissionUser {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupPermissionUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissionCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createdAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupPermissionUser {
    return {
      permissionCode: isSet(object.permissionCode)
        ? globalThis.String(object.permissionCode)
        : '',
      userId: isSet(object.userId) ? globalThis.String(object.userId) : '',
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
    };
  },

  toJSON(message: GroupPermissionUser): unknown {
    const obj: any = {};
    if (message.permissionCode !== '') {
      obj.permissionCode = message.permissionCode;
    }
    if (message.userId !== '') {
      obj.userId = message.userId;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GroupPermissionUser>, I>>(
    base?: I,
  ): GroupPermissionUser {
    return GroupPermissionUser.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GroupPermissionUser>, I>>(
    object: I,
  ): GroupPermissionUser {
    const message = createBaseGroupPermissionUser();
    message.permissionCode = object.permissionCode ?? '';
    message.userId = object.userId ?? '';
    message.createdAt = object.createdAt ?? '';
    return message;
  },
};

function createBaseUserPermission(): UserPermission {
  return { userId: '', menuList: [] };
}

export const UserPermission = {
  encode(
    message: UserPermission,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userId !== '') {
      writer.uint32(10).string(message.userId);
    }
    for (const v of message.menuList) {
      UserPermissionMenuList.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserPermission {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserPermission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.menuList.push(
            UserPermissionMenuList.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserPermission {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : '',
      menuList: globalThis.Array.isArray(object?.menuList)
        ? object.menuList.map((e: any) => UserPermissionMenuList.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UserPermission): unknown {
    const obj: any = {};
    if (message.userId !== '') {
      obj.userId = message.userId;
    }
    if (message.menuList?.length) {
      obj.menuList = message.menuList.map(e =>
        UserPermissionMenuList.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserPermission>, I>>(
    base?: I,
  ): UserPermission {
    return UserPermission.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserPermission>, I>>(
    object: I,
  ): UserPermission {
    const message = createBaseUserPermission();
    message.userId = object.userId ?? '';
    message.menuList =
      object.menuList?.map(e => UserPermissionMenuList.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUserPermissionMenuList(): UserPermissionMenuList {
  return {
    menuId: '',
    system: undefined,
    name: '',
    menuActionList: [],
    privacyList: [],
  };
}

export const UserPermissionMenuList = {
  encode(
    message: UserPermissionMenuList,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.menuId !== '') {
      writer.uint32(10).string(message.menuId);
    }
    if (message.system !== undefined) {
      IdName.encode(message.system, writer.uint32(18).fork()).join();
    }
    if (message.name !== '') {
      writer.uint32(26).string(message.name);
    }
    for (const v of message.menuActionList) {
      MenuActionList.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.privacyList) {
      PrivacyOfGroupPermissionMenu.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UserPermissionMenuList {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserPermissionMenuList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.menuId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.system = IdName.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.menuActionList.push(
            MenuActionList.decode(reader, reader.uint32()),
          );
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.privacyList.push(
            PrivacyOfGroupPermissionMenu.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserPermissionMenuList {
    return {
      menuId: isSet(object.menuId) ? globalThis.String(object.menuId) : '',
      system: isSet(object.system) ? IdName.fromJSON(object.system) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      menuActionList: globalThis.Array.isArray(object?.menuActionList)
        ? object.menuActionList.map((e: any) => MenuActionList.fromJSON(e))
        : [],
      privacyList: globalThis.Array.isArray(object?.privacyList)
        ? object.privacyList.map((e: any) =>
            PrivacyOfGroupPermissionMenu.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: UserPermissionMenuList): unknown {
    const obj: any = {};
    if (message.menuId !== '') {
      obj.menuId = message.menuId;
    }
    if (message.system !== undefined) {
      obj.system = IdName.toJSON(message.system);
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.menuActionList?.length) {
      obj.menuActionList = message.menuActionList.map(e =>
        MenuActionList.toJSON(e),
      );
    }
    if (message.privacyList?.length) {
      obj.privacyList = message.privacyList.map(e =>
        PrivacyOfGroupPermissionMenu.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserPermissionMenuList>, I>>(
    base?: I,
  ): UserPermissionMenuList {
    return UserPermissionMenuList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserPermissionMenuList>, I>>(
    object: I,
  ): UserPermissionMenuList {
    const message = createBaseUserPermissionMenuList();
    message.menuId = object.menuId ?? '';
    message.system =
      object.system !== undefined && object.system !== null
        ? IdName.fromPartial(object.system)
        : undefined;
    message.name = object.name ?? '';
    message.menuActionList =
      object.menuActionList?.map(e => MenuActionList.fromPartial(e)) || [];
    message.privacyList =
      object.privacyList?.map(e =>
        PrivacyOfGroupPermissionMenu.fromPartial(e),
      ) || [];
    return message;
  },
};

function createBaseCodeGroup(): CodeGroup {
  return {
    groupCode: '',
    name: '',
    description: '',
    isActive: false,
    isDeleted: false,
    createdAt: '',
    updatedAt: '',
  };
}

export const CodeGroup = {
  encode(
    message: CodeGroup,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.groupCode !== '') {
      writer.uint32(10).string(message.groupCode);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(26).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    if (message.isDeleted !== false) {
      writer.uint32(40).bool(message.isDeleted);
    }
    if (message.createdAt !== '') {
      writer.uint32(50).string(message.createdAt);
    }
    if (message.updatedAt !== '') {
      writer.uint32(58).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CodeGroup {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCodeGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.groupCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isDeleted = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CodeGroup {
    return {
      groupCode: isSet(object.groupCode)
        ? globalThis.String(object.groupCode)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
      isDeleted: isSet(object.isDeleted)
        ? globalThis.Boolean(object.isDeleted)
        : false,
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
      updatedAt: isSet(object.updatedAt)
        ? globalThis.String(object.updatedAt)
        : '',
    };
  },

  toJSON(message: CodeGroup): unknown {
    const obj: any = {};
    if (message.groupCode !== '') {
      obj.groupCode = message.groupCode;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.isDeleted !== false) {
      obj.isDeleted = message.isDeleted;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== '') {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CodeGroup>, I>>(base?: I): CodeGroup {
    return CodeGroup.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CodeGroup>, I>>(
    object: I,
  ): CodeGroup {
    const message = createBaseCodeGroup();
    message.groupCode = object.groupCode ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    message.isDeleted = object.isDeleted ?? false;
    message.createdAt = object.createdAt ?? '';
    message.updatedAt = object.updatedAt ?? '';
    return message;
  },
};

function createBaseCodeItem(): CodeItem {
  return {
    groupCode: '',
    itemCode: '',
    name: '',
    description: '',
    ordering: 0,
    isActive: false,
    isDeleted: false,
    createdAt: '',
    updatedAt: '',
  };
}

export const CodeItem = {
  encode(
    message: CodeItem,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.groupCode !== '') {
      writer.uint32(10).string(message.groupCode);
    }
    if (message.itemCode !== '') {
      writer.uint32(18).string(message.itemCode);
    }
    if (message.name !== '') {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(34).string(message.description);
    }
    if (message.ordering !== 0) {
      writer.uint32(40).int32(message.ordering);
    }
    if (message.isActive !== false) {
      writer.uint32(48).bool(message.isActive);
    }
    if (message.isDeleted !== false) {
      writer.uint32(56).bool(message.isDeleted);
    }
    if (message.createdAt !== '') {
      writer.uint32(66).string(message.createdAt);
    }
    if (message.updatedAt !== '') {
      writer.uint32(74).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CodeItem {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCodeItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.groupCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.itemCode = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.ordering = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.isDeleted = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CodeItem {
    return {
      groupCode: isSet(object.groupCode)
        ? globalThis.String(object.groupCode)
        : '',
      itemCode: isSet(object.itemCode)
        ? globalThis.String(object.itemCode)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      ordering: isSet(object.ordering) ? globalThis.Number(object.ordering) : 0,
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
      isDeleted: isSet(object.isDeleted)
        ? globalThis.Boolean(object.isDeleted)
        : false,
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
      updatedAt: isSet(object.updatedAt)
        ? globalThis.String(object.updatedAt)
        : '',
    };
  },

  toJSON(message: CodeItem): unknown {
    const obj: any = {};
    if (message.groupCode !== '') {
      obj.groupCode = message.groupCode;
    }
    if (message.itemCode !== '') {
      obj.itemCode = message.itemCode;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.ordering !== 0) {
      obj.ordering = Math.round(message.ordering);
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.isDeleted !== false) {
      obj.isDeleted = message.isDeleted;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== '') {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CodeItem>, I>>(base?: I): CodeItem {
    return CodeItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CodeItem>, I>>(object: I): CodeItem {
    const message = createBaseCodeItem();
    message.groupCode = object.groupCode ?? '';
    message.itemCode = object.itemCode ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.ordering = object.ordering ?? 0;
    message.isActive = object.isActive ?? false;
    message.isDeleted = object.isDeleted ?? false;
    message.createdAt = object.createdAt ?? '';
    message.updatedAt = object.updatedAt ?? '';
    return message;
  },
};

function createBaseDepartment(): Department {
  return {
    departmentId: 0,
    code: '',
    name: '',
    description: '',
    isActive: false,
    createdAt: '',
  };
}

export const Department = {
  encode(
    message: Department,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.departmentId !== 0) {
      writer.uint32(8).int32(message.departmentId);
    }
    if (message.code !== '') {
      writer.uint32(18).string(message.code);
    }
    if (message.name !== '') {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(34).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(40).bool(message.isActive);
    }
    if (message.createdAt !== '') {
      writer.uint32(50).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Department {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDepartment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.departmentId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Department {
    return {
      departmentId: isSet(object.departmentId)
        ? globalThis.Number(object.departmentId)
        : 0,
      code: isSet(object.code) ? globalThis.String(object.code) : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
    };
  },

  toJSON(message: Department): unknown {
    const obj: any = {};
    if (message.departmentId !== 0) {
      obj.departmentId = Math.round(message.departmentId);
    }
    if (message.code !== '') {
      obj.code = message.code;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Department>, I>>(base?: I): Department {
    return Department.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Department>, I>>(
    object: I,
  ): Department {
    const message = createBaseDepartment();
    message.departmentId = object.departmentId ?? 0;
    message.code = object.code ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    message.createdAt = object.createdAt ?? '';
    return message;
  },
};

function createBaseJob(): Job {
  return {
    jobId: 0,
    code: '',
    name: '',
    description: '',
    isActive: false,
    createdAt: '',
  };
}

export const Job = {
  encode(
    message: Job,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.jobId !== 0) {
      writer.uint32(8).int32(message.jobId);
    }
    if (message.code !== '') {
      writer.uint32(18).string(message.code);
    }
    if (message.name !== '') {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(34).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(40).bool(message.isActive);
    }
    if (message.createdAt !== '') {
      writer.uint32(50).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Job {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJob();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.jobId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Job {
    return {
      jobId: isSet(object.jobId) ? globalThis.Number(object.jobId) : 0,
      code: isSet(object.code) ? globalThis.String(object.code) : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
    };
  },

  toJSON(message: Job): unknown {
    const obj: any = {};
    if (message.jobId !== 0) {
      obj.jobId = Math.round(message.jobId);
    }
    if (message.code !== '') {
      obj.code = message.code;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Job>, I>>(base?: I): Job {
    return Job.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Job>, I>>(object: I): Job {
    const message = createBaseJob();
    message.jobId = object.jobId ?? 0;
    message.code = object.code ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    message.createdAt = object.createdAt ?? '';
    return message;
  },
};

function createBaseMenu(): Menu {
  return {
    system: undefined,
    menuId: '',
    menuActionList: [],
    parentMenu: undefined,
    name: '',
    url: '',
    description: '',
    ordering: 0,
    isActive: false,
    isDeleted: false,
    createdAt: '',
    updatedAt: '',
    privacyList: [],
  };
}

export const Menu = {
  encode(
    message: Menu,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.system !== undefined) {
      IdName.encode(message.system, writer.uint32(10).fork()).join();
    }
    if (message.menuId !== '') {
      writer.uint32(18).string(message.menuId);
    }
    for (const v of message.menuActionList) {
      MenuActionList.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.parentMenu !== undefined) {
      IdName.encode(message.parentMenu, writer.uint32(34).fork()).join();
    }
    if (message.name !== '') {
      writer.uint32(42).string(message.name);
    }
    if (message.url !== '') {
      writer.uint32(50).string(message.url);
    }
    if (message.description !== '') {
      writer.uint32(58).string(message.description);
    }
    if (message.ordering !== 0) {
      writer.uint32(64).int32(message.ordering);
    }
    if (message.isActive !== false) {
      writer.uint32(72).bool(message.isActive);
    }
    if (message.isDeleted !== false) {
      writer.uint32(80).bool(message.isDeleted);
    }
    if (message.createdAt !== '') {
      writer.uint32(90).string(message.createdAt);
    }
    if (message.updatedAt !== '') {
      writer.uint32(98).string(message.updatedAt);
    }
    for (const v of message.privacyList) {
      PrivacyOfGroupPermissionMenu.encode(v!, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Menu {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenu();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.system = IdName.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.menuId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.menuActionList.push(
            MenuActionList.decode(reader, reader.uint32()),
          );
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.parentMenu = IdName.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.url = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.description = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.ordering = reader.int32();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.isDeleted = reader.bool();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.privacyList.push(
            PrivacyOfGroupPermissionMenu.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Menu {
    return {
      system: isSet(object.system) ? IdName.fromJSON(object.system) : undefined,
      menuId: isSet(object.menuId) ? globalThis.String(object.menuId) : '',
      menuActionList: globalThis.Array.isArray(object?.menuActionList)
        ? object.menuActionList.map((e: any) => MenuActionList.fromJSON(e))
        : [],
      parentMenu: isSet(object.parentMenu)
        ? IdName.fromJSON(object.parentMenu)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      url: isSet(object.url) ? globalThis.String(object.url) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      ordering: isSet(object.ordering) ? globalThis.Number(object.ordering) : 0,
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
      isDeleted: isSet(object.isDeleted)
        ? globalThis.Boolean(object.isDeleted)
        : false,
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
      updatedAt: isSet(object.updatedAt)
        ? globalThis.String(object.updatedAt)
        : '',
      privacyList: globalThis.Array.isArray(object?.privacyList)
        ? object.privacyList.map((e: any) =>
            PrivacyOfGroupPermissionMenu.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: Menu): unknown {
    const obj: any = {};
    if (message.system !== undefined) {
      obj.system = IdName.toJSON(message.system);
    }
    if (message.menuId !== '') {
      obj.menuId = message.menuId;
    }
    if (message.menuActionList?.length) {
      obj.menuActionList = message.menuActionList.map(e =>
        MenuActionList.toJSON(e),
      );
    }
    if (message.parentMenu !== undefined) {
      obj.parentMenu = IdName.toJSON(message.parentMenu);
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.url !== '') {
      obj.url = message.url;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.ordering !== 0) {
      obj.ordering = Math.round(message.ordering);
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.isDeleted !== false) {
      obj.isDeleted = message.isDeleted;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== '') {
      obj.updatedAt = message.updatedAt;
    }
    if (message.privacyList?.length) {
      obj.privacyList = message.privacyList.map(e =>
        PrivacyOfGroupPermissionMenu.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Menu>, I>>(base?: I): Menu {
    return Menu.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Menu>, I>>(object: I): Menu {
    const message = createBaseMenu();
    message.system =
      object.system !== undefined && object.system !== null
        ? IdName.fromPartial(object.system)
        : undefined;
    message.menuId = object.menuId ?? '';
    message.menuActionList =
      object.menuActionList?.map(e => MenuActionList.fromPartial(e)) || [];
    message.parentMenu =
      object.parentMenu !== undefined && object.parentMenu !== null
        ? IdName.fromPartial(object.parentMenu)
        : undefined;
    message.name = object.name ?? '';
    message.url = object.url ?? '';
    message.description = object.description ?? '';
    message.ordering = object.ordering ?? 0;
    message.isActive = object.isActive ?? false;
    message.isDeleted = object.isDeleted ?? false;
    message.createdAt = object.createdAt ?? '';
    message.updatedAt = object.updatedAt ?? '';
    message.privacyList =
      object.privacyList?.map(e =>
        PrivacyOfGroupPermissionMenu.fromPartial(e),
      ) || [];
    return message;
  },
};

function createBaseMenuAction(): MenuAction {
  return {
    menuId: '',
    menuActionId: '',
    name: '',
    url: '',
    ordering: 0,
    isActive: false,
    isDeleted: false,
    createdAt: '',
    updatedAt: '',
  };
}

export const MenuAction = {
  encode(
    message: MenuAction,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.menuId !== '') {
      writer.uint32(10).string(message.menuId);
    }
    if (message.menuActionId !== '') {
      writer.uint32(18).string(message.menuActionId);
    }
    if (message.name !== '') {
      writer.uint32(26).string(message.name);
    }
    if (message.url !== '') {
      writer.uint32(34).string(message.url);
    }
    if (message.ordering !== 0) {
      writer.uint32(40).int32(message.ordering);
    }
    if (message.isActive !== false) {
      writer.uint32(48).bool(message.isActive);
    }
    if (message.isDeleted !== false) {
      writer.uint32(56).bool(message.isDeleted);
    }
    if (message.createdAt !== '') {
      writer.uint32(66).string(message.createdAt);
    }
    if (message.updatedAt !== '') {
      writer.uint32(74).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MenuAction {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.menuId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.menuActionId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.url = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.ordering = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.isDeleted = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuAction {
    return {
      menuId: isSet(object.menuId) ? globalThis.String(object.menuId) : '',
      menuActionId: isSet(object.menuActionId)
        ? globalThis.String(object.menuActionId)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      url: isSet(object.url) ? globalThis.String(object.url) : '',
      ordering: isSet(object.ordering) ? globalThis.Number(object.ordering) : 0,
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
      isDeleted: isSet(object.isDeleted)
        ? globalThis.Boolean(object.isDeleted)
        : false,
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
      updatedAt: isSet(object.updatedAt)
        ? globalThis.String(object.updatedAt)
        : '',
    };
  },

  toJSON(message: MenuAction): unknown {
    const obj: any = {};
    if (message.menuId !== '') {
      obj.menuId = message.menuId;
    }
    if (message.menuActionId !== '') {
      obj.menuActionId = message.menuActionId;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.url !== '') {
      obj.url = message.url;
    }
    if (message.ordering !== 0) {
      obj.ordering = Math.round(message.ordering);
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.isDeleted !== false) {
      obj.isDeleted = message.isDeleted;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== '') {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuAction>, I>>(base?: I): MenuAction {
    return MenuAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuAction>, I>>(
    object: I,
  ): MenuAction {
    const message = createBaseMenuAction();
    message.menuId = object.menuId ?? '';
    message.menuActionId = object.menuActionId ?? '';
    message.name = object.name ?? '';
    message.url = object.url ?? '';
    message.ordering = object.ordering ?? 0;
    message.isActive = object.isActive ?? false;
    message.isDeleted = object.isDeleted ?? false;
    message.createdAt = object.createdAt ?? '';
    message.updatedAt = object.updatedAt ?? '';
    return message;
  },
};

function createBaseMenuPrivacy(): MenuPrivacy {
  return { menuId: '', privacyTypeId: 0, createdAt: '' };
}

export const MenuPrivacy = {
  encode(
    message: MenuPrivacy,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.menuId !== '') {
      writer.uint32(10).string(message.menuId);
    }
    if (message.privacyTypeId !== 0) {
      writer.uint32(16).int32(message.privacyTypeId);
    }
    if (message.createdAt !== '') {
      writer.uint32(26).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MenuPrivacy {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMenuPrivacy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.menuId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.privacyTypeId = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createdAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MenuPrivacy {
    return {
      menuId: isSet(object.menuId) ? globalThis.String(object.menuId) : '',
      privacyTypeId: isSet(object.privacyTypeId)
        ? globalThis.Number(object.privacyTypeId)
        : 0,
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
    };
  },

  toJSON(message: MenuPrivacy): unknown {
    const obj: any = {};
    if (message.menuId !== '') {
      obj.menuId = message.menuId;
    }
    if (message.privacyTypeId !== 0) {
      obj.privacyTypeId = Math.round(message.privacyTypeId);
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MenuPrivacy>, I>>(base?: I): MenuPrivacy {
    return MenuPrivacy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MenuPrivacy>, I>>(
    object: I,
  ): MenuPrivacy {
    const message = createBaseMenuPrivacy();
    message.menuId = object.menuId ?? '';
    message.privacyTypeId = object.privacyTypeId ?? 0;
    message.createdAt = object.createdAt ?? '';
    return message;
  },
};

function createBasePosition(): Position {
  return {
    positionId: 0,
    code: '',
    name: '',
    description: '',
    isActive: false,
    createdAt: '',
  };
}

export const Position = {
  encode(
    message: Position,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.positionId !== 0) {
      writer.uint32(8).int32(message.positionId);
    }
    if (message.code !== '') {
      writer.uint32(18).string(message.code);
    }
    if (message.name !== '') {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(34).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(40).bool(message.isActive);
    }
    if (message.createdAt !== '') {
      writer.uint32(50).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Position {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.positionId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Position {
    return {
      positionId: isSet(object.positionId)
        ? globalThis.Number(object.positionId)
        : 0,
      code: isSet(object.code) ? globalThis.String(object.code) : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
    };
  },

  toJSON(message: Position): unknown {
    const obj: any = {};
    if (message.positionId !== 0) {
      obj.positionId = Math.round(message.positionId);
    }
    if (message.code !== '') {
      obj.code = message.code;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Position>, I>>(base?: I): Position {
    return Position.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Position>, I>>(object: I): Position {
    const message = createBasePosition();
    message.positionId = object.positionId ?? 0;
    message.code = object.code ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    message.createdAt = object.createdAt ?? '';
    return message;
  },
};

function createBasePrivacyType(): PrivacyType {
  return {
    privacyTypeId: 0,
    name: '',
    description: '',
    isActive: false,
    isDeleted: false,
    createdAt: '',
    updatedAt: '',
  };
}

export const PrivacyType = {
  encode(
    message: PrivacyType,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.privacyTypeId !== 0) {
      writer.uint32(8).int32(message.privacyTypeId);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(26).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    if (message.isDeleted !== false) {
      writer.uint32(40).bool(message.isDeleted);
    }
    if (message.createdAt !== '') {
      writer.uint32(50).string(message.createdAt);
    }
    if (message.updatedAt !== '') {
      writer.uint32(58).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrivacyType {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrivacyType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.privacyTypeId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isDeleted = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrivacyType {
    return {
      privacyTypeId: isSet(object.privacyTypeId)
        ? globalThis.Number(object.privacyTypeId)
        : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
      isDeleted: isSet(object.isDeleted)
        ? globalThis.Boolean(object.isDeleted)
        : false,
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
      updatedAt: isSet(object.updatedAt)
        ? globalThis.String(object.updatedAt)
        : '',
    };
  },

  toJSON(message: PrivacyType): unknown {
    const obj: any = {};
    if (message.privacyTypeId !== 0) {
      obj.privacyTypeId = Math.round(message.privacyTypeId);
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.isDeleted !== false) {
      obj.isDeleted = message.isDeleted;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== '') {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrivacyType>, I>>(base?: I): PrivacyType {
    return PrivacyType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrivacyType>, I>>(
    object: I,
  ): PrivacyType {
    const message = createBasePrivacyType();
    message.privacyTypeId = object.privacyTypeId ?? 0;
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    message.isDeleted = object.isDeleted ?? false;
    message.createdAt = object.createdAt ?? '';
    message.updatedAt = object.updatedAt ?? '';
    return message;
  },
};

function createBaseRequiredUserField(): RequiredUserField {
  return {
    fieldId: 0,
    field: '',
    isRequire: false,
    isActive: false,
    isDeleted: false,
    createdAt: '',
    updatedAt: '',
  };
}

export const RequiredUserField = {
  encode(
    message: RequiredUserField,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.fieldId !== 0) {
      writer.uint32(8).int32(message.fieldId);
    }
    if (message.field !== '') {
      writer.uint32(18).string(message.field);
    }
    if (message.isRequire !== false) {
      writer.uint32(24).bool(message.isRequire);
    }
    if (message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    if (message.isDeleted !== false) {
      writer.uint32(40).bool(message.isDeleted);
    }
    if (message.createdAt !== '') {
      writer.uint32(50).string(message.createdAt);
    }
    if (message.updatedAt !== '') {
      writer.uint32(58).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequiredUserField {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequiredUserField();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fieldId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.field = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isRequire = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isDeleted = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequiredUserField {
    return {
      fieldId: isSet(object.fieldId) ? globalThis.Number(object.fieldId) : 0,
      field: isSet(object.field) ? globalThis.String(object.field) : '',
      isRequire: isSet(object.isRequire)
        ? globalThis.Boolean(object.isRequire)
        : false,
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
      isDeleted: isSet(object.isDeleted)
        ? globalThis.Boolean(object.isDeleted)
        : false,
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
      updatedAt: isSet(object.updatedAt)
        ? globalThis.String(object.updatedAt)
        : '',
    };
  },

  toJSON(message: RequiredUserField): unknown {
    const obj: any = {};
    if (message.fieldId !== 0) {
      obj.fieldId = Math.round(message.fieldId);
    }
    if (message.field !== '') {
      obj.field = message.field;
    }
    if (message.isRequire !== false) {
      obj.isRequire = message.isRequire;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.isDeleted !== false) {
      obj.isDeleted = message.isDeleted;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== '') {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequiredUserField>, I>>(
    base?: I,
  ): RequiredUserField {
    return RequiredUserField.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequiredUserField>, I>>(
    object: I,
  ): RequiredUserField {
    const message = createBaseRequiredUserField();
    message.fieldId = object.fieldId ?? 0;
    message.field = object.field ?? '';
    message.isRequire = object.isRequire ?? false;
    message.isActive = object.isActive ?? false;
    message.isDeleted = object.isDeleted ?? false;
    message.createdAt = object.createdAt ?? '';
    message.updatedAt = object.updatedAt ?? '';
    return message;
  },
};

function createBaseSystem(): System {
  return {
    systemId: '',
    name: '',
    description: '',
    isActive: false,
    isDeleted: false,
    createdAt: '',
    updatedAt: '',
  };
}

export const System = {
  encode(
    message: System,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.systemId !== '') {
      writer.uint32(10).string(message.systemId);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(26).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    if (message.isDeleted !== false) {
      writer.uint32(40).bool(message.isDeleted);
    }
    if (message.createdAt !== '') {
      writer.uint32(50).string(message.createdAt);
    }
    if (message.updatedAt !== '') {
      writer.uint32(58).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): System {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSystem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.systemId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isDeleted = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): System {
    return {
      systemId: isSet(object.systemId)
        ? globalThis.String(object.systemId)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
      isDeleted: isSet(object.isDeleted)
        ? globalThis.Boolean(object.isDeleted)
        : false,
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
      updatedAt: isSet(object.updatedAt)
        ? globalThis.String(object.updatedAt)
        : '',
    };
  },

  toJSON(message: System): unknown {
    const obj: any = {};
    if (message.systemId !== '') {
      obj.systemId = message.systemId;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.isDeleted !== false) {
      obj.isDeleted = message.isDeleted;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== '') {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<System>, I>>(base?: I): System {
    return System.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<System>, I>>(object: I): System {
    const message = createBaseSystem();
    message.systemId = object.systemId ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    message.isDeleted = object.isDeleted ?? false;
    message.createdAt = object.createdAt ?? '';
    message.updatedAt = object.updatedAt ?? '';
    return message;
  },
};

function createBaseUserInfo(): UserInfo {
  return {
    userId: '',
    email: '',
    employeeNumber: '',
    name: '',
    department: undefined,
    position: undefined,
    job: undefined,
    phoneNumber: 0,
    extensionNumber: 0,
    state: 0,
    createdAt: '',
    auth: [],
  };
}

export const UserInfo = {
  encode(
    message: UserInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userId !== '') {
      writer.uint32(10).string(message.userId);
    }
    if (message.email !== '') {
      writer.uint32(18).string(message.email);
    }
    if (message.employeeNumber !== '') {
      writer.uint32(26).string(message.employeeNumber);
    }
    if (message.name !== '') {
      writer.uint32(34).string(message.name);
    }
    if (message.department !== undefined) {
      IdNumberName.encode(message.department, writer.uint32(42).fork()).join();
    }
    if (message.position !== undefined) {
      IdNumberName.encode(message.position, writer.uint32(50).fork()).join();
    }
    if (message.job !== undefined) {
      IdNumberName.encode(message.job, writer.uint32(58).fork()).join();
    }
    if (message.phoneNumber !== 0) {
      writer.uint32(64).int64(message.phoneNumber);
    }
    if (message.extensionNumber !== 0) {
      writer.uint32(72).int32(message.extensionNumber);
    }
    if (message.state !== 0) {
      writer.uint32(80).int32(message.state);
    }
    if (message.createdAt !== '') {
      writer.uint32(90).string(message.createdAt);
    }
    for (const v of message.auth) {
      UserInfoAuth.encode(v!, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserInfo {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.employeeNumber = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.department = IdNumberName.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.position = IdNumberName.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.job = IdNumberName.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.phoneNumber = longToNumber(reader.int64());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.extensionNumber = reader.int32();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.state = reader.int32();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.auth.push(UserInfoAuth.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserInfo {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : '',
      email: isSet(object.email) ? globalThis.String(object.email) : '',
      employeeNumber: isSet(object.employeeNumber)
        ? globalThis.String(object.employeeNumber)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      department: isSet(object.department)
        ? IdNumberName.fromJSON(object.department)
        : undefined,
      position: isSet(object.position)
        ? IdNumberName.fromJSON(object.position)
        : undefined,
      job: isSet(object.job) ? IdNumberName.fromJSON(object.job) : undefined,
      phoneNumber: isSet(object.phoneNumber)
        ? globalThis.Number(object.phoneNumber)
        : 0,
      extensionNumber: isSet(object.extensionNumber)
        ? globalThis.Number(object.extensionNumber)
        : 0,
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
      auth: globalThis.Array.isArray(object?.auth)
        ? object.auth.map((e: any) => UserInfoAuth.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UserInfo): unknown {
    const obj: any = {};
    if (message.userId !== '') {
      obj.userId = message.userId;
    }
    if (message.email !== '') {
      obj.email = message.email;
    }
    if (message.employeeNumber !== '') {
      obj.employeeNumber = message.employeeNumber;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.department !== undefined) {
      obj.department = IdNumberName.toJSON(message.department);
    }
    if (message.position !== undefined) {
      obj.position = IdNumberName.toJSON(message.position);
    }
    if (message.job !== undefined) {
      obj.job = IdNumberName.toJSON(message.job);
    }
    if (message.phoneNumber !== 0) {
      obj.phoneNumber = Math.round(message.phoneNumber);
    }
    if (message.extensionNumber !== 0) {
      obj.extensionNumber = Math.round(message.extensionNumber);
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    if (message.auth?.length) {
      obj.auth = message.auth.map(e => UserInfoAuth.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserInfo>, I>>(base?: I): UserInfo {
    return UserInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserInfo>, I>>(object: I): UserInfo {
    const message = createBaseUserInfo();
    message.userId = object.userId ?? '';
    message.email = object.email ?? '';
    message.employeeNumber = object.employeeNumber ?? '';
    message.name = object.name ?? '';
    message.department =
      object.department !== undefined && object.department !== null
        ? IdNumberName.fromPartial(object.department)
        : undefined;
    message.position =
      object.position !== undefined && object.position !== null
        ? IdNumberName.fromPartial(object.position)
        : undefined;
    message.job =
      object.job !== undefined && object.job !== null
        ? IdNumberName.fromPartial(object.job)
        : undefined;
    message.phoneNumber = object.phoneNumber ?? 0;
    message.extensionNumber = object.extensionNumber ?? 0;
    message.state = object.state ?? 0;
    message.createdAt = object.createdAt ?? '';
    message.auth = object.auth?.map(e => UserInfoAuth.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUserInfoAuth(): UserInfoAuth {
  return { permissionCode: '', name: '' };
}

export const UserInfoAuth = {
  encode(
    message: UserInfoAuth,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.permissionCode !== '') {
      writer.uint32(10).string(message.permissionCode);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserInfoAuth {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserInfoAuth();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissionCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserInfoAuth {
    return {
      permissionCode: isSet(object.permissionCode)
        ? globalThis.String(object.permissionCode)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
    };
  },

  toJSON(message: UserInfoAuth): unknown {
    const obj: any = {};
    if (message.permissionCode !== '') {
      obj.permissionCode = message.permissionCode;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserInfoAuth>, I>>(
    base?: I,
  ): UserInfoAuth {
    return UserInfoAuth.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserInfoAuth>, I>>(
    object: I,
  ): UserInfoAuth {
    const message = createBaseUserInfoAuth();
    message.permissionCode = object.permissionCode ?? '';
    message.name = object.name ?? '';
    return message;
  },
};

function createBaseIdName(): IdName {
  return { id: '', name: '' };
}

export const IdName = {
  encode(
    message: IdName,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdName {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdName();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdName {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
    };
  },

  toJSON(message: IdName): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IdName>, I>>(base?: I): IdName {
    return IdName.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IdName>, I>>(object: I): IdName {
    const message = createBaseIdName();
    message.id = object.id ?? '';
    message.name = object.name ?? '';
    return message;
  },
};

function createBaseIdNumberName(): IdNumberName {
  return { id: 0, name: '' };
}

export const IdNumberName = {
  encode(
    message: IdNumberName,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdNumberName {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdNumberName();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdNumberName {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : '',
    };
  },

  toJSON(message: IdNumberName): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IdNumberName>, I>>(
    base?: I,
  ): IdNumberName {
    return IdNumberName.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IdNumberName>, I>>(
    object: I,
  ): IdNumberName {
    const message = createBaseIdNumberName();
    message.id = object.id ?? 0;
    message.name = object.name ?? '';
    return message;
  },
};

function createBaseGlobalNavigationMenus(): GlobalNavigationMenus {
  return {
    systemId: '',
    systemName: '',
    menuId: '',
    menuName: '',
    parentMenuId: '',
    url: '',
  };
}

export const GlobalNavigationMenus = {
  encode(
    message: GlobalNavigationMenus,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.systemId !== '') {
      writer.uint32(10).string(message.systemId);
    }
    if (message.systemName !== '') {
      writer.uint32(18).string(message.systemName);
    }
    if (message.menuId !== '') {
      writer.uint32(26).string(message.menuId);
    }
    if (message.menuName !== '') {
      writer.uint32(34).string(message.menuName);
    }
    if (message.parentMenuId !== '') {
      writer.uint32(42).string(message.parentMenuId);
    }
    if (message.url !== '') {
      writer.uint32(50).string(message.url);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GlobalNavigationMenus {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGlobalNavigationMenus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.systemId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.systemName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.menuId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.menuName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.parentMenuId = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GlobalNavigationMenus {
    return {
      systemId: isSet(object.systemId)
        ? globalThis.String(object.systemId)
        : '',
      systemName: isSet(object.systemName)
        ? globalThis.String(object.systemName)
        : '',
      menuId: isSet(object.menuId) ? globalThis.String(object.menuId) : '',
      menuName: isSet(object.menuName)
        ? globalThis.String(object.menuName)
        : '',
      parentMenuId: isSet(object.parentMenuId)
        ? globalThis.String(object.parentMenuId)
        : '',
      url: isSet(object.url) ? globalThis.String(object.url) : '',
    };
  },

  toJSON(message: GlobalNavigationMenus): unknown {
    const obj: any = {};
    if (message.systemId !== '') {
      obj.systemId = message.systemId;
    }
    if (message.systemName !== '') {
      obj.systemName = message.systemName;
    }
    if (message.menuId !== '') {
      obj.menuId = message.menuId;
    }
    if (message.menuName !== '') {
      obj.menuName = message.menuName;
    }
    if (message.parentMenuId !== '') {
      obj.parentMenuId = message.parentMenuId;
    }
    if (message.url !== '') {
      obj.url = message.url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GlobalNavigationMenus>, I>>(
    base?: I,
  ): GlobalNavigationMenus {
    return GlobalNavigationMenus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GlobalNavigationMenus>, I>>(
    object: I,
  ): GlobalNavigationMenus {
    const message = createBaseGlobalNavigationMenus();
    message.systemId = object.systemId ?? '';
    message.systemName = object.systemName ?? '';
    message.menuId = object.menuId ?? '';
    message.menuName = object.menuName ?? '';
    message.parentMenuId = object.parentMenuId ?? '';
    message.url = object.url ?? '';
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error('Value is larger than Number.MAX_SAFE_INTEGER');
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error('Value is smaller than Number.MIN_SAFE_INTEGER');
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
