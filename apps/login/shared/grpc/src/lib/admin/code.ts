// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: code.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';
import { CodeGroup, CodeItem } from './admin-common';

export const protobufPackage = 'admin';

export interface GetCodeGroupListRequest {
  page: number;
  countPerPage: number;
}

export interface GetCodeGroupListResponse {
  success: boolean;
  errorMessage: string;
  codeGroupList: CodeGroup[];
}

export interface CreateCodeGroupRequest {
  groupCode: string;
  name: string;
  description: string;
  isActive: boolean;
}

export interface CreateCodeGroupResponse {
  success: boolean;
  errorMessage: string;
}

export interface UpdateCodeGroupRequest {
  groupCode: string;
  name: string;
  description: string;
  isActive: boolean;
}

export interface UpdateCodeGroupResponse {
  success: boolean;
  errorMessage: string;
}

export interface DeleteCodeGroupRequest {
  groupCode: string;
}

export interface DeleteCodeGroupResponse {
  success: boolean;
  errorMessage: string;
}

export interface GetCodeItemListRequest {
  page: number;
  countPerPage: number;
  groupCode: string;
}

export interface GetCodeItemListResponse {
  success: boolean;
  errorMessage: string;
  codeItemList: CodeItem[];
}

export interface CreateCodeItemRequest {
  groupCode: string;
  itemCode: string;
  name: string;
  description: string;
  isActive: boolean;
}

export interface CreateCodeItemResponse {
  success: boolean;
  errorMessage: string;
}

export interface UpdateCodeItemRequest {
  groupCode: string;
  itemCode: string;
  name: string;
  description: string;
  isActive: boolean;
}

export interface UpdateCodeItemResponse {
  success: boolean;
  errorMessage: string;
}

export interface UpdateCodeItemOrderingRequest {
  groupCode: string;
  itemCodeList: string;
}

export interface UpdateCodeItemOrderingResponse {
  success: boolean;
  errorMessage: string;
}

export interface DeleteCodeItemRequest {
  groupCode: string;
  itemCode: string;
}

export interface DeleteCodeItemResponse {
  success: boolean;
  errorMessage: string;
}

function createBaseGetCodeGroupListRequest(): GetCodeGroupListRequest {
  return { page: 0, countPerPage: 0 };
}

export const GetCodeGroupListRequest = {
  encode(
    message: GetCodeGroupListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.countPerPage !== 0) {
      writer.uint32(16).int32(message.countPerPage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetCodeGroupListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCodeGroupListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.countPerPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCodeGroupListRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      countPerPage: isSet(object.countPerPage)
        ? globalThis.Number(object.countPerPage)
        : 0,
    };
  },

  toJSON(message: GetCodeGroupListRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.countPerPage !== 0) {
      obj.countPerPage = Math.round(message.countPerPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCodeGroupListRequest>, I>>(
    base?: I,
  ): GetCodeGroupListRequest {
    return GetCodeGroupListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCodeGroupListRequest>, I>>(
    object: I,
  ): GetCodeGroupListRequest {
    const message = createBaseGetCodeGroupListRequest();
    message.page = object.page ?? 0;
    message.countPerPage = object.countPerPage ?? 0;
    return message;
  },
};

function createBaseGetCodeGroupListResponse(): GetCodeGroupListResponse {
  return { success: false, errorMessage: '', codeGroupList: [] };
}

export const GetCodeGroupListResponse = {
  encode(
    message: GetCodeGroupListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.codeGroupList) {
      CodeGroup.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetCodeGroupListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCodeGroupListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.codeGroupList.push(CodeGroup.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCodeGroupListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      codeGroupList: globalThis.Array.isArray(object?.codeGroupList)
        ? object.codeGroupList.map((e: any) => CodeGroup.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetCodeGroupListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.codeGroupList?.length) {
      obj.codeGroupList = message.codeGroupList.map(e => CodeGroup.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCodeGroupListResponse>, I>>(
    base?: I,
  ): GetCodeGroupListResponse {
    return GetCodeGroupListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCodeGroupListResponse>, I>>(
    object: I,
  ): GetCodeGroupListResponse {
    const message = createBaseGetCodeGroupListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.codeGroupList =
      object.codeGroupList?.map(e => CodeGroup.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateCodeGroupRequest(): CreateCodeGroupRequest {
  return { groupCode: '', name: '', description: '', isActive: false };
}

export const CreateCodeGroupRequest = {
  encode(
    message: CreateCodeGroupRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.groupCode !== '') {
      writer.uint32(10).string(message.groupCode);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(26).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateCodeGroupRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCodeGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.groupCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCodeGroupRequest {
    return {
      groupCode: isSet(object.groupCode)
        ? globalThis.String(object.groupCode)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: CreateCodeGroupRequest): unknown {
    const obj: any = {};
    if (message.groupCode !== '') {
      obj.groupCode = message.groupCode;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateCodeGroupRequest>, I>>(
    base?: I,
  ): CreateCodeGroupRequest {
    return CreateCodeGroupRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateCodeGroupRequest>, I>>(
    object: I,
  ): CreateCodeGroupRequest {
    const message = createBaseCreateCodeGroupRequest();
    message.groupCode = object.groupCode ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseCreateCodeGroupResponse(): CreateCodeGroupResponse {
  return { success: false, errorMessage: '' };
}

export const CreateCodeGroupResponse = {
  encode(
    message: CreateCodeGroupResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateCodeGroupResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCodeGroupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCodeGroupResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: CreateCodeGroupResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateCodeGroupResponse>, I>>(
    base?: I,
  ): CreateCodeGroupResponse {
    return CreateCodeGroupResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateCodeGroupResponse>, I>>(
    object: I,
  ): CreateCodeGroupResponse {
    const message = createBaseCreateCodeGroupResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseUpdateCodeGroupRequest(): UpdateCodeGroupRequest {
  return { groupCode: '', name: '', description: '', isActive: false };
}

export const UpdateCodeGroupRequest = {
  encode(
    message: UpdateCodeGroupRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.groupCode !== '') {
      writer.uint32(10).string(message.groupCode);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(26).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateCodeGroupRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCodeGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.groupCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCodeGroupRequest {
    return {
      groupCode: isSet(object.groupCode)
        ? globalThis.String(object.groupCode)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: UpdateCodeGroupRequest): unknown {
    const obj: any = {};
    if (message.groupCode !== '') {
      obj.groupCode = message.groupCode;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCodeGroupRequest>, I>>(
    base?: I,
  ): UpdateCodeGroupRequest {
    return UpdateCodeGroupRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCodeGroupRequest>, I>>(
    object: I,
  ): UpdateCodeGroupRequest {
    const message = createBaseUpdateCodeGroupRequest();
    message.groupCode = object.groupCode ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseUpdateCodeGroupResponse(): UpdateCodeGroupResponse {
  return { success: false, errorMessage: '' };
}

export const UpdateCodeGroupResponse = {
  encode(
    message: UpdateCodeGroupResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateCodeGroupResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCodeGroupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCodeGroupResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: UpdateCodeGroupResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCodeGroupResponse>, I>>(
    base?: I,
  ): UpdateCodeGroupResponse {
    return UpdateCodeGroupResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCodeGroupResponse>, I>>(
    object: I,
  ): UpdateCodeGroupResponse {
    const message = createBaseUpdateCodeGroupResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseDeleteCodeGroupRequest(): DeleteCodeGroupRequest {
  return { groupCode: '' };
}

export const DeleteCodeGroupRequest = {
  encode(
    message: DeleteCodeGroupRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.groupCode !== '') {
      writer.uint32(10).string(message.groupCode);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteCodeGroupRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCodeGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.groupCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCodeGroupRequest {
    return {
      groupCode: isSet(object.groupCode)
        ? globalThis.String(object.groupCode)
        : '',
    };
  },

  toJSON(message: DeleteCodeGroupRequest): unknown {
    const obj: any = {};
    if (message.groupCode !== '') {
      obj.groupCode = message.groupCode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteCodeGroupRequest>, I>>(
    base?: I,
  ): DeleteCodeGroupRequest {
    return DeleteCodeGroupRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteCodeGroupRequest>, I>>(
    object: I,
  ): DeleteCodeGroupRequest {
    const message = createBaseDeleteCodeGroupRequest();
    message.groupCode = object.groupCode ?? '';
    return message;
  },
};

function createBaseDeleteCodeGroupResponse(): DeleteCodeGroupResponse {
  return { success: false, errorMessage: '' };
}

export const DeleteCodeGroupResponse = {
  encode(
    message: DeleteCodeGroupResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteCodeGroupResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCodeGroupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCodeGroupResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: DeleteCodeGroupResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteCodeGroupResponse>, I>>(
    base?: I,
  ): DeleteCodeGroupResponse {
    return DeleteCodeGroupResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteCodeGroupResponse>, I>>(
    object: I,
  ): DeleteCodeGroupResponse {
    const message = createBaseDeleteCodeGroupResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseGetCodeItemListRequest(): GetCodeItemListRequest {
  return { page: 0, countPerPage: 0, groupCode: '' };
}

export const GetCodeItemListRequest = {
  encode(
    message: GetCodeItemListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.countPerPage !== 0) {
      writer.uint32(16).int32(message.countPerPage);
    }
    if (message.groupCode !== '') {
      writer.uint32(26).string(message.groupCode);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetCodeItemListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCodeItemListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.countPerPage = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.groupCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCodeItemListRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      countPerPage: isSet(object.countPerPage)
        ? globalThis.Number(object.countPerPage)
        : 0,
      groupCode: isSet(object.groupCode)
        ? globalThis.String(object.groupCode)
        : '',
    };
  },

  toJSON(message: GetCodeItemListRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.countPerPage !== 0) {
      obj.countPerPage = Math.round(message.countPerPage);
    }
    if (message.groupCode !== '') {
      obj.groupCode = message.groupCode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCodeItemListRequest>, I>>(
    base?: I,
  ): GetCodeItemListRequest {
    return GetCodeItemListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCodeItemListRequest>, I>>(
    object: I,
  ): GetCodeItemListRequest {
    const message = createBaseGetCodeItemListRequest();
    message.page = object.page ?? 0;
    message.countPerPage = object.countPerPage ?? 0;
    message.groupCode = object.groupCode ?? '';
    return message;
  },
};

function createBaseGetCodeItemListResponse(): GetCodeItemListResponse {
  return { success: false, errorMessage: '', codeItemList: [] };
}

export const GetCodeItemListResponse = {
  encode(
    message: GetCodeItemListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.codeItemList) {
      CodeItem.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetCodeItemListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCodeItemListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.codeItemList.push(CodeItem.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCodeItemListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      codeItemList: globalThis.Array.isArray(object?.codeItemList)
        ? object.codeItemList.map((e: any) => CodeItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetCodeItemListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.codeItemList?.length) {
      obj.codeItemList = message.codeItemList.map(e => CodeItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCodeItemListResponse>, I>>(
    base?: I,
  ): GetCodeItemListResponse {
    return GetCodeItemListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCodeItemListResponse>, I>>(
    object: I,
  ): GetCodeItemListResponse {
    const message = createBaseGetCodeItemListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.codeItemList =
      object.codeItemList?.map(e => CodeItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateCodeItemRequest(): CreateCodeItemRequest {
  return {
    groupCode: '',
    itemCode: '',
    name: '',
    description: '',
    isActive: false,
  };
}

export const CreateCodeItemRequest = {
  encode(
    message: CreateCodeItemRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.groupCode !== '') {
      writer.uint32(10).string(message.groupCode);
    }
    if (message.itemCode !== '') {
      writer.uint32(18).string(message.itemCode);
    }
    if (message.name !== '') {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(34).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(40).bool(message.isActive);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateCodeItemRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCodeItemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.groupCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.itemCode = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCodeItemRequest {
    return {
      groupCode: isSet(object.groupCode)
        ? globalThis.String(object.groupCode)
        : '',
      itemCode: isSet(object.itemCode)
        ? globalThis.String(object.itemCode)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: CreateCodeItemRequest): unknown {
    const obj: any = {};
    if (message.groupCode !== '') {
      obj.groupCode = message.groupCode;
    }
    if (message.itemCode !== '') {
      obj.itemCode = message.itemCode;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateCodeItemRequest>, I>>(
    base?: I,
  ): CreateCodeItemRequest {
    return CreateCodeItemRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateCodeItemRequest>, I>>(
    object: I,
  ): CreateCodeItemRequest {
    const message = createBaseCreateCodeItemRequest();
    message.groupCode = object.groupCode ?? '';
    message.itemCode = object.itemCode ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseCreateCodeItemResponse(): CreateCodeItemResponse {
  return { success: false, errorMessage: '' };
}

export const CreateCodeItemResponse = {
  encode(
    message: CreateCodeItemResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateCodeItemResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCodeItemResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCodeItemResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: CreateCodeItemResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateCodeItemResponse>, I>>(
    base?: I,
  ): CreateCodeItemResponse {
    return CreateCodeItemResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateCodeItemResponse>, I>>(
    object: I,
  ): CreateCodeItemResponse {
    const message = createBaseCreateCodeItemResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseUpdateCodeItemRequest(): UpdateCodeItemRequest {
  return {
    groupCode: '',
    itemCode: '',
    name: '',
    description: '',
    isActive: false,
  };
}

export const UpdateCodeItemRequest = {
  encode(
    message: UpdateCodeItemRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.groupCode !== '') {
      writer.uint32(10).string(message.groupCode);
    }
    if (message.itemCode !== '') {
      writer.uint32(18).string(message.itemCode);
    }
    if (message.name !== '') {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(34).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(40).bool(message.isActive);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateCodeItemRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCodeItemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.groupCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.itemCode = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCodeItemRequest {
    return {
      groupCode: isSet(object.groupCode)
        ? globalThis.String(object.groupCode)
        : '',
      itemCode: isSet(object.itemCode)
        ? globalThis.String(object.itemCode)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: UpdateCodeItemRequest): unknown {
    const obj: any = {};
    if (message.groupCode !== '') {
      obj.groupCode = message.groupCode;
    }
    if (message.itemCode !== '') {
      obj.itemCode = message.itemCode;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCodeItemRequest>, I>>(
    base?: I,
  ): UpdateCodeItemRequest {
    return UpdateCodeItemRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCodeItemRequest>, I>>(
    object: I,
  ): UpdateCodeItemRequest {
    const message = createBaseUpdateCodeItemRequest();
    message.groupCode = object.groupCode ?? '';
    message.itemCode = object.itemCode ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseUpdateCodeItemResponse(): UpdateCodeItemResponse {
  return { success: false, errorMessage: '' };
}

export const UpdateCodeItemResponse = {
  encode(
    message: UpdateCodeItemResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateCodeItemResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCodeItemResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCodeItemResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: UpdateCodeItemResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCodeItemResponse>, I>>(
    base?: I,
  ): UpdateCodeItemResponse {
    return UpdateCodeItemResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCodeItemResponse>, I>>(
    object: I,
  ): UpdateCodeItemResponse {
    const message = createBaseUpdateCodeItemResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseUpdateCodeItemOrderingRequest(): UpdateCodeItemOrderingRequest {
  return { groupCode: '', itemCodeList: '' };
}

export const UpdateCodeItemOrderingRequest = {
  encode(
    message: UpdateCodeItemOrderingRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.groupCode !== '') {
      writer.uint32(10).string(message.groupCode);
    }
    if (message.itemCodeList !== '') {
      writer.uint32(18).string(message.itemCodeList);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateCodeItemOrderingRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCodeItemOrderingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.groupCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.itemCodeList = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCodeItemOrderingRequest {
    return {
      groupCode: isSet(object.groupCode)
        ? globalThis.String(object.groupCode)
        : '',
      itemCodeList: isSet(object.itemCodeList)
        ? globalThis.String(object.itemCodeList)
        : '',
    };
  },

  toJSON(message: UpdateCodeItemOrderingRequest): unknown {
    const obj: any = {};
    if (message.groupCode !== '') {
      obj.groupCode = message.groupCode;
    }
    if (message.itemCodeList !== '') {
      obj.itemCodeList = message.itemCodeList;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCodeItemOrderingRequest>, I>>(
    base?: I,
  ): UpdateCodeItemOrderingRequest {
    return UpdateCodeItemOrderingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCodeItemOrderingRequest>, I>>(
    object: I,
  ): UpdateCodeItemOrderingRequest {
    const message = createBaseUpdateCodeItemOrderingRequest();
    message.groupCode = object.groupCode ?? '';
    message.itemCodeList = object.itemCodeList ?? '';
    return message;
  },
};

function createBaseUpdateCodeItemOrderingResponse(): UpdateCodeItemOrderingResponse {
  return { success: false, errorMessage: '' };
}

export const UpdateCodeItemOrderingResponse = {
  encode(
    message: UpdateCodeItemOrderingResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateCodeItemOrderingResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCodeItemOrderingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCodeItemOrderingResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: UpdateCodeItemOrderingResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCodeItemOrderingResponse>, I>>(
    base?: I,
  ): UpdateCodeItemOrderingResponse {
    return UpdateCodeItemOrderingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCodeItemOrderingResponse>, I>>(
    object: I,
  ): UpdateCodeItemOrderingResponse {
    const message = createBaseUpdateCodeItemOrderingResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseDeleteCodeItemRequest(): DeleteCodeItemRequest {
  return { groupCode: '', itemCode: '' };
}

export const DeleteCodeItemRequest = {
  encode(
    message: DeleteCodeItemRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.groupCode !== '') {
      writer.uint32(10).string(message.groupCode);
    }
    if (message.itemCode !== '') {
      writer.uint32(18).string(message.itemCode);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteCodeItemRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCodeItemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.groupCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.itemCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCodeItemRequest {
    return {
      groupCode: isSet(object.groupCode)
        ? globalThis.String(object.groupCode)
        : '',
      itemCode: isSet(object.itemCode)
        ? globalThis.String(object.itemCode)
        : '',
    };
  },

  toJSON(message: DeleteCodeItemRequest): unknown {
    const obj: any = {};
    if (message.groupCode !== '') {
      obj.groupCode = message.groupCode;
    }
    if (message.itemCode !== '') {
      obj.itemCode = message.itemCode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteCodeItemRequest>, I>>(
    base?: I,
  ): DeleteCodeItemRequest {
    return DeleteCodeItemRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteCodeItemRequest>, I>>(
    object: I,
  ): DeleteCodeItemRequest {
    const message = createBaseDeleteCodeItemRequest();
    message.groupCode = object.groupCode ?? '';
    message.itemCode = object.itemCode ?? '';
    return message;
  },
};

function createBaseDeleteCodeItemResponse(): DeleteCodeItemResponse {
  return { success: false, errorMessage: '' };
}

export const DeleteCodeItemResponse = {
  encode(
    message: DeleteCodeItemResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteCodeItemResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCodeItemResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCodeItemResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: DeleteCodeItemResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteCodeItemResponse>, I>>(
    base?: I,
  ): DeleteCodeItemResponse {
    return DeleteCodeItemResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteCodeItemResponse>, I>>(
    object: I,
  ): DeleteCodeItemResponse {
    const message = createBaseDeleteCodeItemResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

export type AdminCodeServiceService = typeof AdminCodeServiceService;
export const AdminCodeServiceService = {
  getCodeGroupList: {
    path: '/admin.AdminCodeService/GetCodeGroupList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetCodeGroupListRequest) =>
      Buffer.from(GetCodeGroupListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      GetCodeGroupListRequest.decode(value),
    responseSerialize: (value: GetCodeGroupListResponse) =>
      Buffer.from(GetCodeGroupListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetCodeGroupListResponse.decode(value),
  },
  createCodeGroup: {
    path: '/admin.AdminCodeService/CreateCodeGroup',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateCodeGroupRequest) =>
      Buffer.from(CreateCodeGroupRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateCodeGroupRequest.decode(value),
    responseSerialize: (value: CreateCodeGroupResponse) =>
      Buffer.from(CreateCodeGroupResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      CreateCodeGroupResponse.decode(value),
  },
  updateCodeGroup: {
    path: '/admin.AdminCodeService/UpdateCodeGroup',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateCodeGroupRequest) =>
      Buffer.from(UpdateCodeGroupRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateCodeGroupRequest.decode(value),
    responseSerialize: (value: UpdateCodeGroupResponse) =>
      Buffer.from(UpdateCodeGroupResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      UpdateCodeGroupResponse.decode(value),
  },
  deleteCodeGroup: {
    path: '/admin.AdminCodeService/DeleteCodeGroup',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteCodeGroupRequest) =>
      Buffer.from(DeleteCodeGroupRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteCodeGroupRequest.decode(value),
    responseSerialize: (value: DeleteCodeGroupResponse) =>
      Buffer.from(DeleteCodeGroupResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      DeleteCodeGroupResponse.decode(value),
  },
  getCodeItemList: {
    path: '/admin.AdminCodeService/GetCodeItemList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetCodeItemListRequest) =>
      Buffer.from(GetCodeItemListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetCodeItemListRequest.decode(value),
    responseSerialize: (value: GetCodeItemListResponse) =>
      Buffer.from(GetCodeItemListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetCodeItemListResponse.decode(value),
  },
  createCodeItem: {
    path: '/admin.AdminCodeService/CreateCodeItem',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateCodeItemRequest) =>
      Buffer.from(CreateCodeItemRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateCodeItemRequest.decode(value),
    responseSerialize: (value: CreateCodeItemResponse) =>
      Buffer.from(CreateCodeItemResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      CreateCodeItemResponse.decode(value),
  },
  updateCodeItem: {
    path: '/admin.AdminCodeService/UpdateCodeItem',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateCodeItemRequest) =>
      Buffer.from(UpdateCodeItemRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateCodeItemRequest.decode(value),
    responseSerialize: (value: UpdateCodeItemResponse) =>
      Buffer.from(UpdateCodeItemResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      UpdateCodeItemResponse.decode(value),
  },
  updateCodeItemOrdering: {
    path: '/admin.AdminCodeService/UpdateCodeItemOrdering',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateCodeItemOrderingRequest) =>
      Buffer.from(UpdateCodeItemOrderingRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      UpdateCodeItemOrderingRequest.decode(value),
    responseSerialize: (value: UpdateCodeItemOrderingResponse) =>
      Buffer.from(UpdateCodeItemOrderingResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      UpdateCodeItemOrderingResponse.decode(value),
  },
  deleteCodeItem: {
    path: '/admin.AdminCodeService/DeleteCodeItem',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteCodeItemRequest) =>
      Buffer.from(DeleteCodeItemRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteCodeItemRequest.decode(value),
    responseSerialize: (value: DeleteCodeItemResponse) =>
      Buffer.from(DeleteCodeItemResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      DeleteCodeItemResponse.decode(value),
  },
} as const;

export interface AdminCodeServiceServer extends UntypedServiceImplementation {
  getCodeGroupList: handleUnaryCall<
    GetCodeGroupListRequest,
    GetCodeGroupListResponse
  >;
  createCodeGroup: handleUnaryCall<
    CreateCodeGroupRequest,
    CreateCodeGroupResponse
  >;
  updateCodeGroup: handleUnaryCall<
    UpdateCodeGroupRequest,
    UpdateCodeGroupResponse
  >;
  deleteCodeGroup: handleUnaryCall<
    DeleteCodeGroupRequest,
    DeleteCodeGroupResponse
  >;
  getCodeItemList: handleUnaryCall<
    GetCodeItemListRequest,
    GetCodeItemListResponse
  >;
  createCodeItem: handleUnaryCall<
    CreateCodeItemRequest,
    CreateCodeItemResponse
  >;
  updateCodeItem: handleUnaryCall<
    UpdateCodeItemRequest,
    UpdateCodeItemResponse
  >;
  updateCodeItemOrdering: handleUnaryCall<
    UpdateCodeItemOrderingRequest,
    UpdateCodeItemOrderingResponse
  >;
  deleteCodeItem: handleUnaryCall<
    DeleteCodeItemRequest,
    DeleteCodeItemResponse
  >;
}

export interface AdminCodeServiceClient extends Client {
  getCodeGroupList(
    request: GetCodeGroupListRequest,
    callback: (
      error: ServiceError | null,
      response: GetCodeGroupListResponse,
    ) => void,
  ): ClientUnaryCall;
  getCodeGroupList(
    request: GetCodeGroupListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetCodeGroupListResponse,
    ) => void,
  ): ClientUnaryCall;
  getCodeGroupList(
    request: GetCodeGroupListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetCodeGroupListResponse,
    ) => void,
  ): ClientUnaryCall;
  createCodeGroup(
    request: CreateCodeGroupRequest,
    callback: (
      error: ServiceError | null,
      response: CreateCodeGroupResponse,
    ) => void,
  ): ClientUnaryCall;
  createCodeGroup(
    request: CreateCodeGroupRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: CreateCodeGroupResponse,
    ) => void,
  ): ClientUnaryCall;
  createCodeGroup(
    request: CreateCodeGroupRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: CreateCodeGroupResponse,
    ) => void,
  ): ClientUnaryCall;
  updateCodeGroup(
    request: UpdateCodeGroupRequest,
    callback: (
      error: ServiceError | null,
      response: UpdateCodeGroupResponse,
    ) => void,
  ): ClientUnaryCall;
  updateCodeGroup(
    request: UpdateCodeGroupRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: UpdateCodeGroupResponse,
    ) => void,
  ): ClientUnaryCall;
  updateCodeGroup(
    request: UpdateCodeGroupRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: UpdateCodeGroupResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteCodeGroup(
    request: DeleteCodeGroupRequest,
    callback: (
      error: ServiceError | null,
      response: DeleteCodeGroupResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteCodeGroup(
    request: DeleteCodeGroupRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: DeleteCodeGroupResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteCodeGroup(
    request: DeleteCodeGroupRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: DeleteCodeGroupResponse,
    ) => void,
  ): ClientUnaryCall;
  getCodeItemList(
    request: GetCodeItemListRequest,
    callback: (
      error: ServiceError | null,
      response: GetCodeItemListResponse,
    ) => void,
  ): ClientUnaryCall;
  getCodeItemList(
    request: GetCodeItemListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetCodeItemListResponse,
    ) => void,
  ): ClientUnaryCall;
  getCodeItemList(
    request: GetCodeItemListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetCodeItemListResponse,
    ) => void,
  ): ClientUnaryCall;
  createCodeItem(
    request: CreateCodeItemRequest,
    callback: (
      error: ServiceError | null,
      response: CreateCodeItemResponse,
    ) => void,
  ): ClientUnaryCall;
  createCodeItem(
    request: CreateCodeItemRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: CreateCodeItemResponse,
    ) => void,
  ): ClientUnaryCall;
  createCodeItem(
    request: CreateCodeItemRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: CreateCodeItemResponse,
    ) => void,
  ): ClientUnaryCall;
  updateCodeItem(
    request: UpdateCodeItemRequest,
    callback: (
      error: ServiceError | null,
      response: UpdateCodeItemResponse,
    ) => void,
  ): ClientUnaryCall;
  updateCodeItem(
    request: UpdateCodeItemRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: UpdateCodeItemResponse,
    ) => void,
  ): ClientUnaryCall;
  updateCodeItem(
    request: UpdateCodeItemRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: UpdateCodeItemResponse,
    ) => void,
  ): ClientUnaryCall;
  updateCodeItemOrdering(
    request: UpdateCodeItemOrderingRequest,
    callback: (
      error: ServiceError | null,
      response: UpdateCodeItemOrderingResponse,
    ) => void,
  ): ClientUnaryCall;
  updateCodeItemOrdering(
    request: UpdateCodeItemOrderingRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: UpdateCodeItemOrderingResponse,
    ) => void,
  ): ClientUnaryCall;
  updateCodeItemOrdering(
    request: UpdateCodeItemOrderingRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: UpdateCodeItemOrderingResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteCodeItem(
    request: DeleteCodeItemRequest,
    callback: (
      error: ServiceError | null,
      response: DeleteCodeItemResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteCodeItem(
    request: DeleteCodeItemRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: DeleteCodeItemResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteCodeItem(
    request: DeleteCodeItemRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: DeleteCodeItemResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const AdminCodeServiceClient = makeGenericClientConstructor(
  AdminCodeServiceService,
  'admin.AdminCodeService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): AdminCodeServiceClient;
  service: typeof AdminCodeServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
