// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: department.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';
import { Department } from './admin-common';

export const protobufPackage = 'admin';

export interface GetDepartmentListRequest {}

export interface GetDepartmentListResponse {
  success: boolean;
  errorMessage: string;
  departmentList: Department[];
}

export interface CreateDepartmentRequest {
  code: string;
  name: string;
  description: string;
  isActive: boolean;
}

export interface CreateDepartmentResponse {
  success: boolean;
  errorMessage: string;
}

export interface UpdateDepartmentRequest {
  departmentId: number;
  code: string;
  name: string;
  description: string;
  isActive: boolean;
}

export interface UpdateDepartmentResponse {
  success: boolean;
  errorMessage: string;
}

export interface DeleteDepartmentRequest {
  departmentId: number;
}

export interface DeleteDepartmentResponse {
  success: boolean;
  errorMessage: string;
}

function createBaseGetDepartmentListRequest(): GetDepartmentListRequest {
  return {};
}

export const GetDepartmentListRequest = {
  encode(
    _: GetDepartmentListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetDepartmentListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDepartmentListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetDepartmentListRequest {
    return {};
  },

  toJSON(_: GetDepartmentListRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDepartmentListRequest>, I>>(
    base?: I,
  ): GetDepartmentListRequest {
    return GetDepartmentListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDepartmentListRequest>, I>>(
    _: I,
  ): GetDepartmentListRequest {
    const message = createBaseGetDepartmentListRequest();
    return message;
  },
};

function createBaseGetDepartmentListResponse(): GetDepartmentListResponse {
  return { success: false, errorMessage: '', departmentList: [] };
}

export const GetDepartmentListResponse = {
  encode(
    message: GetDepartmentListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.departmentList) {
      Department.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetDepartmentListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDepartmentListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.departmentList.push(
            Department.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDepartmentListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      departmentList: globalThis.Array.isArray(object?.departmentList)
        ? object.departmentList.map((e: any) => Department.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetDepartmentListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.departmentList?.length) {
      obj.departmentList = message.departmentList.map(e =>
        Department.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetDepartmentListResponse>, I>>(
    base?: I,
  ): GetDepartmentListResponse {
    return GetDepartmentListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetDepartmentListResponse>, I>>(
    object: I,
  ): GetDepartmentListResponse {
    const message = createBaseGetDepartmentListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.departmentList =
      object.departmentList?.map(e => Department.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateDepartmentRequest(): CreateDepartmentRequest {
  return { code: '', name: '', description: '', isActive: false };
}

export const CreateDepartmentRequest = {
  encode(
    message: CreateDepartmentRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.code !== '') {
      writer.uint32(10).string(message.code);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(26).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateDepartmentRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDepartmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDepartmentRequest {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: CreateDepartmentRequest): unknown {
    const obj: any = {};
    if (message.code !== '') {
      obj.code = message.code;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateDepartmentRequest>, I>>(
    base?: I,
  ): CreateDepartmentRequest {
    return CreateDepartmentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateDepartmentRequest>, I>>(
    object: I,
  ): CreateDepartmentRequest {
    const message = createBaseCreateDepartmentRequest();
    message.code = object.code ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseCreateDepartmentResponse(): CreateDepartmentResponse {
  return { success: false, errorMessage: '' };
}

export const CreateDepartmentResponse = {
  encode(
    message: CreateDepartmentResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateDepartmentResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDepartmentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateDepartmentResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: CreateDepartmentResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateDepartmentResponse>, I>>(
    base?: I,
  ): CreateDepartmentResponse {
    return CreateDepartmentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateDepartmentResponse>, I>>(
    object: I,
  ): CreateDepartmentResponse {
    const message = createBaseCreateDepartmentResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseUpdateDepartmentRequest(): UpdateDepartmentRequest {
  return {
    departmentId: 0,
    code: '',
    name: '',
    description: '',
    isActive: false,
  };
}

export const UpdateDepartmentRequest = {
  encode(
    message: UpdateDepartmentRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.departmentId !== 0) {
      writer.uint32(8).int32(message.departmentId);
    }
    if (message.code !== '') {
      writer.uint32(18).string(message.code);
    }
    if (message.name !== '') {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(34).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(40).bool(message.isActive);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateDepartmentRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDepartmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.departmentId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDepartmentRequest {
    return {
      departmentId: isSet(object.departmentId)
        ? globalThis.Number(object.departmentId)
        : 0,
      code: isSet(object.code) ? globalThis.String(object.code) : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: UpdateDepartmentRequest): unknown {
    const obj: any = {};
    if (message.departmentId !== 0) {
      obj.departmentId = Math.round(message.departmentId);
    }
    if (message.code !== '') {
      obj.code = message.code;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateDepartmentRequest>, I>>(
    base?: I,
  ): UpdateDepartmentRequest {
    return UpdateDepartmentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateDepartmentRequest>, I>>(
    object: I,
  ): UpdateDepartmentRequest {
    const message = createBaseUpdateDepartmentRequest();
    message.departmentId = object.departmentId ?? 0;
    message.code = object.code ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseUpdateDepartmentResponse(): UpdateDepartmentResponse {
  return { success: false, errorMessage: '' };
}

export const UpdateDepartmentResponse = {
  encode(
    message: UpdateDepartmentResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateDepartmentResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDepartmentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDepartmentResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: UpdateDepartmentResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateDepartmentResponse>, I>>(
    base?: I,
  ): UpdateDepartmentResponse {
    return UpdateDepartmentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateDepartmentResponse>, I>>(
    object: I,
  ): UpdateDepartmentResponse {
    const message = createBaseUpdateDepartmentResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseDeleteDepartmentRequest(): DeleteDepartmentRequest {
  return { departmentId: 0 };
}

export const DeleteDepartmentRequest = {
  encode(
    message: DeleteDepartmentRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.departmentId !== 0) {
      writer.uint32(8).int32(message.departmentId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteDepartmentRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDepartmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.departmentId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDepartmentRequest {
    return {
      departmentId: isSet(object.departmentId)
        ? globalThis.Number(object.departmentId)
        : 0,
    };
  },

  toJSON(message: DeleteDepartmentRequest): unknown {
    const obj: any = {};
    if (message.departmentId !== 0) {
      obj.departmentId = Math.round(message.departmentId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteDepartmentRequest>, I>>(
    base?: I,
  ): DeleteDepartmentRequest {
    return DeleteDepartmentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteDepartmentRequest>, I>>(
    object: I,
  ): DeleteDepartmentRequest {
    const message = createBaseDeleteDepartmentRequest();
    message.departmentId = object.departmentId ?? 0;
    return message;
  },
};

function createBaseDeleteDepartmentResponse(): DeleteDepartmentResponse {
  return { success: false, errorMessage: '' };
}

export const DeleteDepartmentResponse = {
  encode(
    message: DeleteDepartmentResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteDepartmentResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteDepartmentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteDepartmentResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: DeleteDepartmentResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteDepartmentResponse>, I>>(
    base?: I,
  ): DeleteDepartmentResponse {
    return DeleteDepartmentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteDepartmentResponse>, I>>(
    object: I,
  ): DeleteDepartmentResponse {
    const message = createBaseDeleteDepartmentResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

export type AdminDepartmentServiceService =
  typeof AdminDepartmentServiceService;
export const AdminDepartmentServiceService = {
  getDepartmentList: {
    path: '/admin.AdminDepartmentService/GetDepartmentList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetDepartmentListRequest) =>
      Buffer.from(GetDepartmentListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      GetDepartmentListRequest.decode(value),
    responseSerialize: (value: GetDepartmentListResponse) =>
      Buffer.from(GetDepartmentListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetDepartmentListResponse.decode(value),
  },
  createDepartment: {
    path: '/admin.AdminDepartmentService/CreateDepartment',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateDepartmentRequest) =>
      Buffer.from(CreateDepartmentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      CreateDepartmentRequest.decode(value),
    responseSerialize: (value: CreateDepartmentResponse) =>
      Buffer.from(CreateDepartmentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      CreateDepartmentResponse.decode(value),
  },
  updateDepartment: {
    path: '/admin.AdminDepartmentService/UpdateDepartment',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateDepartmentRequest) =>
      Buffer.from(UpdateDepartmentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      UpdateDepartmentRequest.decode(value),
    responseSerialize: (value: UpdateDepartmentResponse) =>
      Buffer.from(UpdateDepartmentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      UpdateDepartmentResponse.decode(value),
  },
  deleteDepartment: {
    path: '/admin.AdminDepartmentService/DeleteDepartment',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteDepartmentRequest) =>
      Buffer.from(DeleteDepartmentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      DeleteDepartmentRequest.decode(value),
    responseSerialize: (value: DeleteDepartmentResponse) =>
      Buffer.from(DeleteDepartmentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      DeleteDepartmentResponse.decode(value),
  },
} as const;

export interface AdminDepartmentServiceServer
  extends UntypedServiceImplementation {
  getDepartmentList: handleUnaryCall<
    GetDepartmentListRequest,
    GetDepartmentListResponse
  >;
  createDepartment: handleUnaryCall<
    CreateDepartmentRequest,
    CreateDepartmentResponse
  >;
  updateDepartment: handleUnaryCall<
    UpdateDepartmentRequest,
    UpdateDepartmentResponse
  >;
  deleteDepartment: handleUnaryCall<
    DeleteDepartmentRequest,
    DeleteDepartmentResponse
  >;
}

export interface AdminDepartmentServiceClient extends Client {
  getDepartmentList(
    request: GetDepartmentListRequest,
    callback: (
      error: ServiceError | null,
      response: GetDepartmentListResponse,
    ) => void,
  ): ClientUnaryCall;
  getDepartmentList(
    request: GetDepartmentListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetDepartmentListResponse,
    ) => void,
  ): ClientUnaryCall;
  getDepartmentList(
    request: GetDepartmentListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetDepartmentListResponse,
    ) => void,
  ): ClientUnaryCall;
  createDepartment(
    request: CreateDepartmentRequest,
    callback: (
      error: ServiceError | null,
      response: CreateDepartmentResponse,
    ) => void,
  ): ClientUnaryCall;
  createDepartment(
    request: CreateDepartmentRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: CreateDepartmentResponse,
    ) => void,
  ): ClientUnaryCall;
  createDepartment(
    request: CreateDepartmentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: CreateDepartmentResponse,
    ) => void,
  ): ClientUnaryCall;
  updateDepartment(
    request: UpdateDepartmentRequest,
    callback: (
      error: ServiceError | null,
      response: UpdateDepartmentResponse,
    ) => void,
  ): ClientUnaryCall;
  updateDepartment(
    request: UpdateDepartmentRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: UpdateDepartmentResponse,
    ) => void,
  ): ClientUnaryCall;
  updateDepartment(
    request: UpdateDepartmentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: UpdateDepartmentResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteDepartment(
    request: DeleteDepartmentRequest,
    callback: (
      error: ServiceError | null,
      response: DeleteDepartmentResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteDepartment(
    request: DeleteDepartmentRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: DeleteDepartmentResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteDepartment(
    request: DeleteDepartmentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: DeleteDepartmentResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const AdminDepartmentServiceClient = makeGenericClientConstructor(
  AdminDepartmentServiceService,
  'admin.AdminDepartmentService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): AdminDepartmentServiceClient;
  service: typeof AdminDepartmentServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
