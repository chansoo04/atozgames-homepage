// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: groupPermission.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';
import {
  GroupPermission,
  MenuListOnGroupPermission,
  User,
} from './admin-common';

export const protobufPackage = 'admin';

export interface GetGroupPermissionListRequest {
  page: number;
  countPerPage: number;
}

export interface GetGroupPermissionListResponse {
  success: boolean;
  errorMessage: string;
  groupPermissionList: GroupPermission[];
}

export interface GetGroupPermissionInfoRequest {
  permissionCode: string;
}

export interface GetGroupPermissionInfoResponse {
  success: boolean;
  errorMessage: string;
  groupPermission?: GroupPermission | undefined;
}

export interface CreateGroupPermissionRequest {
  permissionCode: string;
  name: string;
  description: string;
  isActive: boolean;
}

export interface CreateGroupPermissionResponse {
  success: boolean;
  errorMessage: string;
}

export interface UpdateGroupPermissionRequest {
  permissionCode: string;
  name: string;
  description: string;
  isActive: boolean;
}

export interface UpdateGroupPermissionResponse {
  success: boolean;
  errorMessage: string;
}

export interface DeleteGroupPermissionRequest {
  permissionCode: string;
}

export interface DeleteGroupPermissionResponse {
  success: boolean;
  errorMessage: string;
}

/** 그룹 권한에 메뉴들 설정 요청 */
export interface SetMenuListOnGroupPermissionRequest {
  permissionCode: string;
  menuIdList: string;
  menuActionIdList: string;
}

/** 그룹 권한에 메뉴들 설정 응답 */
export interface SetMenuListOnGroupPermissionResponse {
  success: boolean;
  errorMessage: string;
}

/** 그룹 권한에 설정된 메뉴들 조회 요청 */
export interface GetMenuListOnGroupPermissionRequest {
  page: number;
  countPerPage: number;
  permissionCode: string;
}

/** 그룹 권한에 설정된 메뉴들 조회 응답 */
export interface GetMenuListOnGroupPermissionResponse {
  success: boolean;
  errorMessage: string;
  groupPermissionMenuList: MenuListOnGroupPermission[];
}

/** 사용자에게 그룹 권한 설정 요청 */
export interface SetGroupPermissionsOnUserRequest {
  userId: string;
  permissionCodeList: string;
}

/** 사용자에게 그룹 권한 설정 응답 */
export interface SetGroupPermissionsOnUserResponse {
  success: boolean;
  errorMessage: string;
}

/** 그룹 권한에 사용자들 설정 요청 */
export interface SetUserListOnGroupPermissionRequest {
  permissionCode: string;
  userIdList: string;
}

/** 그룹 권한에 사용자들 설정 응답 */
export interface SetUserListOnGroupPermissionResponse {
  success: boolean;
  errorMessage: string;
}

/** 사용자들에게 그룹 권한 추가 요청 */
export interface InsertGroupPermissionToUserListRequest {
  userIdList: string;
  permissionCode: string;
}

/** 사용자들에게 그룹 권한 추가 응답 */
export interface InsertGroupPermissionToUserListResponse {
  success: boolean;
  errorMessage: string;
}

/** 사용자들에게 설정된 그룹 권한 삭제 요청 */
export interface DeleteGroupPermissionOfUserListRequest {
  userIdList: string;
  permissionCode: string;
}

/** 사용자들에게 설정된 그룹 권한 삭제 응답 */
export interface DeleteGroupPermissionOfUserListResponse {
  success: boolean;
  errorMessage: string;
}

/** 사용자에게 설정된 그룹 권한 조회 요청 */
export interface GetGroupPermissionListOnUserRequest {
  page: number;
  countPerPage: number;
  userId: string;
}

/** 사용자에게 설정된 그룹 권한 조회 응답 */
export interface GetGroupPermissionListOnUserResponse {
  success: boolean;
  errorMessage: string;
  groupPermissionList: GroupPermission[];
}

/** 그룹 권한을 가진 사용자 조회 요청 */
export interface GetUserListWithGroupPermissionRequest {
  page: number;
  countPerPage: number;
  permissionCode: string;
}

/** 그룹 권한을 가진 사용자 조회 응답 */
export interface GetUserListWithGroupPermissionResponse {
  success: boolean;
  errorMessage: string;
  userList: User[];
}

/** 사용자 권한을 가진 사용자 조회 요청 */
export interface GetUserListWithUserPermissionRequest {
  page: number;
  countPerPage: number;
}

/** 사용자 권한을 가진 사용자 조회 응답 */
export interface GetUserListWithUserPermissionResponse {
  success: boolean;
  errorMessage: string;
  userList: User[];
}

/** 사용자에게 메뉴 권한 설정 요청 */
export interface SetUserPermissionListOnUserRequest {
  userId: string;
  menuIdList: string;
  menuActionIdList: string;
}

/** 사용자에게 메뉴 권한 설정 응답 */
export interface SetUserPermissionListOnUserResponse {
  success: boolean;
  errorMessage: string;
}

/** 메뉴 권한이 없는 사용자 조회 요청 */
export interface GetUserListWithoutMenuPermissionRequest {
  page: number;
  countPerPage: number;
}

/** 메뉴 권한이 없는 사용자 조회 응답 */
export interface GetUserListWithoutMenuPermissionResponse {
  success: boolean;
  errorMessage: string;
  userList: User[];
}

function createBaseGetGroupPermissionListRequest(): GetGroupPermissionListRequest {
  return { page: 0, countPerPage: 0 };
}

export const GetGroupPermissionListRequest = {
  encode(
    message: GetGroupPermissionListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.countPerPage !== 0) {
      writer.uint32(16).int32(message.countPerPage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetGroupPermissionListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGroupPermissionListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.countPerPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGroupPermissionListRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      countPerPage: isSet(object.countPerPage)
        ? globalThis.Number(object.countPerPage)
        : 0,
    };
  },

  toJSON(message: GetGroupPermissionListRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.countPerPage !== 0) {
      obj.countPerPage = Math.round(message.countPerPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetGroupPermissionListRequest>, I>>(
    base?: I,
  ): GetGroupPermissionListRequest {
    return GetGroupPermissionListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetGroupPermissionListRequest>, I>>(
    object: I,
  ): GetGroupPermissionListRequest {
    const message = createBaseGetGroupPermissionListRequest();
    message.page = object.page ?? 0;
    message.countPerPage = object.countPerPage ?? 0;
    return message;
  },
};

function createBaseGetGroupPermissionListResponse(): GetGroupPermissionListResponse {
  return { success: false, errorMessage: '', groupPermissionList: [] };
}

export const GetGroupPermissionListResponse = {
  encode(
    message: GetGroupPermissionListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.groupPermissionList) {
      GroupPermission.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetGroupPermissionListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGroupPermissionListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.groupPermissionList.push(
            GroupPermission.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGroupPermissionListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      groupPermissionList: globalThis.Array.isArray(object?.groupPermissionList)
        ? object.groupPermissionList.map((e: any) =>
            GroupPermission.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: GetGroupPermissionListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.groupPermissionList?.length) {
      obj.groupPermissionList = message.groupPermissionList.map(e =>
        GroupPermission.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetGroupPermissionListResponse>, I>>(
    base?: I,
  ): GetGroupPermissionListResponse {
    return GetGroupPermissionListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetGroupPermissionListResponse>, I>>(
    object: I,
  ): GetGroupPermissionListResponse {
    const message = createBaseGetGroupPermissionListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.groupPermissionList =
      object.groupPermissionList?.map(e => GroupPermission.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseGetGroupPermissionInfoRequest(): GetGroupPermissionInfoRequest {
  return { permissionCode: '' };
}

export const GetGroupPermissionInfoRequest = {
  encode(
    message: GetGroupPermissionInfoRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.permissionCode !== '') {
      writer.uint32(10).string(message.permissionCode);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetGroupPermissionInfoRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGroupPermissionInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissionCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGroupPermissionInfoRequest {
    return {
      permissionCode: isSet(object.permissionCode)
        ? globalThis.String(object.permissionCode)
        : '',
    };
  },

  toJSON(message: GetGroupPermissionInfoRequest): unknown {
    const obj: any = {};
    if (message.permissionCode !== '') {
      obj.permissionCode = message.permissionCode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetGroupPermissionInfoRequest>, I>>(
    base?: I,
  ): GetGroupPermissionInfoRequest {
    return GetGroupPermissionInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetGroupPermissionInfoRequest>, I>>(
    object: I,
  ): GetGroupPermissionInfoRequest {
    const message = createBaseGetGroupPermissionInfoRequest();
    message.permissionCode = object.permissionCode ?? '';
    return message;
  },
};

function createBaseGetGroupPermissionInfoResponse(): GetGroupPermissionInfoResponse {
  return { success: false, errorMessage: '', groupPermission: undefined };
}

export const GetGroupPermissionInfoResponse = {
  encode(
    message: GetGroupPermissionInfoResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.groupPermission !== undefined) {
      GroupPermission.encode(
        message.groupPermission,
        writer.uint32(26).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetGroupPermissionInfoResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGroupPermissionInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.groupPermission = GroupPermission.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGroupPermissionInfoResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      groupPermission: isSet(object.groupPermission)
        ? GroupPermission.fromJSON(object.groupPermission)
        : undefined,
    };
  },

  toJSON(message: GetGroupPermissionInfoResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.groupPermission !== undefined) {
      obj.groupPermission = GroupPermission.toJSON(message.groupPermission);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetGroupPermissionInfoResponse>, I>>(
    base?: I,
  ): GetGroupPermissionInfoResponse {
    return GetGroupPermissionInfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetGroupPermissionInfoResponse>, I>>(
    object: I,
  ): GetGroupPermissionInfoResponse {
    const message = createBaseGetGroupPermissionInfoResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.groupPermission =
      object.groupPermission !== undefined && object.groupPermission !== null
        ? GroupPermission.fromPartial(object.groupPermission)
        : undefined;
    return message;
  },
};

function createBaseCreateGroupPermissionRequest(): CreateGroupPermissionRequest {
  return { permissionCode: '', name: '', description: '', isActive: false };
}

export const CreateGroupPermissionRequest = {
  encode(
    message: CreateGroupPermissionRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.permissionCode !== '') {
      writer.uint32(10).string(message.permissionCode);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(26).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateGroupPermissionRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateGroupPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissionCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateGroupPermissionRequest {
    return {
      permissionCode: isSet(object.permissionCode)
        ? globalThis.String(object.permissionCode)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: CreateGroupPermissionRequest): unknown {
    const obj: any = {};
    if (message.permissionCode !== '') {
      obj.permissionCode = message.permissionCode;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateGroupPermissionRequest>, I>>(
    base?: I,
  ): CreateGroupPermissionRequest {
    return CreateGroupPermissionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateGroupPermissionRequest>, I>>(
    object: I,
  ): CreateGroupPermissionRequest {
    const message = createBaseCreateGroupPermissionRequest();
    message.permissionCode = object.permissionCode ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseCreateGroupPermissionResponse(): CreateGroupPermissionResponse {
  return { success: false, errorMessage: '' };
}

export const CreateGroupPermissionResponse = {
  encode(
    message: CreateGroupPermissionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateGroupPermissionResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateGroupPermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateGroupPermissionResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: CreateGroupPermissionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateGroupPermissionResponse>, I>>(
    base?: I,
  ): CreateGroupPermissionResponse {
    return CreateGroupPermissionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateGroupPermissionResponse>, I>>(
    object: I,
  ): CreateGroupPermissionResponse {
    const message = createBaseCreateGroupPermissionResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseUpdateGroupPermissionRequest(): UpdateGroupPermissionRequest {
  return { permissionCode: '', name: '', description: '', isActive: false };
}

export const UpdateGroupPermissionRequest = {
  encode(
    message: UpdateGroupPermissionRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.permissionCode !== '') {
      writer.uint32(10).string(message.permissionCode);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(26).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateGroupPermissionRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGroupPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissionCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGroupPermissionRequest {
    return {
      permissionCode: isSet(object.permissionCode)
        ? globalThis.String(object.permissionCode)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: UpdateGroupPermissionRequest): unknown {
    const obj: any = {};
    if (message.permissionCode !== '') {
      obj.permissionCode = message.permissionCode;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGroupPermissionRequest>, I>>(
    base?: I,
  ): UpdateGroupPermissionRequest {
    return UpdateGroupPermissionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGroupPermissionRequest>, I>>(
    object: I,
  ): UpdateGroupPermissionRequest {
    const message = createBaseUpdateGroupPermissionRequest();
    message.permissionCode = object.permissionCode ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseUpdateGroupPermissionResponse(): UpdateGroupPermissionResponse {
  return { success: false, errorMessage: '' };
}

export const UpdateGroupPermissionResponse = {
  encode(
    message: UpdateGroupPermissionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateGroupPermissionResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGroupPermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateGroupPermissionResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: UpdateGroupPermissionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateGroupPermissionResponse>, I>>(
    base?: I,
  ): UpdateGroupPermissionResponse {
    return UpdateGroupPermissionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateGroupPermissionResponse>, I>>(
    object: I,
  ): UpdateGroupPermissionResponse {
    const message = createBaseUpdateGroupPermissionResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseDeleteGroupPermissionRequest(): DeleteGroupPermissionRequest {
  return { permissionCode: '' };
}

export const DeleteGroupPermissionRequest = {
  encode(
    message: DeleteGroupPermissionRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.permissionCode !== '') {
      writer.uint32(10).string(message.permissionCode);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteGroupPermissionRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGroupPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissionCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteGroupPermissionRequest {
    return {
      permissionCode: isSet(object.permissionCode)
        ? globalThis.String(object.permissionCode)
        : '',
    };
  },

  toJSON(message: DeleteGroupPermissionRequest): unknown {
    const obj: any = {};
    if (message.permissionCode !== '') {
      obj.permissionCode = message.permissionCode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteGroupPermissionRequest>, I>>(
    base?: I,
  ): DeleteGroupPermissionRequest {
    return DeleteGroupPermissionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteGroupPermissionRequest>, I>>(
    object: I,
  ): DeleteGroupPermissionRequest {
    const message = createBaseDeleteGroupPermissionRequest();
    message.permissionCode = object.permissionCode ?? '';
    return message;
  },
};

function createBaseDeleteGroupPermissionResponse(): DeleteGroupPermissionResponse {
  return { success: false, errorMessage: '' };
}

export const DeleteGroupPermissionResponse = {
  encode(
    message: DeleteGroupPermissionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteGroupPermissionResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGroupPermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteGroupPermissionResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: DeleteGroupPermissionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteGroupPermissionResponse>, I>>(
    base?: I,
  ): DeleteGroupPermissionResponse {
    return DeleteGroupPermissionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteGroupPermissionResponse>, I>>(
    object: I,
  ): DeleteGroupPermissionResponse {
    const message = createBaseDeleteGroupPermissionResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseSetMenuListOnGroupPermissionRequest(): SetMenuListOnGroupPermissionRequest {
  return { permissionCode: '', menuIdList: '', menuActionIdList: '' };
}

export const SetMenuListOnGroupPermissionRequest = {
  encode(
    message: SetMenuListOnGroupPermissionRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.permissionCode !== '') {
      writer.uint32(10).string(message.permissionCode);
    }
    if (message.menuIdList !== '') {
      writer.uint32(18).string(message.menuIdList);
    }
    if (message.menuActionIdList !== '') {
      writer.uint32(26).string(message.menuActionIdList);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): SetMenuListOnGroupPermissionRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetMenuListOnGroupPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissionCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.menuIdList = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.menuActionIdList = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetMenuListOnGroupPermissionRequest {
    return {
      permissionCode: isSet(object.permissionCode)
        ? globalThis.String(object.permissionCode)
        : '',
      menuIdList: isSet(object.menuIdList)
        ? globalThis.String(object.menuIdList)
        : '',
      menuActionIdList: isSet(object.menuActionIdList)
        ? globalThis.String(object.menuActionIdList)
        : '',
    };
  },

  toJSON(message: SetMenuListOnGroupPermissionRequest): unknown {
    const obj: any = {};
    if (message.permissionCode !== '') {
      obj.permissionCode = message.permissionCode;
    }
    if (message.menuIdList !== '') {
      obj.menuIdList = message.menuIdList;
    }
    if (message.menuActionIdList !== '') {
      obj.menuActionIdList = message.menuActionIdList;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetMenuListOnGroupPermissionRequest>, I>>(
    base?: I,
  ): SetMenuListOnGroupPermissionRequest {
    return SetMenuListOnGroupPermissionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<SetMenuListOnGroupPermissionRequest>, I>,
  >(object: I): SetMenuListOnGroupPermissionRequest {
    const message = createBaseSetMenuListOnGroupPermissionRequest();
    message.permissionCode = object.permissionCode ?? '';
    message.menuIdList = object.menuIdList ?? '';
    message.menuActionIdList = object.menuActionIdList ?? '';
    return message;
  },
};

function createBaseSetMenuListOnGroupPermissionResponse(): SetMenuListOnGroupPermissionResponse {
  return { success: false, errorMessage: '' };
}

export const SetMenuListOnGroupPermissionResponse = {
  encode(
    message: SetMenuListOnGroupPermissionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): SetMenuListOnGroupPermissionResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetMenuListOnGroupPermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetMenuListOnGroupPermissionResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: SetMenuListOnGroupPermissionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetMenuListOnGroupPermissionResponse>, I>>(
    base?: I,
  ): SetMenuListOnGroupPermissionResponse {
    return SetMenuListOnGroupPermissionResponse.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<SetMenuListOnGroupPermissionResponse>, I>,
  >(object: I): SetMenuListOnGroupPermissionResponse {
    const message = createBaseSetMenuListOnGroupPermissionResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseGetMenuListOnGroupPermissionRequest(): GetMenuListOnGroupPermissionRequest {
  return { page: 0, countPerPage: 0, permissionCode: '' };
}

export const GetMenuListOnGroupPermissionRequest = {
  encode(
    message: GetMenuListOnGroupPermissionRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.countPerPage !== 0) {
      writer.uint32(16).int32(message.countPerPage);
    }
    if (message.permissionCode !== '') {
      writer.uint32(26).string(message.permissionCode);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetMenuListOnGroupPermissionRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMenuListOnGroupPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.countPerPage = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.permissionCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMenuListOnGroupPermissionRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      countPerPage: isSet(object.countPerPage)
        ? globalThis.Number(object.countPerPage)
        : 0,
      permissionCode: isSet(object.permissionCode)
        ? globalThis.String(object.permissionCode)
        : '',
    };
  },

  toJSON(message: GetMenuListOnGroupPermissionRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.countPerPage !== 0) {
      obj.countPerPage = Math.round(message.countPerPage);
    }
    if (message.permissionCode !== '') {
      obj.permissionCode = message.permissionCode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMenuListOnGroupPermissionRequest>, I>>(
    base?: I,
  ): GetMenuListOnGroupPermissionRequest {
    return GetMenuListOnGroupPermissionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<GetMenuListOnGroupPermissionRequest>, I>,
  >(object: I): GetMenuListOnGroupPermissionRequest {
    const message = createBaseGetMenuListOnGroupPermissionRequest();
    message.page = object.page ?? 0;
    message.countPerPage = object.countPerPage ?? 0;
    message.permissionCode = object.permissionCode ?? '';
    return message;
  },
};

function createBaseGetMenuListOnGroupPermissionResponse(): GetMenuListOnGroupPermissionResponse {
  return { success: false, errorMessage: '', groupPermissionMenuList: [] };
}

export const GetMenuListOnGroupPermissionResponse = {
  encode(
    message: GetMenuListOnGroupPermissionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.groupPermissionMenuList) {
      MenuListOnGroupPermission.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetMenuListOnGroupPermissionResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMenuListOnGroupPermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.groupPermissionMenuList.push(
            MenuListOnGroupPermission.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMenuListOnGroupPermissionResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      groupPermissionMenuList: globalThis.Array.isArray(
        object?.groupPermissionMenuList,
      )
        ? object.groupPermissionMenuList.map((e: any) =>
            MenuListOnGroupPermission.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: GetMenuListOnGroupPermissionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.groupPermissionMenuList?.length) {
      obj.groupPermissionMenuList = message.groupPermissionMenuList.map(e =>
        MenuListOnGroupPermission.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMenuListOnGroupPermissionResponse>, I>>(
    base?: I,
  ): GetMenuListOnGroupPermissionResponse {
    return GetMenuListOnGroupPermissionResponse.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<GetMenuListOnGroupPermissionResponse>, I>,
  >(object: I): GetMenuListOnGroupPermissionResponse {
    const message = createBaseGetMenuListOnGroupPermissionResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.groupPermissionMenuList =
      object.groupPermissionMenuList?.map(e =>
        MenuListOnGroupPermission.fromPartial(e),
      ) || [];
    return message;
  },
};

function createBaseSetGroupPermissionsOnUserRequest(): SetGroupPermissionsOnUserRequest {
  return { userId: '', permissionCodeList: '' };
}

export const SetGroupPermissionsOnUserRequest = {
  encode(
    message: SetGroupPermissionsOnUserRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userId !== '') {
      writer.uint32(10).string(message.userId);
    }
    if (message.permissionCodeList !== '') {
      writer.uint32(18).string(message.permissionCodeList);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): SetGroupPermissionsOnUserRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetGroupPermissionsOnUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.permissionCodeList = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetGroupPermissionsOnUserRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : '',
      permissionCodeList: isSet(object.permissionCodeList)
        ? globalThis.String(object.permissionCodeList)
        : '',
    };
  },

  toJSON(message: SetGroupPermissionsOnUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== '') {
      obj.userId = message.userId;
    }
    if (message.permissionCodeList !== '') {
      obj.permissionCodeList = message.permissionCodeList;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetGroupPermissionsOnUserRequest>, I>>(
    base?: I,
  ): SetGroupPermissionsOnUserRequest {
    return SetGroupPermissionsOnUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<SetGroupPermissionsOnUserRequest>, I>,
  >(object: I): SetGroupPermissionsOnUserRequest {
    const message = createBaseSetGroupPermissionsOnUserRequest();
    message.userId = object.userId ?? '';
    message.permissionCodeList = object.permissionCodeList ?? '';
    return message;
  },
};

function createBaseSetGroupPermissionsOnUserResponse(): SetGroupPermissionsOnUserResponse {
  return { success: false, errorMessage: '' };
}

export const SetGroupPermissionsOnUserResponse = {
  encode(
    message: SetGroupPermissionsOnUserResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): SetGroupPermissionsOnUserResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetGroupPermissionsOnUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetGroupPermissionsOnUserResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: SetGroupPermissionsOnUserResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetGroupPermissionsOnUserResponse>, I>>(
    base?: I,
  ): SetGroupPermissionsOnUserResponse {
    return SetGroupPermissionsOnUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<SetGroupPermissionsOnUserResponse>, I>,
  >(object: I): SetGroupPermissionsOnUserResponse {
    const message = createBaseSetGroupPermissionsOnUserResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseSetUserListOnGroupPermissionRequest(): SetUserListOnGroupPermissionRequest {
  return { permissionCode: '', userIdList: '' };
}

export const SetUserListOnGroupPermissionRequest = {
  encode(
    message: SetUserListOnGroupPermissionRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.permissionCode !== '') {
      writer.uint32(10).string(message.permissionCode);
    }
    if (message.userIdList !== '') {
      writer.uint32(18).string(message.userIdList);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): SetUserListOnGroupPermissionRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUserListOnGroupPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.permissionCode = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userIdList = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUserListOnGroupPermissionRequest {
    return {
      permissionCode: isSet(object.permissionCode)
        ? globalThis.String(object.permissionCode)
        : '',
      userIdList: isSet(object.userIdList)
        ? globalThis.String(object.userIdList)
        : '',
    };
  },

  toJSON(message: SetUserListOnGroupPermissionRequest): unknown {
    const obj: any = {};
    if (message.permissionCode !== '') {
      obj.permissionCode = message.permissionCode;
    }
    if (message.userIdList !== '') {
      obj.userIdList = message.userIdList;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetUserListOnGroupPermissionRequest>, I>>(
    base?: I,
  ): SetUserListOnGroupPermissionRequest {
    return SetUserListOnGroupPermissionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<SetUserListOnGroupPermissionRequest>, I>,
  >(object: I): SetUserListOnGroupPermissionRequest {
    const message = createBaseSetUserListOnGroupPermissionRequest();
    message.permissionCode = object.permissionCode ?? '';
    message.userIdList = object.userIdList ?? '';
    return message;
  },
};

function createBaseSetUserListOnGroupPermissionResponse(): SetUserListOnGroupPermissionResponse {
  return { success: false, errorMessage: '' };
}

export const SetUserListOnGroupPermissionResponse = {
  encode(
    message: SetUserListOnGroupPermissionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): SetUserListOnGroupPermissionResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUserListOnGroupPermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUserListOnGroupPermissionResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: SetUserListOnGroupPermissionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetUserListOnGroupPermissionResponse>, I>>(
    base?: I,
  ): SetUserListOnGroupPermissionResponse {
    return SetUserListOnGroupPermissionResponse.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<SetUserListOnGroupPermissionResponse>, I>,
  >(object: I): SetUserListOnGroupPermissionResponse {
    const message = createBaseSetUserListOnGroupPermissionResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseInsertGroupPermissionToUserListRequest(): InsertGroupPermissionToUserListRequest {
  return { userIdList: '', permissionCode: '' };
}

export const InsertGroupPermissionToUserListRequest = {
  encode(
    message: InsertGroupPermissionToUserListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userIdList !== '') {
      writer.uint32(10).string(message.userIdList);
    }
    if (message.permissionCode !== '') {
      writer.uint32(18).string(message.permissionCode);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): InsertGroupPermissionToUserListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsertGroupPermissionToUserListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userIdList = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.permissionCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsertGroupPermissionToUserListRequest {
    return {
      userIdList: isSet(object.userIdList)
        ? globalThis.String(object.userIdList)
        : '',
      permissionCode: isSet(object.permissionCode)
        ? globalThis.String(object.permissionCode)
        : '',
    };
  },

  toJSON(message: InsertGroupPermissionToUserListRequest): unknown {
    const obj: any = {};
    if (message.userIdList !== '') {
      obj.userIdList = message.userIdList;
    }
    if (message.permissionCode !== '') {
      obj.permissionCode = message.permissionCode;
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<InsertGroupPermissionToUserListRequest>, I>,
  >(base?: I): InsertGroupPermissionToUserListRequest {
    return InsertGroupPermissionToUserListRequest.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<InsertGroupPermissionToUserListRequest>, I>,
  >(object: I): InsertGroupPermissionToUserListRequest {
    const message = createBaseInsertGroupPermissionToUserListRequest();
    message.userIdList = object.userIdList ?? '';
    message.permissionCode = object.permissionCode ?? '';
    return message;
  },
};

function createBaseInsertGroupPermissionToUserListResponse(): InsertGroupPermissionToUserListResponse {
  return { success: false, errorMessage: '' };
}

export const InsertGroupPermissionToUserListResponse = {
  encode(
    message: InsertGroupPermissionToUserListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): InsertGroupPermissionToUserListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInsertGroupPermissionToUserListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InsertGroupPermissionToUserListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: InsertGroupPermissionToUserListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<InsertGroupPermissionToUserListResponse>, I>,
  >(base?: I): InsertGroupPermissionToUserListResponse {
    return InsertGroupPermissionToUserListResponse.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<InsertGroupPermissionToUserListResponse>, I>,
  >(object: I): InsertGroupPermissionToUserListResponse {
    const message = createBaseInsertGroupPermissionToUserListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseDeleteGroupPermissionOfUserListRequest(): DeleteGroupPermissionOfUserListRequest {
  return { userIdList: '', permissionCode: '' };
}

export const DeleteGroupPermissionOfUserListRequest = {
  encode(
    message: DeleteGroupPermissionOfUserListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userIdList !== '') {
      writer.uint32(10).string(message.userIdList);
    }
    if (message.permissionCode !== '') {
      writer.uint32(18).string(message.permissionCode);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteGroupPermissionOfUserListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGroupPermissionOfUserListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userIdList = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.permissionCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteGroupPermissionOfUserListRequest {
    return {
      userIdList: isSet(object.userIdList)
        ? globalThis.String(object.userIdList)
        : '',
      permissionCode: isSet(object.permissionCode)
        ? globalThis.String(object.permissionCode)
        : '',
    };
  },

  toJSON(message: DeleteGroupPermissionOfUserListRequest): unknown {
    const obj: any = {};
    if (message.userIdList !== '') {
      obj.userIdList = message.userIdList;
    }
    if (message.permissionCode !== '') {
      obj.permissionCode = message.permissionCode;
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<DeleteGroupPermissionOfUserListRequest>, I>,
  >(base?: I): DeleteGroupPermissionOfUserListRequest {
    return DeleteGroupPermissionOfUserListRequest.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<DeleteGroupPermissionOfUserListRequest>, I>,
  >(object: I): DeleteGroupPermissionOfUserListRequest {
    const message = createBaseDeleteGroupPermissionOfUserListRequest();
    message.userIdList = object.userIdList ?? '';
    message.permissionCode = object.permissionCode ?? '';
    return message;
  },
};

function createBaseDeleteGroupPermissionOfUserListResponse(): DeleteGroupPermissionOfUserListResponse {
  return { success: false, errorMessage: '' };
}

export const DeleteGroupPermissionOfUserListResponse = {
  encode(
    message: DeleteGroupPermissionOfUserListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteGroupPermissionOfUserListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteGroupPermissionOfUserListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteGroupPermissionOfUserListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: DeleteGroupPermissionOfUserListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<DeleteGroupPermissionOfUserListResponse>, I>,
  >(base?: I): DeleteGroupPermissionOfUserListResponse {
    return DeleteGroupPermissionOfUserListResponse.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<DeleteGroupPermissionOfUserListResponse>, I>,
  >(object: I): DeleteGroupPermissionOfUserListResponse {
    const message = createBaseDeleteGroupPermissionOfUserListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseGetGroupPermissionListOnUserRequest(): GetGroupPermissionListOnUserRequest {
  return { page: 0, countPerPage: 0, userId: '' };
}

export const GetGroupPermissionListOnUserRequest = {
  encode(
    message: GetGroupPermissionListOnUserRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.countPerPage !== 0) {
      writer.uint32(16).int32(message.countPerPage);
    }
    if (message.userId !== '') {
      writer.uint32(26).string(message.userId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetGroupPermissionListOnUserRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGroupPermissionListOnUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.countPerPage = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGroupPermissionListOnUserRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      countPerPage: isSet(object.countPerPage)
        ? globalThis.Number(object.countPerPage)
        : 0,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : '',
    };
  },

  toJSON(message: GetGroupPermissionListOnUserRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.countPerPage !== 0) {
      obj.countPerPage = Math.round(message.countPerPage);
    }
    if (message.userId !== '') {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetGroupPermissionListOnUserRequest>, I>>(
    base?: I,
  ): GetGroupPermissionListOnUserRequest {
    return GetGroupPermissionListOnUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<GetGroupPermissionListOnUserRequest>, I>,
  >(object: I): GetGroupPermissionListOnUserRequest {
    const message = createBaseGetGroupPermissionListOnUserRequest();
    message.page = object.page ?? 0;
    message.countPerPage = object.countPerPage ?? 0;
    message.userId = object.userId ?? '';
    return message;
  },
};

function createBaseGetGroupPermissionListOnUserResponse(): GetGroupPermissionListOnUserResponse {
  return { success: false, errorMessage: '', groupPermissionList: [] };
}

export const GetGroupPermissionListOnUserResponse = {
  encode(
    message: GetGroupPermissionListOnUserResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.groupPermissionList) {
      GroupPermission.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetGroupPermissionListOnUserResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGroupPermissionListOnUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.groupPermissionList.push(
            GroupPermission.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGroupPermissionListOnUserResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      groupPermissionList: globalThis.Array.isArray(object?.groupPermissionList)
        ? object.groupPermissionList.map((e: any) =>
            GroupPermission.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: GetGroupPermissionListOnUserResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.groupPermissionList?.length) {
      obj.groupPermissionList = message.groupPermissionList.map(e =>
        GroupPermission.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetGroupPermissionListOnUserResponse>, I>>(
    base?: I,
  ): GetGroupPermissionListOnUserResponse {
    return GetGroupPermissionListOnUserResponse.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<GetGroupPermissionListOnUserResponse>, I>,
  >(object: I): GetGroupPermissionListOnUserResponse {
    const message = createBaseGetGroupPermissionListOnUserResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.groupPermissionList =
      object.groupPermissionList?.map(e => GroupPermission.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseGetUserListWithGroupPermissionRequest(): GetUserListWithGroupPermissionRequest {
  return { page: 0, countPerPage: 0, permissionCode: '' };
}

export const GetUserListWithGroupPermissionRequest = {
  encode(
    message: GetUserListWithGroupPermissionRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.countPerPage !== 0) {
      writer.uint32(16).int32(message.countPerPage);
    }
    if (message.permissionCode !== '') {
      writer.uint32(26).string(message.permissionCode);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetUserListWithGroupPermissionRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserListWithGroupPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.countPerPage = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.permissionCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserListWithGroupPermissionRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      countPerPage: isSet(object.countPerPage)
        ? globalThis.Number(object.countPerPage)
        : 0,
      permissionCode: isSet(object.permissionCode)
        ? globalThis.String(object.permissionCode)
        : '',
    };
  },

  toJSON(message: GetUserListWithGroupPermissionRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.countPerPage !== 0) {
      obj.countPerPage = Math.round(message.countPerPage);
    }
    if (message.permissionCode !== '') {
      obj.permissionCode = message.permissionCode;
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<GetUserListWithGroupPermissionRequest>, I>,
  >(base?: I): GetUserListWithGroupPermissionRequest {
    return GetUserListWithGroupPermissionRequest.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<GetUserListWithGroupPermissionRequest>, I>,
  >(object: I): GetUserListWithGroupPermissionRequest {
    const message = createBaseGetUserListWithGroupPermissionRequest();
    message.page = object.page ?? 0;
    message.countPerPage = object.countPerPage ?? 0;
    message.permissionCode = object.permissionCode ?? '';
    return message;
  },
};

function createBaseGetUserListWithGroupPermissionResponse(): GetUserListWithGroupPermissionResponse {
  return { success: false, errorMessage: '', userList: [] };
}

export const GetUserListWithGroupPermissionResponse = {
  encode(
    message: GetUserListWithGroupPermissionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.userList) {
      User.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetUserListWithGroupPermissionResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserListWithGroupPermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userList.push(User.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserListWithGroupPermissionResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      userList: globalThis.Array.isArray(object?.userList)
        ? object.userList.map((e: any) => User.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetUserListWithGroupPermissionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.userList?.length) {
      obj.userList = message.userList.map(e => User.toJSON(e));
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<GetUserListWithGroupPermissionResponse>, I>,
  >(base?: I): GetUserListWithGroupPermissionResponse {
    return GetUserListWithGroupPermissionResponse.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<GetUserListWithGroupPermissionResponse>, I>,
  >(object: I): GetUserListWithGroupPermissionResponse {
    const message = createBaseGetUserListWithGroupPermissionResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.userList = object.userList?.map(e => User.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetUserListWithUserPermissionRequest(): GetUserListWithUserPermissionRequest {
  return { page: 0, countPerPage: 0 };
}

export const GetUserListWithUserPermissionRequest = {
  encode(
    message: GetUserListWithUserPermissionRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.countPerPage !== 0) {
      writer.uint32(16).int32(message.countPerPage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetUserListWithUserPermissionRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserListWithUserPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.countPerPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserListWithUserPermissionRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      countPerPage: isSet(object.countPerPage)
        ? globalThis.Number(object.countPerPage)
        : 0,
    };
  },

  toJSON(message: GetUserListWithUserPermissionRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.countPerPage !== 0) {
      obj.countPerPage = Math.round(message.countPerPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserListWithUserPermissionRequest>, I>>(
    base?: I,
  ): GetUserListWithUserPermissionRequest {
    return GetUserListWithUserPermissionRequest.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<GetUserListWithUserPermissionRequest>, I>,
  >(object: I): GetUserListWithUserPermissionRequest {
    const message = createBaseGetUserListWithUserPermissionRequest();
    message.page = object.page ?? 0;
    message.countPerPage = object.countPerPage ?? 0;
    return message;
  },
};

function createBaseGetUserListWithUserPermissionResponse(): GetUserListWithUserPermissionResponse {
  return { success: false, errorMessage: '', userList: [] };
}

export const GetUserListWithUserPermissionResponse = {
  encode(
    message: GetUserListWithUserPermissionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.userList) {
      User.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetUserListWithUserPermissionResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserListWithUserPermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userList.push(User.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserListWithUserPermissionResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      userList: globalThis.Array.isArray(object?.userList)
        ? object.userList.map((e: any) => User.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetUserListWithUserPermissionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.userList?.length) {
      obj.userList = message.userList.map(e => User.toJSON(e));
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<GetUserListWithUserPermissionResponse>, I>,
  >(base?: I): GetUserListWithUserPermissionResponse {
    return GetUserListWithUserPermissionResponse.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<GetUserListWithUserPermissionResponse>, I>,
  >(object: I): GetUserListWithUserPermissionResponse {
    const message = createBaseGetUserListWithUserPermissionResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.userList = object.userList?.map(e => User.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSetUserPermissionListOnUserRequest(): SetUserPermissionListOnUserRequest {
  return { userId: '', menuIdList: '', menuActionIdList: '' };
}

export const SetUserPermissionListOnUserRequest = {
  encode(
    message: SetUserPermissionListOnUserRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userId !== '') {
      writer.uint32(10).string(message.userId);
    }
    if (message.menuIdList !== '') {
      writer.uint32(18).string(message.menuIdList);
    }
    if (message.menuActionIdList !== '') {
      writer.uint32(26).string(message.menuActionIdList);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): SetUserPermissionListOnUserRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUserPermissionListOnUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.menuIdList = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.menuActionIdList = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUserPermissionListOnUserRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : '',
      menuIdList: isSet(object.menuIdList)
        ? globalThis.String(object.menuIdList)
        : '',
      menuActionIdList: isSet(object.menuActionIdList)
        ? globalThis.String(object.menuActionIdList)
        : '',
    };
  },

  toJSON(message: SetUserPermissionListOnUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== '') {
      obj.userId = message.userId;
    }
    if (message.menuIdList !== '') {
      obj.menuIdList = message.menuIdList;
    }
    if (message.menuActionIdList !== '') {
      obj.menuActionIdList = message.menuActionIdList;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetUserPermissionListOnUserRequest>, I>>(
    base?: I,
  ): SetUserPermissionListOnUserRequest {
    return SetUserPermissionListOnUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<SetUserPermissionListOnUserRequest>, I>,
  >(object: I): SetUserPermissionListOnUserRequest {
    const message = createBaseSetUserPermissionListOnUserRequest();
    message.userId = object.userId ?? '';
    message.menuIdList = object.menuIdList ?? '';
    message.menuActionIdList = object.menuActionIdList ?? '';
    return message;
  },
};

function createBaseSetUserPermissionListOnUserResponse(): SetUserPermissionListOnUserResponse {
  return { success: false, errorMessage: '' };
}

export const SetUserPermissionListOnUserResponse = {
  encode(
    message: SetUserPermissionListOnUserResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): SetUserPermissionListOnUserResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUserPermissionListOnUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetUserPermissionListOnUserResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: SetUserPermissionListOnUserResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetUserPermissionListOnUserResponse>, I>>(
    base?: I,
  ): SetUserPermissionListOnUserResponse {
    return SetUserPermissionListOnUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<SetUserPermissionListOnUserResponse>, I>,
  >(object: I): SetUserPermissionListOnUserResponse {
    const message = createBaseSetUserPermissionListOnUserResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseGetUserListWithoutMenuPermissionRequest(): GetUserListWithoutMenuPermissionRequest {
  return { page: 0, countPerPage: 0 };
}

export const GetUserListWithoutMenuPermissionRequest = {
  encode(
    message: GetUserListWithoutMenuPermissionRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.countPerPage !== 0) {
      writer.uint32(16).int32(message.countPerPage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetUserListWithoutMenuPermissionRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserListWithoutMenuPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.countPerPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserListWithoutMenuPermissionRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      countPerPage: isSet(object.countPerPage)
        ? globalThis.Number(object.countPerPage)
        : 0,
    };
  },

  toJSON(message: GetUserListWithoutMenuPermissionRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.countPerPage !== 0) {
      obj.countPerPage = Math.round(message.countPerPage);
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<GetUserListWithoutMenuPermissionRequest>, I>,
  >(base?: I): GetUserListWithoutMenuPermissionRequest {
    return GetUserListWithoutMenuPermissionRequest.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<GetUserListWithoutMenuPermissionRequest>, I>,
  >(object: I): GetUserListWithoutMenuPermissionRequest {
    const message = createBaseGetUserListWithoutMenuPermissionRequest();
    message.page = object.page ?? 0;
    message.countPerPage = object.countPerPage ?? 0;
    return message;
  },
};

function createBaseGetUserListWithoutMenuPermissionResponse(): GetUserListWithoutMenuPermissionResponse {
  return { success: false, errorMessage: '', userList: [] };
}

export const GetUserListWithoutMenuPermissionResponse = {
  encode(
    message: GetUserListWithoutMenuPermissionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.userList) {
      User.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetUserListWithoutMenuPermissionResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserListWithoutMenuPermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userList.push(User.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserListWithoutMenuPermissionResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      userList: globalThis.Array.isArray(object?.userList)
        ? object.userList.map((e: any) => User.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetUserListWithoutMenuPermissionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.userList?.length) {
      obj.userList = message.userList.map(e => User.toJSON(e));
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<GetUserListWithoutMenuPermissionResponse>, I>,
  >(base?: I): GetUserListWithoutMenuPermissionResponse {
    return GetUserListWithoutMenuPermissionResponse.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<GetUserListWithoutMenuPermissionResponse>, I>,
  >(object: I): GetUserListWithoutMenuPermissionResponse {
    const message = createBaseGetUserListWithoutMenuPermissionResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.userList = object.userList?.map(e => User.fromPartial(e)) || [];
    return message;
  },
};

export type AdminGroupPermissionServiceService =
  typeof AdminGroupPermissionServiceService;
export const AdminGroupPermissionServiceService = {
  getGroupPermissionList: {
    path: '/admin.AdminGroupPermissionService/GetGroupPermissionList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetGroupPermissionListRequest) =>
      Buffer.from(GetGroupPermissionListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      GetGroupPermissionListRequest.decode(value),
    responseSerialize: (value: GetGroupPermissionListResponse) =>
      Buffer.from(GetGroupPermissionListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetGroupPermissionListResponse.decode(value),
  },
  getGroupPermissionInfo: {
    path: '/admin.AdminGroupPermissionService/GetGroupPermissionInfo',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetGroupPermissionInfoRequest) =>
      Buffer.from(GetGroupPermissionInfoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      GetGroupPermissionInfoRequest.decode(value),
    responseSerialize: (value: GetGroupPermissionInfoResponse) =>
      Buffer.from(GetGroupPermissionInfoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetGroupPermissionInfoResponse.decode(value),
  },
  createGroupPermission: {
    path: '/admin.AdminGroupPermissionService/CreateGroupPermission',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateGroupPermissionRequest) =>
      Buffer.from(CreateGroupPermissionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      CreateGroupPermissionRequest.decode(value),
    responseSerialize: (value: CreateGroupPermissionResponse) =>
      Buffer.from(CreateGroupPermissionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      CreateGroupPermissionResponse.decode(value),
  },
  updateGroupPermission: {
    path: '/admin.AdminGroupPermissionService/UpdateGroupPermission',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateGroupPermissionRequest) =>
      Buffer.from(UpdateGroupPermissionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      UpdateGroupPermissionRequest.decode(value),
    responseSerialize: (value: UpdateGroupPermissionResponse) =>
      Buffer.from(UpdateGroupPermissionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      UpdateGroupPermissionResponse.decode(value),
  },
  deleteGroupPermission: {
    path: '/admin.AdminGroupPermissionService/DeleteGroupPermission',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteGroupPermissionRequest) =>
      Buffer.from(DeleteGroupPermissionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      DeleteGroupPermissionRequest.decode(value),
    responseSerialize: (value: DeleteGroupPermissionResponse) =>
      Buffer.from(DeleteGroupPermissionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      DeleteGroupPermissionResponse.decode(value),
  },
  /** 그룹 권한에 메뉴들 설정 */
  setMenuListOnGroupPermission: {
    path: '/admin.AdminGroupPermissionService/SetMenuListOnGroupPermission',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SetMenuListOnGroupPermissionRequest) =>
      Buffer.from(SetMenuListOnGroupPermissionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      SetMenuListOnGroupPermissionRequest.decode(value),
    responseSerialize: (value: SetMenuListOnGroupPermissionResponse) =>
      Buffer.from(SetMenuListOnGroupPermissionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      SetMenuListOnGroupPermissionResponse.decode(value),
  },
  /** 그룹 권한에 설정된 메뉴들 조회 */
  getMenuListOnGroupPermission: {
    path: '/admin.AdminGroupPermissionService/GetMenuListOnGroupPermission',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetMenuListOnGroupPermissionRequest) =>
      Buffer.from(GetMenuListOnGroupPermissionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      GetMenuListOnGroupPermissionRequest.decode(value),
    responseSerialize: (value: GetMenuListOnGroupPermissionResponse) =>
      Buffer.from(GetMenuListOnGroupPermissionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetMenuListOnGroupPermissionResponse.decode(value),
  },
  /** 사용자에게 그룹 권한 설정 */
  setGroupPermissionsOnUser: {
    path: '/admin.AdminGroupPermissionService/SetGroupPermissionsOnUser',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SetGroupPermissionsOnUserRequest) =>
      Buffer.from(SetGroupPermissionsOnUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      SetGroupPermissionsOnUserRequest.decode(value),
    responseSerialize: (value: SetGroupPermissionsOnUserResponse) =>
      Buffer.from(SetGroupPermissionsOnUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      SetGroupPermissionsOnUserResponse.decode(value),
  },
  /** 그룹 권한에 사용자들 설정 */
  setUserListOnGroupPermission: {
    path: '/admin.AdminGroupPermissionService/SetUserListOnGroupPermission',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SetUserListOnGroupPermissionRequest) =>
      Buffer.from(SetUserListOnGroupPermissionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      SetUserListOnGroupPermissionRequest.decode(value),
    responseSerialize: (value: SetUserListOnGroupPermissionResponse) =>
      Buffer.from(SetUserListOnGroupPermissionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      SetUserListOnGroupPermissionResponse.decode(value),
  },
  /** 사용자들에게 그룹 권한 추가 */
  insertGroupPermissionToUserList: {
    path: '/admin.AdminGroupPermissionService/InsertGroupPermissionToUserList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: InsertGroupPermissionToUserListRequest) =>
      Buffer.from(
        InsertGroupPermissionToUserListRequest.encode(value).finish(),
      ),
    requestDeserialize: (value: Buffer) =>
      InsertGroupPermissionToUserListRequest.decode(value),
    responseSerialize: (value: InsertGroupPermissionToUserListResponse) =>
      Buffer.from(
        InsertGroupPermissionToUserListResponse.encode(value).finish(),
      ),
    responseDeserialize: (value: Buffer) =>
      InsertGroupPermissionToUserListResponse.decode(value),
  },
  /** 사용자들에게 설정된 그룹 권한 삭제 */
  deleteGroupPermissionOfUserList: {
    path: '/admin.AdminGroupPermissionService/DeleteGroupPermissionOfUserList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteGroupPermissionOfUserListRequest) =>
      Buffer.from(
        DeleteGroupPermissionOfUserListRequest.encode(value).finish(),
      ),
    requestDeserialize: (value: Buffer) =>
      DeleteGroupPermissionOfUserListRequest.decode(value),
    responseSerialize: (value: DeleteGroupPermissionOfUserListResponse) =>
      Buffer.from(
        DeleteGroupPermissionOfUserListResponse.encode(value).finish(),
      ),
    responseDeserialize: (value: Buffer) =>
      DeleteGroupPermissionOfUserListResponse.decode(value),
  },
  /** 사용자에게 설정된 그룹 권한 조회 */
  getGroupPermissionListOnUser: {
    path: '/admin.AdminGroupPermissionService/GetGroupPermissionListOnUser',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetGroupPermissionListOnUserRequest) =>
      Buffer.from(GetGroupPermissionListOnUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      GetGroupPermissionListOnUserRequest.decode(value),
    responseSerialize: (value: GetGroupPermissionListOnUserResponse) =>
      Buffer.from(GetGroupPermissionListOnUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetGroupPermissionListOnUserResponse.decode(value),
  },
  /** 그룹 권한을 가진 사용자 조회 */
  getUserListWithGroupPermission: {
    path: '/admin.AdminGroupPermissionService/GetUserListWithGroupPermission',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserListWithGroupPermissionRequest) =>
      Buffer.from(GetUserListWithGroupPermissionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      GetUserListWithGroupPermissionRequest.decode(value),
    responseSerialize: (value: GetUserListWithGroupPermissionResponse) =>
      Buffer.from(
        GetUserListWithGroupPermissionResponse.encode(value).finish(),
      ),
    responseDeserialize: (value: Buffer) =>
      GetUserListWithGroupPermissionResponse.decode(value),
  },
  /** 사용자 권한을 가진 사용자 조회 */
  getUserListWithUserPermission: {
    path: '/admin.AdminGroupPermissionService/GetUserListWithUserPermission',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserListWithUserPermissionRequest) =>
      Buffer.from(GetUserListWithUserPermissionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      GetUserListWithUserPermissionRequest.decode(value),
    responseSerialize: (value: GetUserListWithUserPermissionResponse) =>
      Buffer.from(GetUserListWithUserPermissionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetUserListWithUserPermissionResponse.decode(value),
  },
  /** 사용자별 권한 설정 */
  setUserPermissionListOnUser: {
    path: '/admin.AdminGroupPermissionService/SetUserPermissionListOnUser',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SetUserPermissionListOnUserRequest) =>
      Buffer.from(SetUserPermissionListOnUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      SetUserPermissionListOnUserRequest.decode(value),
    responseSerialize: (value: SetUserPermissionListOnUserResponse) =>
      Buffer.from(SetUserPermissionListOnUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      SetUserPermissionListOnUserResponse.decode(value),
  },
  /** 메뉴 권한이 없는 사용자 조회 */
  getUserListWithoutMenuPermission: {
    path: '/admin.AdminGroupPermissionService/GetUserListWithoutMenuPermission',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserListWithoutMenuPermissionRequest) =>
      Buffer.from(
        GetUserListWithoutMenuPermissionRequest.encode(value).finish(),
      ),
    requestDeserialize: (value: Buffer) =>
      GetUserListWithoutMenuPermissionRequest.decode(value),
    responseSerialize: (value: GetUserListWithoutMenuPermissionResponse) =>
      Buffer.from(
        GetUserListWithoutMenuPermissionResponse.encode(value).finish(),
      ),
    responseDeserialize: (value: Buffer) =>
      GetUserListWithoutMenuPermissionResponse.decode(value),
  },
} as const;

export interface AdminGroupPermissionServiceServer
  extends UntypedServiceImplementation {
  getGroupPermissionList: handleUnaryCall<
    GetGroupPermissionListRequest,
    GetGroupPermissionListResponse
  >;
  getGroupPermissionInfo: handleUnaryCall<
    GetGroupPermissionInfoRequest,
    GetGroupPermissionInfoResponse
  >;
  createGroupPermission: handleUnaryCall<
    CreateGroupPermissionRequest,
    CreateGroupPermissionResponse
  >;
  updateGroupPermission: handleUnaryCall<
    UpdateGroupPermissionRequest,
    UpdateGroupPermissionResponse
  >;
  deleteGroupPermission: handleUnaryCall<
    DeleteGroupPermissionRequest,
    DeleteGroupPermissionResponse
  >;
  /** 그룹 권한에 메뉴들 설정 */
  setMenuListOnGroupPermission: handleUnaryCall<
    SetMenuListOnGroupPermissionRequest,
    SetMenuListOnGroupPermissionResponse
  >;
  /** 그룹 권한에 설정된 메뉴들 조회 */
  getMenuListOnGroupPermission: handleUnaryCall<
    GetMenuListOnGroupPermissionRequest,
    GetMenuListOnGroupPermissionResponse
  >;
  /** 사용자에게 그룹 권한 설정 */
  setGroupPermissionsOnUser: handleUnaryCall<
    SetGroupPermissionsOnUserRequest,
    SetGroupPermissionsOnUserResponse
  >;
  /** 그룹 권한에 사용자들 설정 */
  setUserListOnGroupPermission: handleUnaryCall<
    SetUserListOnGroupPermissionRequest,
    SetUserListOnGroupPermissionResponse
  >;
  /** 사용자들에게 그룹 권한 추가 */
  insertGroupPermissionToUserList: handleUnaryCall<
    InsertGroupPermissionToUserListRequest,
    InsertGroupPermissionToUserListResponse
  >;
  /** 사용자들에게 설정된 그룹 권한 삭제 */
  deleteGroupPermissionOfUserList: handleUnaryCall<
    DeleteGroupPermissionOfUserListRequest,
    DeleteGroupPermissionOfUserListResponse
  >;
  /** 사용자에게 설정된 그룹 권한 조회 */
  getGroupPermissionListOnUser: handleUnaryCall<
    GetGroupPermissionListOnUserRequest,
    GetGroupPermissionListOnUserResponse
  >;
  /** 그룹 권한을 가진 사용자 조회 */
  getUserListWithGroupPermission: handleUnaryCall<
    GetUserListWithGroupPermissionRequest,
    GetUserListWithGroupPermissionResponse
  >;
  /** 사용자 권한을 가진 사용자 조회 */
  getUserListWithUserPermission: handleUnaryCall<
    GetUserListWithUserPermissionRequest,
    GetUserListWithUserPermissionResponse
  >;
  /** 사용자별 권한 설정 */
  setUserPermissionListOnUser: handleUnaryCall<
    SetUserPermissionListOnUserRequest,
    SetUserPermissionListOnUserResponse
  >;
  /** 메뉴 권한이 없는 사용자 조회 */
  getUserListWithoutMenuPermission: handleUnaryCall<
    GetUserListWithoutMenuPermissionRequest,
    GetUserListWithoutMenuPermissionResponse
  >;
}

export interface AdminGroupPermissionServiceClient extends Client {
  getGroupPermissionList(
    request: GetGroupPermissionListRequest,
    callback: (
      error: ServiceError | null,
      response: GetGroupPermissionListResponse,
    ) => void,
  ): ClientUnaryCall;
  getGroupPermissionList(
    request: GetGroupPermissionListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetGroupPermissionListResponse,
    ) => void,
  ): ClientUnaryCall;
  getGroupPermissionList(
    request: GetGroupPermissionListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetGroupPermissionListResponse,
    ) => void,
  ): ClientUnaryCall;
  getGroupPermissionInfo(
    request: GetGroupPermissionInfoRequest,
    callback: (
      error: ServiceError | null,
      response: GetGroupPermissionInfoResponse,
    ) => void,
  ): ClientUnaryCall;
  getGroupPermissionInfo(
    request: GetGroupPermissionInfoRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetGroupPermissionInfoResponse,
    ) => void,
  ): ClientUnaryCall;
  getGroupPermissionInfo(
    request: GetGroupPermissionInfoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetGroupPermissionInfoResponse,
    ) => void,
  ): ClientUnaryCall;
  createGroupPermission(
    request: CreateGroupPermissionRequest,
    callback: (
      error: ServiceError | null,
      response: CreateGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  createGroupPermission(
    request: CreateGroupPermissionRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: CreateGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  createGroupPermission(
    request: CreateGroupPermissionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: CreateGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  updateGroupPermission(
    request: UpdateGroupPermissionRequest,
    callback: (
      error: ServiceError | null,
      response: UpdateGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  updateGroupPermission(
    request: UpdateGroupPermissionRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: UpdateGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  updateGroupPermission(
    request: UpdateGroupPermissionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: UpdateGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteGroupPermission(
    request: DeleteGroupPermissionRequest,
    callback: (
      error: ServiceError | null,
      response: DeleteGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteGroupPermission(
    request: DeleteGroupPermissionRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: DeleteGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteGroupPermission(
    request: DeleteGroupPermissionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: DeleteGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  /** 그룹 권한에 메뉴들 설정 */
  setMenuListOnGroupPermission(
    request: SetMenuListOnGroupPermissionRequest,
    callback: (
      error: ServiceError | null,
      response: SetMenuListOnGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  setMenuListOnGroupPermission(
    request: SetMenuListOnGroupPermissionRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: SetMenuListOnGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  setMenuListOnGroupPermission(
    request: SetMenuListOnGroupPermissionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: SetMenuListOnGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  /** 그룹 권한에 설정된 메뉴들 조회 */
  getMenuListOnGroupPermission(
    request: GetMenuListOnGroupPermissionRequest,
    callback: (
      error: ServiceError | null,
      response: GetMenuListOnGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  getMenuListOnGroupPermission(
    request: GetMenuListOnGroupPermissionRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetMenuListOnGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  getMenuListOnGroupPermission(
    request: GetMenuListOnGroupPermissionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetMenuListOnGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  /** 사용자에게 그룹 권한 설정 */
  setGroupPermissionsOnUser(
    request: SetGroupPermissionsOnUserRequest,
    callback: (
      error: ServiceError | null,
      response: SetGroupPermissionsOnUserResponse,
    ) => void,
  ): ClientUnaryCall;
  setGroupPermissionsOnUser(
    request: SetGroupPermissionsOnUserRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: SetGroupPermissionsOnUserResponse,
    ) => void,
  ): ClientUnaryCall;
  setGroupPermissionsOnUser(
    request: SetGroupPermissionsOnUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: SetGroupPermissionsOnUserResponse,
    ) => void,
  ): ClientUnaryCall;
  /** 그룹 권한에 사용자들 설정 */
  setUserListOnGroupPermission(
    request: SetUserListOnGroupPermissionRequest,
    callback: (
      error: ServiceError | null,
      response: SetUserListOnGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  setUserListOnGroupPermission(
    request: SetUserListOnGroupPermissionRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: SetUserListOnGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  setUserListOnGroupPermission(
    request: SetUserListOnGroupPermissionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: SetUserListOnGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  /** 사용자들에게 그룹 권한 추가 */
  insertGroupPermissionToUserList(
    request: InsertGroupPermissionToUserListRequest,
    callback: (
      error: ServiceError | null,
      response: InsertGroupPermissionToUserListResponse,
    ) => void,
  ): ClientUnaryCall;
  insertGroupPermissionToUserList(
    request: InsertGroupPermissionToUserListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: InsertGroupPermissionToUserListResponse,
    ) => void,
  ): ClientUnaryCall;
  insertGroupPermissionToUserList(
    request: InsertGroupPermissionToUserListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: InsertGroupPermissionToUserListResponse,
    ) => void,
  ): ClientUnaryCall;
  /** 사용자들에게 설정된 그룹 권한 삭제 */
  deleteGroupPermissionOfUserList(
    request: DeleteGroupPermissionOfUserListRequest,
    callback: (
      error: ServiceError | null,
      response: DeleteGroupPermissionOfUserListResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteGroupPermissionOfUserList(
    request: DeleteGroupPermissionOfUserListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: DeleteGroupPermissionOfUserListResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteGroupPermissionOfUserList(
    request: DeleteGroupPermissionOfUserListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: DeleteGroupPermissionOfUserListResponse,
    ) => void,
  ): ClientUnaryCall;
  /** 사용자에게 설정된 그룹 권한 조회 */
  getGroupPermissionListOnUser(
    request: GetGroupPermissionListOnUserRequest,
    callback: (
      error: ServiceError | null,
      response: GetGroupPermissionListOnUserResponse,
    ) => void,
  ): ClientUnaryCall;
  getGroupPermissionListOnUser(
    request: GetGroupPermissionListOnUserRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetGroupPermissionListOnUserResponse,
    ) => void,
  ): ClientUnaryCall;
  getGroupPermissionListOnUser(
    request: GetGroupPermissionListOnUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetGroupPermissionListOnUserResponse,
    ) => void,
  ): ClientUnaryCall;
  /** 그룹 권한을 가진 사용자 조회 */
  getUserListWithGroupPermission(
    request: GetUserListWithGroupPermissionRequest,
    callback: (
      error: ServiceError | null,
      response: GetUserListWithGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  getUserListWithGroupPermission(
    request: GetUserListWithGroupPermissionRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetUserListWithGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  getUserListWithGroupPermission(
    request: GetUserListWithGroupPermissionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetUserListWithGroupPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  /** 사용자 권한을 가진 사용자 조회 */
  getUserListWithUserPermission(
    request: GetUserListWithUserPermissionRequest,
    callback: (
      error: ServiceError | null,
      response: GetUserListWithUserPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  getUserListWithUserPermission(
    request: GetUserListWithUserPermissionRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetUserListWithUserPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  getUserListWithUserPermission(
    request: GetUserListWithUserPermissionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetUserListWithUserPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  /** 사용자별 권한 설정 */
  setUserPermissionListOnUser(
    request: SetUserPermissionListOnUserRequest,
    callback: (
      error: ServiceError | null,
      response: SetUserPermissionListOnUserResponse,
    ) => void,
  ): ClientUnaryCall;
  setUserPermissionListOnUser(
    request: SetUserPermissionListOnUserRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: SetUserPermissionListOnUserResponse,
    ) => void,
  ): ClientUnaryCall;
  setUserPermissionListOnUser(
    request: SetUserPermissionListOnUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: SetUserPermissionListOnUserResponse,
    ) => void,
  ): ClientUnaryCall;
  /** 메뉴 권한이 없는 사용자 조회 */
  getUserListWithoutMenuPermission(
    request: GetUserListWithoutMenuPermissionRequest,
    callback: (
      error: ServiceError | null,
      response: GetUserListWithoutMenuPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  getUserListWithoutMenuPermission(
    request: GetUserListWithoutMenuPermissionRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetUserListWithoutMenuPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  getUserListWithoutMenuPermission(
    request: GetUserListWithoutMenuPermissionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetUserListWithoutMenuPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const AdminGroupPermissionServiceClient = makeGenericClientConstructor(
  AdminGroupPermissionServiceService,
  'admin.AdminGroupPermissionService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): AdminGroupPermissionServiceClient;
  service: typeof AdminGroupPermissionServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
