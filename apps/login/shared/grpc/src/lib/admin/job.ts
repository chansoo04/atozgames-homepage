// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: job.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';
import { Job } from './admin-common';

export const protobufPackage = 'admin';

export interface GetJobListRequest {}

export interface GetJobListResponse {
  success: boolean;
  errorMessage: string;
  jobList: Job[];
}

export interface CreateJobRequest {
  code: string;
  name: string;
  description: string;
  isActive: boolean;
}

export interface CreateJobResponse {
  success: boolean;
  errorMessage: string;
}

export interface UpdateJobRequest {
  jobId: number;
  code: string;
  name: string;
  description: string;
  isActive: boolean;
}

export interface UpdateJobResponse {
  success: boolean;
  errorMessage: string;
}

export interface DeleteJobRequest {
  jobId: number;
}

export interface DeleteJobResponse {
  success: boolean;
  errorMessage: string;
}

function createBaseGetJobListRequest(): GetJobListRequest {
  return {};
}

export const GetJobListRequest = {
  encode(
    _: GetJobListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetJobListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetJobListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetJobListRequest {
    return {};
  },

  toJSON(_: GetJobListRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetJobListRequest>, I>>(
    base?: I,
  ): GetJobListRequest {
    return GetJobListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetJobListRequest>, I>>(
    _: I,
  ): GetJobListRequest {
    const message = createBaseGetJobListRequest();
    return message;
  },
};

function createBaseGetJobListResponse(): GetJobListResponse {
  return { success: false, errorMessage: '', jobList: [] };
}

export const GetJobListResponse = {
  encode(
    message: GetJobListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.jobList) {
      Job.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetJobListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetJobListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jobList.push(Job.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetJobListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      jobList: globalThis.Array.isArray(object?.jobList)
        ? object.jobList.map((e: any) => Job.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetJobListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.jobList?.length) {
      obj.jobList = message.jobList.map(e => Job.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetJobListResponse>, I>>(
    base?: I,
  ): GetJobListResponse {
    return GetJobListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetJobListResponse>, I>>(
    object: I,
  ): GetJobListResponse {
    const message = createBaseGetJobListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.jobList = object.jobList?.map(e => Job.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateJobRequest(): CreateJobRequest {
  return { code: '', name: '', description: '', isActive: false };
}

export const CreateJobRequest = {
  encode(
    message: CreateJobRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.code !== '') {
      writer.uint32(10).string(message.code);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(26).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateJobRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateJobRequest {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: CreateJobRequest): unknown {
    const obj: any = {};
    if (message.code !== '') {
      obj.code = message.code;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateJobRequest>, I>>(
    base?: I,
  ): CreateJobRequest {
    return CreateJobRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateJobRequest>, I>>(
    object: I,
  ): CreateJobRequest {
    const message = createBaseCreateJobRequest();
    message.code = object.code ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseCreateJobResponse(): CreateJobResponse {
  return { success: false, errorMessage: '' };
}

export const CreateJobResponse = {
  encode(
    message: CreateJobResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateJobResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateJobResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateJobResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: CreateJobResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateJobResponse>, I>>(
    base?: I,
  ): CreateJobResponse {
    return CreateJobResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateJobResponse>, I>>(
    object: I,
  ): CreateJobResponse {
    const message = createBaseCreateJobResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseUpdateJobRequest(): UpdateJobRequest {
  return { jobId: 0, code: '', name: '', description: '', isActive: false };
}

export const UpdateJobRequest = {
  encode(
    message: UpdateJobRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.jobId !== 0) {
      writer.uint32(8).int32(message.jobId);
    }
    if (message.code !== '') {
      writer.uint32(18).string(message.code);
    }
    if (message.name !== '') {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(34).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(40).bool(message.isActive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateJobRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.jobId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateJobRequest {
    return {
      jobId: isSet(object.jobId) ? globalThis.Number(object.jobId) : 0,
      code: isSet(object.code) ? globalThis.String(object.code) : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: UpdateJobRequest): unknown {
    const obj: any = {};
    if (message.jobId !== 0) {
      obj.jobId = Math.round(message.jobId);
    }
    if (message.code !== '') {
      obj.code = message.code;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateJobRequest>, I>>(
    base?: I,
  ): UpdateJobRequest {
    return UpdateJobRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateJobRequest>, I>>(
    object: I,
  ): UpdateJobRequest {
    const message = createBaseUpdateJobRequest();
    message.jobId = object.jobId ?? 0;
    message.code = object.code ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseUpdateJobResponse(): UpdateJobResponse {
  return { success: false, errorMessage: '' };
}

export const UpdateJobResponse = {
  encode(
    message: UpdateJobResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateJobResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateJobResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateJobResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: UpdateJobResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateJobResponse>, I>>(
    base?: I,
  ): UpdateJobResponse {
    return UpdateJobResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateJobResponse>, I>>(
    object: I,
  ): UpdateJobResponse {
    const message = createBaseUpdateJobResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseDeleteJobRequest(): DeleteJobRequest {
  return { jobId: 0 };
}

export const DeleteJobRequest = {
  encode(
    message: DeleteJobRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.jobId !== 0) {
      writer.uint32(8).int32(message.jobId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteJobRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.jobId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteJobRequest {
    return { jobId: isSet(object.jobId) ? globalThis.Number(object.jobId) : 0 };
  },

  toJSON(message: DeleteJobRequest): unknown {
    const obj: any = {};
    if (message.jobId !== 0) {
      obj.jobId = Math.round(message.jobId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteJobRequest>, I>>(
    base?: I,
  ): DeleteJobRequest {
    return DeleteJobRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteJobRequest>, I>>(
    object: I,
  ): DeleteJobRequest {
    const message = createBaseDeleteJobRequest();
    message.jobId = object.jobId ?? 0;
    return message;
  },
};

function createBaseDeleteJobResponse(): DeleteJobResponse {
  return { success: false, errorMessage: '' };
}

export const DeleteJobResponse = {
  encode(
    message: DeleteJobResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteJobResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteJobResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteJobResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: DeleteJobResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteJobResponse>, I>>(
    base?: I,
  ): DeleteJobResponse {
    return DeleteJobResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteJobResponse>, I>>(
    object: I,
  ): DeleteJobResponse {
    const message = createBaseDeleteJobResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

export type AdminJobServiceService = typeof AdminJobServiceService;
export const AdminJobServiceService = {
  getJobList: {
    path: '/admin.AdminJobService/GetJobList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetJobListRequest) =>
      Buffer.from(GetJobListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetJobListRequest.decode(value),
    responseSerialize: (value: GetJobListResponse) =>
      Buffer.from(GetJobListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetJobListResponse.decode(value),
  },
  createJob: {
    path: '/admin.AdminJobService/CreateJob',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateJobRequest) =>
      Buffer.from(CreateJobRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateJobRequest.decode(value),
    responseSerialize: (value: CreateJobResponse) =>
      Buffer.from(CreateJobResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateJobResponse.decode(value),
  },
  updateJob: {
    path: '/admin.AdminJobService/UpdateJob',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateJobRequest) =>
      Buffer.from(UpdateJobRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateJobRequest.decode(value),
    responseSerialize: (value: UpdateJobResponse) =>
      Buffer.from(UpdateJobResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateJobResponse.decode(value),
  },
  deleteJob: {
    path: '/admin.AdminJobService/DeleteJob',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteJobRequest) =>
      Buffer.from(DeleteJobRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteJobRequest.decode(value),
    responseSerialize: (value: DeleteJobResponse) =>
      Buffer.from(DeleteJobResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteJobResponse.decode(value),
  },
} as const;

export interface AdminJobServiceServer extends UntypedServiceImplementation {
  getJobList: handleUnaryCall<GetJobListRequest, GetJobListResponse>;
  createJob: handleUnaryCall<CreateJobRequest, CreateJobResponse>;
  updateJob: handleUnaryCall<UpdateJobRequest, UpdateJobResponse>;
  deleteJob: handleUnaryCall<DeleteJobRequest, DeleteJobResponse>;
}

export interface AdminJobServiceClient extends Client {
  getJobList(
    request: GetJobListRequest,
    callback: (
      error: ServiceError | null,
      response: GetJobListResponse,
    ) => void,
  ): ClientUnaryCall;
  getJobList(
    request: GetJobListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetJobListResponse,
    ) => void,
  ): ClientUnaryCall;
  getJobList(
    request: GetJobListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetJobListResponse,
    ) => void,
  ): ClientUnaryCall;
  createJob(
    request: CreateJobRequest,
    callback: (error: ServiceError | null, response: CreateJobResponse) => void,
  ): ClientUnaryCall;
  createJob(
    request: CreateJobRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateJobResponse) => void,
  ): ClientUnaryCall;
  createJob(
    request: CreateJobRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateJobResponse) => void,
  ): ClientUnaryCall;
  updateJob(
    request: UpdateJobRequest,
    callback: (error: ServiceError | null, response: UpdateJobResponse) => void,
  ): ClientUnaryCall;
  updateJob(
    request: UpdateJobRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateJobResponse) => void,
  ): ClientUnaryCall;
  updateJob(
    request: UpdateJobRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateJobResponse) => void,
  ): ClientUnaryCall;
  deleteJob(
    request: DeleteJobRequest,
    callback: (error: ServiceError | null, response: DeleteJobResponse) => void,
  ): ClientUnaryCall;
  deleteJob(
    request: DeleteJobRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteJobResponse) => void,
  ): ClientUnaryCall;
  deleteJob(
    request: DeleteJobRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteJobResponse) => void,
  ): ClientUnaryCall;
}

export const AdminJobServiceClient = makeGenericClientConstructor(
  AdminJobServiceService,
  'admin.AdminJobService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): AdminJobServiceClient;
  service: typeof AdminJobServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
