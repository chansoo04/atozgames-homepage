// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: menu.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';
import { Menu } from './admin-common';

export const protobufPackage = 'admin';

export interface GetMenuListRequest {
  page: number;
  countPerPage: number;
  /** 시스템 ID */
  systemId: string;
  /** null 이면 1뎁스 메뉴 조회, 값이 있으면 하위 메뉴들 조회 */
  parentMenuId: string;
}

export interface GetMenuListResponse {
  success: boolean;
  errorMessage: string;
  menuList: Menu[];
}

/** 메뉴 액션을 위해 마지막 뎁스 메뉴 리스트 조회 요청 */
export interface GetLastDepthMenuListRequest {
  page: number;
  countPerPage: number;
  /** 시스템 ID */
  systemId: string;
}

/** 메뉴 액션을 위해 마지막 뎁스 메뉴 리스트 조회 응답 */
export interface GetLastDepthMenuListResponse {
  success: boolean;
  errorMessage: string;
  menuList: Menu[];
}

export interface CreateMenuRequest {
  /** 시스템 ID */
  systemId: string;
  /** 메뉴 ID (varchar: 5) */
  menuId: string;
  /** 상위 메뉴 ID (varchar: 5) */
  parentMenuId: string;
  /** 메뉴명 */
  name: string;
  /** URL */
  url: string;
  /** 설명 */
  description: string;
  /** 정렬 순서 */
  ordering: number;
  /** 사용 여부 */
  isActive: boolean;
}

export interface CreateMenuResponse {
  success: boolean;
  errorMessage: string;
}

export interface UpdateMenuRequest {
  /** 시스템 ID */
  systemId: string;
  /** 상위 메뉴 ID (varchar: 5) */
  parentMenuId: string;
  /** 메뉴 ID (varchar: 5) */
  menuId: string;
  /** 메뉴명 */
  name: string;
  /** URL */
  url: string;
  /** 설명 */
  description: string;
  /** 사용 여부 */
  isActive: boolean;
}

export interface UpdateMenuResponse {
  success: boolean;
  errorMessage: string;
}

export interface UpdateMenuOrderingRequest {
  /** 시스템 ID, null 이면 1 뎁스 메뉴 정렬 */
  systemId: string;
  /** 메뉴 ID (varchar: 5), null 이면 1 뎁스 메뉴 정렬 */
  parentMenuId: string;
  /** 정렬 순서를 변경할 메뉴 ID 리스트 */
  menuIdList: string;
}

export interface UpdateMenuOrderingResponse {
  success: boolean;
  errorMessage: string;
}

export interface DeleteMenuRequest {
  /** 시스템 ID */
  systemId: string;
  /** 메뉴 ID (varchar: 5) */
  menuId: string;
}

export interface DeleteMenuResponse {
  success: boolean;
  errorMessage: string;
}

function createBaseGetMenuListRequest(): GetMenuListRequest {
  return { page: 0, countPerPage: 0, systemId: '', parentMenuId: '' };
}

export const GetMenuListRequest = {
  encode(
    message: GetMenuListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.countPerPage !== 0) {
      writer.uint32(16).int32(message.countPerPage);
    }
    if (message.systemId !== '') {
      writer.uint32(26).string(message.systemId);
    }
    if (message.parentMenuId !== '') {
      writer.uint32(34).string(message.parentMenuId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetMenuListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMenuListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.countPerPage = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.systemId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.parentMenuId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMenuListRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      countPerPage: isSet(object.countPerPage)
        ? globalThis.Number(object.countPerPage)
        : 0,
      systemId: isSet(object.systemId)
        ? globalThis.String(object.systemId)
        : '',
      parentMenuId: isSet(object.parentMenuId)
        ? globalThis.String(object.parentMenuId)
        : '',
    };
  },

  toJSON(message: GetMenuListRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.countPerPage !== 0) {
      obj.countPerPage = Math.round(message.countPerPage);
    }
    if (message.systemId !== '') {
      obj.systemId = message.systemId;
    }
    if (message.parentMenuId !== '') {
      obj.parentMenuId = message.parentMenuId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMenuListRequest>, I>>(
    base?: I,
  ): GetMenuListRequest {
    return GetMenuListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMenuListRequest>, I>>(
    object: I,
  ): GetMenuListRequest {
    const message = createBaseGetMenuListRequest();
    message.page = object.page ?? 0;
    message.countPerPage = object.countPerPage ?? 0;
    message.systemId = object.systemId ?? '';
    message.parentMenuId = object.parentMenuId ?? '';
    return message;
  },
};

function createBaseGetMenuListResponse(): GetMenuListResponse {
  return { success: false, errorMessage: '', menuList: [] };
}

export const GetMenuListResponse = {
  encode(
    message: GetMenuListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.menuList) {
      Menu.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetMenuListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMenuListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.menuList.push(Menu.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMenuListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      menuList: globalThis.Array.isArray(object?.menuList)
        ? object.menuList.map((e: any) => Menu.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetMenuListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.menuList?.length) {
      obj.menuList = message.menuList.map(e => Menu.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMenuListResponse>, I>>(
    base?: I,
  ): GetMenuListResponse {
    return GetMenuListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMenuListResponse>, I>>(
    object: I,
  ): GetMenuListResponse {
    const message = createBaseGetMenuListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.menuList = object.menuList?.map(e => Menu.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetLastDepthMenuListRequest(): GetLastDepthMenuListRequest {
  return { page: 0, countPerPage: 0, systemId: '' };
}

export const GetLastDepthMenuListRequest = {
  encode(
    message: GetLastDepthMenuListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.countPerPage !== 0) {
      writer.uint32(16).int32(message.countPerPage);
    }
    if (message.systemId !== '') {
      writer.uint32(26).string(message.systemId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetLastDepthMenuListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLastDepthMenuListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.countPerPage = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.systemId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLastDepthMenuListRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      countPerPage: isSet(object.countPerPage)
        ? globalThis.Number(object.countPerPage)
        : 0,
      systemId: isSet(object.systemId)
        ? globalThis.String(object.systemId)
        : '',
    };
  },

  toJSON(message: GetLastDepthMenuListRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.countPerPage !== 0) {
      obj.countPerPage = Math.round(message.countPerPage);
    }
    if (message.systemId !== '') {
      obj.systemId = message.systemId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLastDepthMenuListRequest>, I>>(
    base?: I,
  ): GetLastDepthMenuListRequest {
    return GetLastDepthMenuListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLastDepthMenuListRequest>, I>>(
    object: I,
  ): GetLastDepthMenuListRequest {
    const message = createBaseGetLastDepthMenuListRequest();
    message.page = object.page ?? 0;
    message.countPerPage = object.countPerPage ?? 0;
    message.systemId = object.systemId ?? '';
    return message;
  },
};

function createBaseGetLastDepthMenuListResponse(): GetLastDepthMenuListResponse {
  return { success: false, errorMessage: '', menuList: [] };
}

export const GetLastDepthMenuListResponse = {
  encode(
    message: GetLastDepthMenuListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.menuList) {
      Menu.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetLastDepthMenuListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLastDepthMenuListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.menuList.push(Menu.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLastDepthMenuListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      menuList: globalThis.Array.isArray(object?.menuList)
        ? object.menuList.map((e: any) => Menu.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetLastDepthMenuListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.menuList?.length) {
      obj.menuList = message.menuList.map(e => Menu.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLastDepthMenuListResponse>, I>>(
    base?: I,
  ): GetLastDepthMenuListResponse {
    return GetLastDepthMenuListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLastDepthMenuListResponse>, I>>(
    object: I,
  ): GetLastDepthMenuListResponse {
    const message = createBaseGetLastDepthMenuListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.menuList = object.menuList?.map(e => Menu.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateMenuRequest(): CreateMenuRequest {
  return {
    systemId: '',
    menuId: '',
    parentMenuId: '',
    name: '',
    url: '',
    description: '',
    ordering: 0,
    isActive: false,
  };
}

export const CreateMenuRequest = {
  encode(
    message: CreateMenuRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.systemId !== '') {
      writer.uint32(10).string(message.systemId);
    }
    if (message.menuId !== '') {
      writer.uint32(18).string(message.menuId);
    }
    if (message.parentMenuId !== '') {
      writer.uint32(26).string(message.parentMenuId);
    }
    if (message.name !== '') {
      writer.uint32(34).string(message.name);
    }
    if (message.url !== '') {
      writer.uint32(42).string(message.url);
    }
    if (message.description !== '') {
      writer.uint32(50).string(message.description);
    }
    if (message.ordering !== 0) {
      writer.uint32(56).int32(message.ordering);
    }
    if (message.isActive !== false) {
      writer.uint32(64).bool(message.isActive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateMenuRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMenuRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.systemId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.menuId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.parentMenuId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.url = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.ordering = reader.int32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMenuRequest {
    return {
      systemId: isSet(object.systemId)
        ? globalThis.String(object.systemId)
        : '',
      menuId: isSet(object.menuId) ? globalThis.String(object.menuId) : '',
      parentMenuId: isSet(object.parentMenuId)
        ? globalThis.String(object.parentMenuId)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      url: isSet(object.url) ? globalThis.String(object.url) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      ordering: isSet(object.ordering) ? globalThis.Number(object.ordering) : 0,
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: CreateMenuRequest): unknown {
    const obj: any = {};
    if (message.systemId !== '') {
      obj.systemId = message.systemId;
    }
    if (message.menuId !== '') {
      obj.menuId = message.menuId;
    }
    if (message.parentMenuId !== '') {
      obj.parentMenuId = message.parentMenuId;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.url !== '') {
      obj.url = message.url;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.ordering !== 0) {
      obj.ordering = Math.round(message.ordering);
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateMenuRequest>, I>>(
    base?: I,
  ): CreateMenuRequest {
    return CreateMenuRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateMenuRequest>, I>>(
    object: I,
  ): CreateMenuRequest {
    const message = createBaseCreateMenuRequest();
    message.systemId = object.systemId ?? '';
    message.menuId = object.menuId ?? '';
    message.parentMenuId = object.parentMenuId ?? '';
    message.name = object.name ?? '';
    message.url = object.url ?? '';
    message.description = object.description ?? '';
    message.ordering = object.ordering ?? 0;
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseCreateMenuResponse(): CreateMenuResponse {
  return { success: false, errorMessage: '' };
}

export const CreateMenuResponse = {
  encode(
    message: CreateMenuResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateMenuResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMenuResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMenuResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: CreateMenuResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateMenuResponse>, I>>(
    base?: I,
  ): CreateMenuResponse {
    return CreateMenuResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateMenuResponse>, I>>(
    object: I,
  ): CreateMenuResponse {
    const message = createBaseCreateMenuResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseUpdateMenuRequest(): UpdateMenuRequest {
  return {
    systemId: '',
    parentMenuId: '',
    menuId: '',
    name: '',
    url: '',
    description: '',
    isActive: false,
  };
}

export const UpdateMenuRequest = {
  encode(
    message: UpdateMenuRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.systemId !== '') {
      writer.uint32(10).string(message.systemId);
    }
    if (message.parentMenuId !== '') {
      writer.uint32(18).string(message.parentMenuId);
    }
    if (message.menuId !== '') {
      writer.uint32(26).string(message.menuId);
    }
    if (message.name !== '') {
      writer.uint32(34).string(message.name);
    }
    if (message.url !== '') {
      writer.uint32(42).string(message.url);
    }
    if (message.description !== '') {
      writer.uint32(50).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(56).bool(message.isActive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMenuRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMenuRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.systemId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parentMenuId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.menuId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.url = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.description = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMenuRequest {
    return {
      systemId: isSet(object.systemId)
        ? globalThis.String(object.systemId)
        : '',
      parentMenuId: isSet(object.parentMenuId)
        ? globalThis.String(object.parentMenuId)
        : '',
      menuId: isSet(object.menuId) ? globalThis.String(object.menuId) : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      url: isSet(object.url) ? globalThis.String(object.url) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: UpdateMenuRequest): unknown {
    const obj: any = {};
    if (message.systemId !== '') {
      obj.systemId = message.systemId;
    }
    if (message.parentMenuId !== '') {
      obj.parentMenuId = message.parentMenuId;
    }
    if (message.menuId !== '') {
      obj.menuId = message.menuId;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.url !== '') {
      obj.url = message.url;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateMenuRequest>, I>>(
    base?: I,
  ): UpdateMenuRequest {
    return UpdateMenuRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateMenuRequest>, I>>(
    object: I,
  ): UpdateMenuRequest {
    const message = createBaseUpdateMenuRequest();
    message.systemId = object.systemId ?? '';
    message.parentMenuId = object.parentMenuId ?? '';
    message.menuId = object.menuId ?? '';
    message.name = object.name ?? '';
    message.url = object.url ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseUpdateMenuResponse(): UpdateMenuResponse {
  return { success: false, errorMessage: '' };
}

export const UpdateMenuResponse = {
  encode(
    message: UpdateMenuResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateMenuResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMenuResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMenuResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: UpdateMenuResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateMenuResponse>, I>>(
    base?: I,
  ): UpdateMenuResponse {
    return UpdateMenuResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateMenuResponse>, I>>(
    object: I,
  ): UpdateMenuResponse {
    const message = createBaseUpdateMenuResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseUpdateMenuOrderingRequest(): UpdateMenuOrderingRequest {
  return { systemId: '', parentMenuId: '', menuIdList: '' };
}

export const UpdateMenuOrderingRequest = {
  encode(
    message: UpdateMenuOrderingRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.systemId !== '') {
      writer.uint32(10).string(message.systemId);
    }
    if (message.parentMenuId !== '') {
      writer.uint32(18).string(message.parentMenuId);
    }
    if (message.menuIdList !== '') {
      writer.uint32(26).string(message.menuIdList);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateMenuOrderingRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMenuOrderingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.systemId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.parentMenuId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.menuIdList = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMenuOrderingRequest {
    return {
      systemId: isSet(object.systemId)
        ? globalThis.String(object.systemId)
        : '',
      parentMenuId: isSet(object.parentMenuId)
        ? globalThis.String(object.parentMenuId)
        : '',
      menuIdList: isSet(object.menuIdList)
        ? globalThis.String(object.menuIdList)
        : '',
    };
  },

  toJSON(message: UpdateMenuOrderingRequest): unknown {
    const obj: any = {};
    if (message.systemId !== '') {
      obj.systemId = message.systemId;
    }
    if (message.parentMenuId !== '') {
      obj.parentMenuId = message.parentMenuId;
    }
    if (message.menuIdList !== '') {
      obj.menuIdList = message.menuIdList;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateMenuOrderingRequest>, I>>(
    base?: I,
  ): UpdateMenuOrderingRequest {
    return UpdateMenuOrderingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateMenuOrderingRequest>, I>>(
    object: I,
  ): UpdateMenuOrderingRequest {
    const message = createBaseUpdateMenuOrderingRequest();
    message.systemId = object.systemId ?? '';
    message.parentMenuId = object.parentMenuId ?? '';
    message.menuIdList = object.menuIdList ?? '';
    return message;
  },
};

function createBaseUpdateMenuOrderingResponse(): UpdateMenuOrderingResponse {
  return { success: false, errorMessage: '' };
}

export const UpdateMenuOrderingResponse = {
  encode(
    message: UpdateMenuOrderingResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateMenuOrderingResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMenuOrderingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMenuOrderingResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: UpdateMenuOrderingResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateMenuOrderingResponse>, I>>(
    base?: I,
  ): UpdateMenuOrderingResponse {
    return UpdateMenuOrderingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateMenuOrderingResponse>, I>>(
    object: I,
  ): UpdateMenuOrderingResponse {
    const message = createBaseUpdateMenuOrderingResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseDeleteMenuRequest(): DeleteMenuRequest {
  return { systemId: '', menuId: '' };
}

export const DeleteMenuRequest = {
  encode(
    message: DeleteMenuRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.systemId !== '') {
      writer.uint32(10).string(message.systemId);
    }
    if (message.menuId !== '') {
      writer.uint32(18).string(message.menuId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMenuRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMenuRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.systemId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.menuId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMenuRequest {
    return {
      systemId: isSet(object.systemId)
        ? globalThis.String(object.systemId)
        : '',
      menuId: isSet(object.menuId) ? globalThis.String(object.menuId) : '',
    };
  },

  toJSON(message: DeleteMenuRequest): unknown {
    const obj: any = {};
    if (message.systemId !== '') {
      obj.systemId = message.systemId;
    }
    if (message.menuId !== '') {
      obj.menuId = message.menuId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteMenuRequest>, I>>(
    base?: I,
  ): DeleteMenuRequest {
    return DeleteMenuRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteMenuRequest>, I>>(
    object: I,
  ): DeleteMenuRequest {
    const message = createBaseDeleteMenuRequest();
    message.systemId = object.systemId ?? '';
    message.menuId = object.menuId ?? '';
    return message;
  },
};

function createBaseDeleteMenuResponse(): DeleteMenuResponse {
  return { success: false, errorMessage: '' };
}

export const DeleteMenuResponse = {
  encode(
    message: DeleteMenuResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteMenuResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMenuResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMenuResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: DeleteMenuResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteMenuResponse>, I>>(
    base?: I,
  ): DeleteMenuResponse {
    return DeleteMenuResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteMenuResponse>, I>>(
    object: I,
  ): DeleteMenuResponse {
    const message = createBaseDeleteMenuResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

export type AdminMenuServiceService = typeof AdminMenuServiceService;
export const AdminMenuServiceService = {
  getMenuList: {
    path: '/admin.AdminMenuService/GetMenuList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetMenuListRequest) =>
      Buffer.from(GetMenuListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetMenuListRequest.decode(value),
    responseSerialize: (value: GetMenuListResponse) =>
      Buffer.from(GetMenuListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetMenuListResponse.decode(value),
  },
  getLastDepthMenuList: {
    path: '/admin.AdminMenuService/GetLastDepthMenuList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetLastDepthMenuListRequest) =>
      Buffer.from(GetLastDepthMenuListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      GetLastDepthMenuListRequest.decode(value),
    responseSerialize: (value: GetLastDepthMenuListResponse) =>
      Buffer.from(GetLastDepthMenuListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetLastDepthMenuListResponse.decode(value),
  },
  createMenu: {
    path: '/admin.AdminMenuService/CreateMenu',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateMenuRequest) =>
      Buffer.from(CreateMenuRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateMenuRequest.decode(value),
    responseSerialize: (value: CreateMenuResponse) =>
      Buffer.from(CreateMenuResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateMenuResponse.decode(value),
  },
  updateMenu: {
    path: '/admin.AdminMenuService/UpdateMenu',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateMenuRequest) =>
      Buffer.from(UpdateMenuRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateMenuRequest.decode(value),
    responseSerialize: (value: UpdateMenuResponse) =>
      Buffer.from(UpdateMenuResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateMenuResponse.decode(value),
  },
  updateMenuOrdering: {
    path: '/admin.AdminMenuService/UpdateMenuOrdering',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateMenuOrderingRequest) =>
      Buffer.from(UpdateMenuOrderingRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      UpdateMenuOrderingRequest.decode(value),
    responseSerialize: (value: UpdateMenuOrderingResponse) =>
      Buffer.from(UpdateMenuOrderingResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      UpdateMenuOrderingResponse.decode(value),
  },
  deleteMenu: {
    path: '/admin.AdminMenuService/DeleteMenu',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteMenuRequest) =>
      Buffer.from(DeleteMenuRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteMenuRequest.decode(value),
    responseSerialize: (value: DeleteMenuResponse) =>
      Buffer.from(DeleteMenuResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteMenuResponse.decode(value),
  },
} as const;

export interface AdminMenuServiceServer extends UntypedServiceImplementation {
  getMenuList: handleUnaryCall<GetMenuListRequest, GetMenuListResponse>;
  getLastDepthMenuList: handleUnaryCall<
    GetLastDepthMenuListRequest,
    GetLastDepthMenuListResponse
  >;
  createMenu: handleUnaryCall<CreateMenuRequest, CreateMenuResponse>;
  updateMenu: handleUnaryCall<UpdateMenuRequest, UpdateMenuResponse>;
  updateMenuOrdering: handleUnaryCall<
    UpdateMenuOrderingRequest,
    UpdateMenuOrderingResponse
  >;
  deleteMenu: handleUnaryCall<DeleteMenuRequest, DeleteMenuResponse>;
}

export interface AdminMenuServiceClient extends Client {
  getMenuList(
    request: GetMenuListRequest,
    callback: (
      error: ServiceError | null,
      response: GetMenuListResponse,
    ) => void,
  ): ClientUnaryCall;
  getMenuList(
    request: GetMenuListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetMenuListResponse,
    ) => void,
  ): ClientUnaryCall;
  getMenuList(
    request: GetMenuListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetMenuListResponse,
    ) => void,
  ): ClientUnaryCall;
  getLastDepthMenuList(
    request: GetLastDepthMenuListRequest,
    callback: (
      error: ServiceError | null,
      response: GetLastDepthMenuListResponse,
    ) => void,
  ): ClientUnaryCall;
  getLastDepthMenuList(
    request: GetLastDepthMenuListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetLastDepthMenuListResponse,
    ) => void,
  ): ClientUnaryCall;
  getLastDepthMenuList(
    request: GetLastDepthMenuListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetLastDepthMenuListResponse,
    ) => void,
  ): ClientUnaryCall;
  createMenu(
    request: CreateMenuRequest,
    callback: (
      error: ServiceError | null,
      response: CreateMenuResponse,
    ) => void,
  ): ClientUnaryCall;
  createMenu(
    request: CreateMenuRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: CreateMenuResponse,
    ) => void,
  ): ClientUnaryCall;
  createMenu(
    request: CreateMenuRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: CreateMenuResponse,
    ) => void,
  ): ClientUnaryCall;
  updateMenu(
    request: UpdateMenuRequest,
    callback: (
      error: ServiceError | null,
      response: UpdateMenuResponse,
    ) => void,
  ): ClientUnaryCall;
  updateMenu(
    request: UpdateMenuRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: UpdateMenuResponse,
    ) => void,
  ): ClientUnaryCall;
  updateMenu(
    request: UpdateMenuRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: UpdateMenuResponse,
    ) => void,
  ): ClientUnaryCall;
  updateMenuOrdering(
    request: UpdateMenuOrderingRequest,
    callback: (
      error: ServiceError | null,
      response: UpdateMenuOrderingResponse,
    ) => void,
  ): ClientUnaryCall;
  updateMenuOrdering(
    request: UpdateMenuOrderingRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: UpdateMenuOrderingResponse,
    ) => void,
  ): ClientUnaryCall;
  updateMenuOrdering(
    request: UpdateMenuOrderingRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: UpdateMenuOrderingResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteMenu(
    request: DeleteMenuRequest,
    callback: (
      error: ServiceError | null,
      response: DeleteMenuResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteMenu(
    request: DeleteMenuRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: DeleteMenuResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteMenu(
    request: DeleteMenuRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: DeleteMenuResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const AdminMenuServiceClient = makeGenericClientConstructor(
  AdminMenuServiceService,
  'admin.AdminMenuService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): AdminMenuServiceClient;
  service: typeof AdminMenuServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
