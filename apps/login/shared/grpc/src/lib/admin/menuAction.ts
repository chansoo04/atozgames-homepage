// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: menuAction.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';
import { MenuAction } from './admin-common';

export const protobufPackage = 'admin';

export interface GetMenuActionListRequest {
  page: number;
  countPerPage: number;
  /** 메뉴 ID (varchar: 5) */
  menuId: string;
}

export interface GetMenuActionListResponse {
  success: boolean;
  errorMessage: string;
  menuActionList: MenuAction[];
}

export interface CreateMenuActionRequest {
  /** 메뉴 ID (varchar: 5) */
  menuId: string;
  /** 메뉴 액션 ID (varchar: 5) */
  menuActionId: string;
  /** 메뉴 액션 이름 */
  name: string;
  /** 메뉴 액션 URL */
  url: string;
  /** 메뉴 액션 활성화 여부 */
  isActive: boolean;
}

export interface CreateMenuActionResponse {
  success: boolean;
  errorMessage: string;
}

export interface UpdateMenuActionRequest {
  /** 메뉴 ID (varchar: 5) */
  menuId: string;
  /** 메뉴 액션 ID (varchar: 5) */
  menuActionId: string;
  /** 메뉴 액션 이름 */
  name: string;
  /** 메뉴 액션 URL */
  url: string;
  /** 메뉴 액션 활성화 여부 */
  isActive: boolean;
}

export interface UpdateMenuActionResponse {
  success: boolean;
  errorMessage: string;
}

export interface UpdateMenuActionOrderingRequest {
  /** 메뉴 ID (varchar: 5) */
  menuId: string;
  /** 메뉴 액션 ID 리스트 */
  menuActionIdList: string;
}

export interface UpdateMenuActionOrderingResponse {
  success: boolean;
  errorMessage: string;
}

export interface DeleteMenuActionRequest {
  /** 메뉴 ID (varchar: 5) */
  menuId: string;
  /** 메뉴 액션 ID (varchar: 5) */
  menuActionId: string;
}

export interface DeleteMenuActionResponse {
  success: boolean;
  errorMessage: string;
}

function createBaseGetMenuActionListRequest(): GetMenuActionListRequest {
  return { page: 0, countPerPage: 0, menuId: '' };
}

export const GetMenuActionListRequest = {
  encode(
    message: GetMenuActionListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.countPerPage !== 0) {
      writer.uint32(16).int32(message.countPerPage);
    }
    if (message.menuId !== '') {
      writer.uint32(26).string(message.menuId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetMenuActionListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMenuActionListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.countPerPage = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.menuId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMenuActionListRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      countPerPage: isSet(object.countPerPage)
        ? globalThis.Number(object.countPerPage)
        : 0,
      menuId: isSet(object.menuId) ? globalThis.String(object.menuId) : '',
    };
  },

  toJSON(message: GetMenuActionListRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.countPerPage !== 0) {
      obj.countPerPage = Math.round(message.countPerPage);
    }
    if (message.menuId !== '') {
      obj.menuId = message.menuId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMenuActionListRequest>, I>>(
    base?: I,
  ): GetMenuActionListRequest {
    return GetMenuActionListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMenuActionListRequest>, I>>(
    object: I,
  ): GetMenuActionListRequest {
    const message = createBaseGetMenuActionListRequest();
    message.page = object.page ?? 0;
    message.countPerPage = object.countPerPage ?? 0;
    message.menuId = object.menuId ?? '';
    return message;
  },
};

function createBaseGetMenuActionListResponse(): GetMenuActionListResponse {
  return { success: false, errorMessage: '', menuActionList: [] };
}

export const GetMenuActionListResponse = {
  encode(
    message: GetMenuActionListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.menuActionList) {
      MenuAction.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetMenuActionListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMenuActionListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.menuActionList.push(
            MenuAction.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMenuActionListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      menuActionList: globalThis.Array.isArray(object?.menuActionList)
        ? object.menuActionList.map((e: any) => MenuAction.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetMenuActionListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.menuActionList?.length) {
      obj.menuActionList = message.menuActionList.map(e =>
        MenuAction.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMenuActionListResponse>, I>>(
    base?: I,
  ): GetMenuActionListResponse {
    return GetMenuActionListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMenuActionListResponse>, I>>(
    object: I,
  ): GetMenuActionListResponse {
    const message = createBaseGetMenuActionListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.menuActionList =
      object.menuActionList?.map(e => MenuAction.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateMenuActionRequest(): CreateMenuActionRequest {
  return { menuId: '', menuActionId: '', name: '', url: '', isActive: false };
}

export const CreateMenuActionRequest = {
  encode(
    message: CreateMenuActionRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.menuId !== '') {
      writer.uint32(10).string(message.menuId);
    }
    if (message.menuActionId !== '') {
      writer.uint32(18).string(message.menuActionId);
    }
    if (message.name !== '') {
      writer.uint32(26).string(message.name);
    }
    if (message.url !== '') {
      writer.uint32(34).string(message.url);
    }
    if (message.isActive !== false) {
      writer.uint32(40).bool(message.isActive);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateMenuActionRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMenuActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.menuId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.menuActionId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.url = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMenuActionRequest {
    return {
      menuId: isSet(object.menuId) ? globalThis.String(object.menuId) : '',
      menuActionId: isSet(object.menuActionId)
        ? globalThis.String(object.menuActionId)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      url: isSet(object.url) ? globalThis.String(object.url) : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: CreateMenuActionRequest): unknown {
    const obj: any = {};
    if (message.menuId !== '') {
      obj.menuId = message.menuId;
    }
    if (message.menuActionId !== '') {
      obj.menuActionId = message.menuActionId;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.url !== '') {
      obj.url = message.url;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateMenuActionRequest>, I>>(
    base?: I,
  ): CreateMenuActionRequest {
    return CreateMenuActionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateMenuActionRequest>, I>>(
    object: I,
  ): CreateMenuActionRequest {
    const message = createBaseCreateMenuActionRequest();
    message.menuId = object.menuId ?? '';
    message.menuActionId = object.menuActionId ?? '';
    message.name = object.name ?? '';
    message.url = object.url ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseCreateMenuActionResponse(): CreateMenuActionResponse {
  return { success: false, errorMessage: '' };
}

export const CreateMenuActionResponse = {
  encode(
    message: CreateMenuActionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateMenuActionResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMenuActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMenuActionResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: CreateMenuActionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateMenuActionResponse>, I>>(
    base?: I,
  ): CreateMenuActionResponse {
    return CreateMenuActionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateMenuActionResponse>, I>>(
    object: I,
  ): CreateMenuActionResponse {
    const message = createBaseCreateMenuActionResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseUpdateMenuActionRequest(): UpdateMenuActionRequest {
  return { menuId: '', menuActionId: '', name: '', url: '', isActive: false };
}

export const UpdateMenuActionRequest = {
  encode(
    message: UpdateMenuActionRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.menuId !== '') {
      writer.uint32(10).string(message.menuId);
    }
    if (message.menuActionId !== '') {
      writer.uint32(18).string(message.menuActionId);
    }
    if (message.name !== '') {
      writer.uint32(26).string(message.name);
    }
    if (message.url !== '') {
      writer.uint32(34).string(message.url);
    }
    if (message.isActive !== false) {
      writer.uint32(40).bool(message.isActive);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateMenuActionRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMenuActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.menuId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.menuActionId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.url = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMenuActionRequest {
    return {
      menuId: isSet(object.menuId) ? globalThis.String(object.menuId) : '',
      menuActionId: isSet(object.menuActionId)
        ? globalThis.String(object.menuActionId)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      url: isSet(object.url) ? globalThis.String(object.url) : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: UpdateMenuActionRequest): unknown {
    const obj: any = {};
    if (message.menuId !== '') {
      obj.menuId = message.menuId;
    }
    if (message.menuActionId !== '') {
      obj.menuActionId = message.menuActionId;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.url !== '') {
      obj.url = message.url;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateMenuActionRequest>, I>>(
    base?: I,
  ): UpdateMenuActionRequest {
    return UpdateMenuActionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateMenuActionRequest>, I>>(
    object: I,
  ): UpdateMenuActionRequest {
    const message = createBaseUpdateMenuActionRequest();
    message.menuId = object.menuId ?? '';
    message.menuActionId = object.menuActionId ?? '';
    message.name = object.name ?? '';
    message.url = object.url ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseUpdateMenuActionResponse(): UpdateMenuActionResponse {
  return { success: false, errorMessage: '' };
}

export const UpdateMenuActionResponse = {
  encode(
    message: UpdateMenuActionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateMenuActionResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMenuActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMenuActionResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: UpdateMenuActionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateMenuActionResponse>, I>>(
    base?: I,
  ): UpdateMenuActionResponse {
    return UpdateMenuActionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateMenuActionResponse>, I>>(
    object: I,
  ): UpdateMenuActionResponse {
    const message = createBaseUpdateMenuActionResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseUpdateMenuActionOrderingRequest(): UpdateMenuActionOrderingRequest {
  return { menuId: '', menuActionIdList: '' };
}

export const UpdateMenuActionOrderingRequest = {
  encode(
    message: UpdateMenuActionOrderingRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.menuId !== '') {
      writer.uint32(10).string(message.menuId);
    }
    if (message.menuActionIdList !== '') {
      writer.uint32(18).string(message.menuActionIdList);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateMenuActionOrderingRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMenuActionOrderingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.menuId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.menuActionIdList = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMenuActionOrderingRequest {
    return {
      menuId: isSet(object.menuId) ? globalThis.String(object.menuId) : '',
      menuActionIdList: isSet(object.menuActionIdList)
        ? globalThis.String(object.menuActionIdList)
        : '',
    };
  },

  toJSON(message: UpdateMenuActionOrderingRequest): unknown {
    const obj: any = {};
    if (message.menuId !== '') {
      obj.menuId = message.menuId;
    }
    if (message.menuActionIdList !== '') {
      obj.menuActionIdList = message.menuActionIdList;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateMenuActionOrderingRequest>, I>>(
    base?: I,
  ): UpdateMenuActionOrderingRequest {
    return UpdateMenuActionOrderingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateMenuActionOrderingRequest>, I>>(
    object: I,
  ): UpdateMenuActionOrderingRequest {
    const message = createBaseUpdateMenuActionOrderingRequest();
    message.menuId = object.menuId ?? '';
    message.menuActionIdList = object.menuActionIdList ?? '';
    return message;
  },
};

function createBaseUpdateMenuActionOrderingResponse(): UpdateMenuActionOrderingResponse {
  return { success: false, errorMessage: '' };
}

export const UpdateMenuActionOrderingResponse = {
  encode(
    message: UpdateMenuActionOrderingResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateMenuActionOrderingResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMenuActionOrderingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMenuActionOrderingResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: UpdateMenuActionOrderingResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateMenuActionOrderingResponse>, I>>(
    base?: I,
  ): UpdateMenuActionOrderingResponse {
    return UpdateMenuActionOrderingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<UpdateMenuActionOrderingResponse>, I>,
  >(object: I): UpdateMenuActionOrderingResponse {
    const message = createBaseUpdateMenuActionOrderingResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseDeleteMenuActionRequest(): DeleteMenuActionRequest {
  return { menuId: '', menuActionId: '' };
}

export const DeleteMenuActionRequest = {
  encode(
    message: DeleteMenuActionRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.menuId !== '') {
      writer.uint32(10).string(message.menuId);
    }
    if (message.menuActionId !== '') {
      writer.uint32(18).string(message.menuActionId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteMenuActionRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMenuActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.menuId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.menuActionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMenuActionRequest {
    return {
      menuId: isSet(object.menuId) ? globalThis.String(object.menuId) : '',
      menuActionId: isSet(object.menuActionId)
        ? globalThis.String(object.menuActionId)
        : '',
    };
  },

  toJSON(message: DeleteMenuActionRequest): unknown {
    const obj: any = {};
    if (message.menuId !== '') {
      obj.menuId = message.menuId;
    }
    if (message.menuActionId !== '') {
      obj.menuActionId = message.menuActionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteMenuActionRequest>, I>>(
    base?: I,
  ): DeleteMenuActionRequest {
    return DeleteMenuActionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteMenuActionRequest>, I>>(
    object: I,
  ): DeleteMenuActionRequest {
    const message = createBaseDeleteMenuActionRequest();
    message.menuId = object.menuId ?? '';
    message.menuActionId = object.menuActionId ?? '';
    return message;
  },
};

function createBaseDeleteMenuActionResponse(): DeleteMenuActionResponse {
  return { success: false, errorMessage: '' };
}

export const DeleteMenuActionResponse = {
  encode(
    message: DeleteMenuActionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteMenuActionResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMenuActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMenuActionResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: DeleteMenuActionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteMenuActionResponse>, I>>(
    base?: I,
  ): DeleteMenuActionResponse {
    return DeleteMenuActionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteMenuActionResponse>, I>>(
    object: I,
  ): DeleteMenuActionResponse {
    const message = createBaseDeleteMenuActionResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

export type AdminMenuActionServiceService =
  typeof AdminMenuActionServiceService;
export const AdminMenuActionServiceService = {
  getMenuActionList: {
    path: '/admin.AdminMenuActionService/GetMenuActionList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetMenuActionListRequest) =>
      Buffer.from(GetMenuActionListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      GetMenuActionListRequest.decode(value),
    responseSerialize: (value: GetMenuActionListResponse) =>
      Buffer.from(GetMenuActionListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetMenuActionListResponse.decode(value),
  },
  createMenuAction: {
    path: '/admin.AdminMenuActionService/CreateMenuAction',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateMenuActionRequest) =>
      Buffer.from(CreateMenuActionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      CreateMenuActionRequest.decode(value),
    responseSerialize: (value: CreateMenuActionResponse) =>
      Buffer.from(CreateMenuActionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      CreateMenuActionResponse.decode(value),
  },
  updateMenuAction: {
    path: '/admin.AdminMenuActionService/UpdateMenuAction',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateMenuActionRequest) =>
      Buffer.from(UpdateMenuActionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      UpdateMenuActionRequest.decode(value),
    responseSerialize: (value: UpdateMenuActionResponse) =>
      Buffer.from(UpdateMenuActionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      UpdateMenuActionResponse.decode(value),
  },
  updateMenuActionOrdering: {
    path: '/admin.AdminMenuActionService/UpdateMenuActionOrdering',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateMenuActionOrderingRequest) =>
      Buffer.from(UpdateMenuActionOrderingRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      UpdateMenuActionOrderingRequest.decode(value),
    responseSerialize: (value: UpdateMenuActionOrderingResponse) =>
      Buffer.from(UpdateMenuActionOrderingResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      UpdateMenuActionOrderingResponse.decode(value),
  },
  deleteMenuAction: {
    path: '/admin.AdminMenuActionService/DeleteMenuAction',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteMenuActionRequest) =>
      Buffer.from(DeleteMenuActionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      DeleteMenuActionRequest.decode(value),
    responseSerialize: (value: DeleteMenuActionResponse) =>
      Buffer.from(DeleteMenuActionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      DeleteMenuActionResponse.decode(value),
  },
} as const;

export interface AdminMenuActionServiceServer
  extends UntypedServiceImplementation {
  getMenuActionList: handleUnaryCall<
    GetMenuActionListRequest,
    GetMenuActionListResponse
  >;
  createMenuAction: handleUnaryCall<
    CreateMenuActionRequest,
    CreateMenuActionResponse
  >;
  updateMenuAction: handleUnaryCall<
    UpdateMenuActionRequest,
    UpdateMenuActionResponse
  >;
  updateMenuActionOrdering: handleUnaryCall<
    UpdateMenuActionOrderingRequest,
    UpdateMenuActionOrderingResponse
  >;
  deleteMenuAction: handleUnaryCall<
    DeleteMenuActionRequest,
    DeleteMenuActionResponse
  >;
}

export interface AdminMenuActionServiceClient extends Client {
  getMenuActionList(
    request: GetMenuActionListRequest,
    callback: (
      error: ServiceError | null,
      response: GetMenuActionListResponse,
    ) => void,
  ): ClientUnaryCall;
  getMenuActionList(
    request: GetMenuActionListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetMenuActionListResponse,
    ) => void,
  ): ClientUnaryCall;
  getMenuActionList(
    request: GetMenuActionListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetMenuActionListResponse,
    ) => void,
  ): ClientUnaryCall;
  createMenuAction(
    request: CreateMenuActionRequest,
    callback: (
      error: ServiceError | null,
      response: CreateMenuActionResponse,
    ) => void,
  ): ClientUnaryCall;
  createMenuAction(
    request: CreateMenuActionRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: CreateMenuActionResponse,
    ) => void,
  ): ClientUnaryCall;
  createMenuAction(
    request: CreateMenuActionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: CreateMenuActionResponse,
    ) => void,
  ): ClientUnaryCall;
  updateMenuAction(
    request: UpdateMenuActionRequest,
    callback: (
      error: ServiceError | null,
      response: UpdateMenuActionResponse,
    ) => void,
  ): ClientUnaryCall;
  updateMenuAction(
    request: UpdateMenuActionRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: UpdateMenuActionResponse,
    ) => void,
  ): ClientUnaryCall;
  updateMenuAction(
    request: UpdateMenuActionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: UpdateMenuActionResponse,
    ) => void,
  ): ClientUnaryCall;
  updateMenuActionOrdering(
    request: UpdateMenuActionOrderingRequest,
    callback: (
      error: ServiceError | null,
      response: UpdateMenuActionOrderingResponse,
    ) => void,
  ): ClientUnaryCall;
  updateMenuActionOrdering(
    request: UpdateMenuActionOrderingRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: UpdateMenuActionOrderingResponse,
    ) => void,
  ): ClientUnaryCall;
  updateMenuActionOrdering(
    request: UpdateMenuActionOrderingRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: UpdateMenuActionOrderingResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteMenuAction(
    request: DeleteMenuActionRequest,
    callback: (
      error: ServiceError | null,
      response: DeleteMenuActionResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteMenuAction(
    request: DeleteMenuActionRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: DeleteMenuActionResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteMenuAction(
    request: DeleteMenuActionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: DeleteMenuActionResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const AdminMenuActionServiceClient = makeGenericClientConstructor(
  AdminMenuActionServiceService,
  'admin.AdminMenuActionService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): AdminMenuActionServiceClient;
  service: typeof AdminMenuActionServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
