// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: menuPrivacy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';
import { MenuPrivacy } from './admin-common';

export const protobufPackage = 'admin';

export interface GetMenuPrivacyListRequest {}

export interface GetMenuPrivacyListResponse {
  success: boolean;
  errorMessage: string;
  menuPrivacyList: MenuPrivacy[];
}

export interface CreateMenuPrivacyRequest {
  menuId: string;
  privacyTypeId: number;
}

export interface CreateMenuPrivacyResponse {
  success: boolean;
  errorMessage: string;
}

export interface DeleteMenuPrivacyRequest {
  menuId: string;
  privacyTypeId: number;
}

export interface DeleteMenuPrivacyResponse {
  success: boolean;
  errorMessage: string;
}

function createBaseGetMenuPrivacyListRequest(): GetMenuPrivacyListRequest {
  return {};
}

export const GetMenuPrivacyListRequest = {
  encode(
    _: GetMenuPrivacyListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetMenuPrivacyListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMenuPrivacyListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetMenuPrivacyListRequest {
    return {};
  },

  toJSON(_: GetMenuPrivacyListRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMenuPrivacyListRequest>, I>>(
    base?: I,
  ): GetMenuPrivacyListRequest {
    return GetMenuPrivacyListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMenuPrivacyListRequest>, I>>(
    _: I,
  ): GetMenuPrivacyListRequest {
    const message = createBaseGetMenuPrivacyListRequest();
    return message;
  },
};

function createBaseGetMenuPrivacyListResponse(): GetMenuPrivacyListResponse {
  return { success: false, errorMessage: '', menuPrivacyList: [] };
}

export const GetMenuPrivacyListResponse = {
  encode(
    message: GetMenuPrivacyListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.menuPrivacyList) {
      MenuPrivacy.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetMenuPrivacyListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMenuPrivacyListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.menuPrivacyList.push(
            MenuPrivacy.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMenuPrivacyListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      menuPrivacyList: globalThis.Array.isArray(object?.menuPrivacyList)
        ? object.menuPrivacyList.map((e: any) => MenuPrivacy.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetMenuPrivacyListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.menuPrivacyList?.length) {
      obj.menuPrivacyList = message.menuPrivacyList.map(e =>
        MenuPrivacy.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMenuPrivacyListResponse>, I>>(
    base?: I,
  ): GetMenuPrivacyListResponse {
    return GetMenuPrivacyListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMenuPrivacyListResponse>, I>>(
    object: I,
  ): GetMenuPrivacyListResponse {
    const message = createBaseGetMenuPrivacyListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.menuPrivacyList =
      object.menuPrivacyList?.map(e => MenuPrivacy.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateMenuPrivacyRequest(): CreateMenuPrivacyRequest {
  return { menuId: '', privacyTypeId: 0 };
}

export const CreateMenuPrivacyRequest = {
  encode(
    message: CreateMenuPrivacyRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.menuId !== '') {
      writer.uint32(10).string(message.menuId);
    }
    if (message.privacyTypeId !== 0) {
      writer.uint32(16).int32(message.privacyTypeId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateMenuPrivacyRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMenuPrivacyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.menuId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.privacyTypeId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMenuPrivacyRequest {
    return {
      menuId: isSet(object.menuId) ? globalThis.String(object.menuId) : '',
      privacyTypeId: isSet(object.privacyTypeId)
        ? globalThis.Number(object.privacyTypeId)
        : 0,
    };
  },

  toJSON(message: CreateMenuPrivacyRequest): unknown {
    const obj: any = {};
    if (message.menuId !== '') {
      obj.menuId = message.menuId;
    }
    if (message.privacyTypeId !== 0) {
      obj.privacyTypeId = Math.round(message.privacyTypeId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateMenuPrivacyRequest>, I>>(
    base?: I,
  ): CreateMenuPrivacyRequest {
    return CreateMenuPrivacyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateMenuPrivacyRequest>, I>>(
    object: I,
  ): CreateMenuPrivacyRequest {
    const message = createBaseCreateMenuPrivacyRequest();
    message.menuId = object.menuId ?? '';
    message.privacyTypeId = object.privacyTypeId ?? 0;
    return message;
  },
};

function createBaseCreateMenuPrivacyResponse(): CreateMenuPrivacyResponse {
  return { success: false, errorMessage: '' };
}

export const CreateMenuPrivacyResponse = {
  encode(
    message: CreateMenuPrivacyResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateMenuPrivacyResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateMenuPrivacyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateMenuPrivacyResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: CreateMenuPrivacyResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateMenuPrivacyResponse>, I>>(
    base?: I,
  ): CreateMenuPrivacyResponse {
    return CreateMenuPrivacyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateMenuPrivacyResponse>, I>>(
    object: I,
  ): CreateMenuPrivacyResponse {
    const message = createBaseCreateMenuPrivacyResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseDeleteMenuPrivacyRequest(): DeleteMenuPrivacyRequest {
  return { menuId: '', privacyTypeId: 0 };
}

export const DeleteMenuPrivacyRequest = {
  encode(
    message: DeleteMenuPrivacyRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.menuId !== '') {
      writer.uint32(10).string(message.menuId);
    }
    if (message.privacyTypeId !== 0) {
      writer.uint32(16).int32(message.privacyTypeId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteMenuPrivacyRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMenuPrivacyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.menuId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.privacyTypeId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMenuPrivacyRequest {
    return {
      menuId: isSet(object.menuId) ? globalThis.String(object.menuId) : '',
      privacyTypeId: isSet(object.privacyTypeId)
        ? globalThis.Number(object.privacyTypeId)
        : 0,
    };
  },

  toJSON(message: DeleteMenuPrivacyRequest): unknown {
    const obj: any = {};
    if (message.menuId !== '') {
      obj.menuId = message.menuId;
    }
    if (message.privacyTypeId !== 0) {
      obj.privacyTypeId = Math.round(message.privacyTypeId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteMenuPrivacyRequest>, I>>(
    base?: I,
  ): DeleteMenuPrivacyRequest {
    return DeleteMenuPrivacyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteMenuPrivacyRequest>, I>>(
    object: I,
  ): DeleteMenuPrivacyRequest {
    const message = createBaseDeleteMenuPrivacyRequest();
    message.menuId = object.menuId ?? '';
    message.privacyTypeId = object.privacyTypeId ?? 0;
    return message;
  },
};

function createBaseDeleteMenuPrivacyResponse(): DeleteMenuPrivacyResponse {
  return { success: false, errorMessage: '' };
}

export const DeleteMenuPrivacyResponse = {
  encode(
    message: DeleteMenuPrivacyResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteMenuPrivacyResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMenuPrivacyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMenuPrivacyResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: DeleteMenuPrivacyResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteMenuPrivacyResponse>, I>>(
    base?: I,
  ): DeleteMenuPrivacyResponse {
    return DeleteMenuPrivacyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteMenuPrivacyResponse>, I>>(
    object: I,
  ): DeleteMenuPrivacyResponse {
    const message = createBaseDeleteMenuPrivacyResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

export type AdminMenuPrivacyServiceService =
  typeof AdminMenuPrivacyServiceService;
export const AdminMenuPrivacyServiceService = {
  getMenuPrivacyList: {
    path: '/admin.AdminMenuPrivacyService/GetMenuPrivacyList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetMenuPrivacyListRequest) =>
      Buffer.from(GetMenuPrivacyListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      GetMenuPrivacyListRequest.decode(value),
    responseSerialize: (value: GetMenuPrivacyListResponse) =>
      Buffer.from(GetMenuPrivacyListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetMenuPrivacyListResponse.decode(value),
  },
  createMenuPrivacy: {
    path: '/admin.AdminMenuPrivacyService/CreateMenuPrivacy',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateMenuPrivacyRequest) =>
      Buffer.from(CreateMenuPrivacyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      CreateMenuPrivacyRequest.decode(value),
    responseSerialize: (value: CreateMenuPrivacyResponse) =>
      Buffer.from(CreateMenuPrivacyResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      CreateMenuPrivacyResponse.decode(value),
  },
  deleteMenuPrivacy: {
    path: '/admin.AdminMenuPrivacyService/DeleteMenuPrivacy',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteMenuPrivacyRequest) =>
      Buffer.from(DeleteMenuPrivacyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      DeleteMenuPrivacyRequest.decode(value),
    responseSerialize: (value: DeleteMenuPrivacyResponse) =>
      Buffer.from(DeleteMenuPrivacyResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      DeleteMenuPrivacyResponse.decode(value),
  },
} as const;

export interface AdminMenuPrivacyServiceServer
  extends UntypedServiceImplementation {
  getMenuPrivacyList: handleUnaryCall<
    GetMenuPrivacyListRequest,
    GetMenuPrivacyListResponse
  >;
  createMenuPrivacy: handleUnaryCall<
    CreateMenuPrivacyRequest,
    CreateMenuPrivacyResponse
  >;
  deleteMenuPrivacy: handleUnaryCall<
    DeleteMenuPrivacyRequest,
    DeleteMenuPrivacyResponse
  >;
}

export interface AdminMenuPrivacyServiceClient extends Client {
  getMenuPrivacyList(
    request: GetMenuPrivacyListRequest,
    callback: (
      error: ServiceError | null,
      response: GetMenuPrivacyListResponse,
    ) => void,
  ): ClientUnaryCall;
  getMenuPrivacyList(
    request: GetMenuPrivacyListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetMenuPrivacyListResponse,
    ) => void,
  ): ClientUnaryCall;
  getMenuPrivacyList(
    request: GetMenuPrivacyListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetMenuPrivacyListResponse,
    ) => void,
  ): ClientUnaryCall;
  createMenuPrivacy(
    request: CreateMenuPrivacyRequest,
    callback: (
      error: ServiceError | null,
      response: CreateMenuPrivacyResponse,
    ) => void,
  ): ClientUnaryCall;
  createMenuPrivacy(
    request: CreateMenuPrivacyRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: CreateMenuPrivacyResponse,
    ) => void,
  ): ClientUnaryCall;
  createMenuPrivacy(
    request: CreateMenuPrivacyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: CreateMenuPrivacyResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteMenuPrivacy(
    request: DeleteMenuPrivacyRequest,
    callback: (
      error: ServiceError | null,
      response: DeleteMenuPrivacyResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteMenuPrivacy(
    request: DeleteMenuPrivacyRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: DeleteMenuPrivacyResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteMenuPrivacy(
    request: DeleteMenuPrivacyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: DeleteMenuPrivacyResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const AdminMenuPrivacyServiceClient = makeGenericClientConstructor(
  AdminMenuPrivacyServiceService,
  'admin.AdminMenuPrivacyService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): AdminMenuPrivacyServiceClient;
  service: typeof AdminMenuPrivacyServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
