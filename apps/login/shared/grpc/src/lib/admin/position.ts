// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: position.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';
import { Position } from './admin-common';

export const protobufPackage = 'admin';

export interface GetPositionListRequest {}

export interface GetPositionListResponse {
  success: boolean;
  errorMessage: string;
  positionList: Position[];
}

export interface CreatePositionRequest {
  code: string;
  name: string;
  description: string;
  isActive: boolean;
}

export interface CreatePositionResponse {
  success: boolean;
  errorMessage: string;
}

export interface UpdatePositionRequest {
  positionId: number;
  code: string;
  name: string;
  description: string;
  isActive: boolean;
}

export interface UpdatePositionResponse {
  success: boolean;
  errorMessage: string;
}

export interface DeletePositionRequest {
  positionId: number;
}

export interface DeletePositionResponse {
  success: boolean;
  errorMessage: string;
}

function createBaseGetPositionListRequest(): GetPositionListRequest {
  return {};
}

export const GetPositionListRequest = {
  encode(
    _: GetPositionListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetPositionListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPositionListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPositionListRequest {
    return {};
  },

  toJSON(_: GetPositionListRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPositionListRequest>, I>>(
    base?: I,
  ): GetPositionListRequest {
    return GetPositionListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPositionListRequest>, I>>(
    _: I,
  ): GetPositionListRequest {
    const message = createBaseGetPositionListRequest();
    return message;
  },
};

function createBaseGetPositionListResponse(): GetPositionListResponse {
  return { success: false, errorMessage: '', positionList: [] };
}

export const GetPositionListResponse = {
  encode(
    message: GetPositionListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.positionList) {
      Position.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetPositionListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPositionListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.positionList.push(Position.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPositionListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      positionList: globalThis.Array.isArray(object?.positionList)
        ? object.positionList.map((e: any) => Position.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetPositionListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.positionList?.length) {
      obj.positionList = message.positionList.map(e => Position.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPositionListResponse>, I>>(
    base?: I,
  ): GetPositionListResponse {
    return GetPositionListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPositionListResponse>, I>>(
    object: I,
  ): GetPositionListResponse {
    const message = createBaseGetPositionListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.positionList =
      object.positionList?.map(e => Position.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreatePositionRequest(): CreatePositionRequest {
  return { code: '', name: '', description: '', isActive: false };
}

export const CreatePositionRequest = {
  encode(
    message: CreatePositionRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.code !== '') {
      writer.uint32(10).string(message.code);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(26).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreatePositionRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePositionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePositionRequest {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: CreatePositionRequest): unknown {
    const obj: any = {};
    if (message.code !== '') {
      obj.code = message.code;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePositionRequest>, I>>(
    base?: I,
  ): CreatePositionRequest {
    return CreatePositionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePositionRequest>, I>>(
    object: I,
  ): CreatePositionRequest {
    const message = createBaseCreatePositionRequest();
    message.code = object.code ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseCreatePositionResponse(): CreatePositionResponse {
  return { success: false, errorMessage: '' };
}

export const CreatePositionResponse = {
  encode(
    message: CreatePositionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreatePositionResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePositionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePositionResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: CreatePositionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePositionResponse>, I>>(
    base?: I,
  ): CreatePositionResponse {
    return CreatePositionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePositionResponse>, I>>(
    object: I,
  ): CreatePositionResponse {
    const message = createBaseCreatePositionResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseUpdatePositionRequest(): UpdatePositionRequest {
  return {
    positionId: 0,
    code: '',
    name: '',
    description: '',
    isActive: false,
  };
}

export const UpdatePositionRequest = {
  encode(
    message: UpdatePositionRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.positionId !== 0) {
      writer.uint32(8).int32(message.positionId);
    }
    if (message.code !== '') {
      writer.uint32(18).string(message.code);
    }
    if (message.name !== '') {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(34).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(40).bool(message.isActive);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdatePositionRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePositionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.positionId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePositionRequest {
    return {
      positionId: isSet(object.positionId)
        ? globalThis.Number(object.positionId)
        : 0,
      code: isSet(object.code) ? globalThis.String(object.code) : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: UpdatePositionRequest): unknown {
    const obj: any = {};
    if (message.positionId !== 0) {
      obj.positionId = Math.round(message.positionId);
    }
    if (message.code !== '') {
      obj.code = message.code;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePositionRequest>, I>>(
    base?: I,
  ): UpdatePositionRequest {
    return UpdatePositionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePositionRequest>, I>>(
    object: I,
  ): UpdatePositionRequest {
    const message = createBaseUpdatePositionRequest();
    message.positionId = object.positionId ?? 0;
    message.code = object.code ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseUpdatePositionResponse(): UpdatePositionResponse {
  return { success: false, errorMessage: '' };
}

export const UpdatePositionResponse = {
  encode(
    message: UpdatePositionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdatePositionResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePositionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePositionResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: UpdatePositionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePositionResponse>, I>>(
    base?: I,
  ): UpdatePositionResponse {
    return UpdatePositionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePositionResponse>, I>>(
    object: I,
  ): UpdatePositionResponse {
    const message = createBaseUpdatePositionResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseDeletePositionRequest(): DeletePositionRequest {
  return { positionId: 0 };
}

export const DeletePositionRequest = {
  encode(
    message: DeletePositionRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.positionId !== 0) {
      writer.uint32(8).int32(message.positionId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeletePositionRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePositionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.positionId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePositionRequest {
    return {
      positionId: isSet(object.positionId)
        ? globalThis.Number(object.positionId)
        : 0,
    };
  },

  toJSON(message: DeletePositionRequest): unknown {
    const obj: any = {};
    if (message.positionId !== 0) {
      obj.positionId = Math.round(message.positionId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeletePositionRequest>, I>>(
    base?: I,
  ): DeletePositionRequest {
    return DeletePositionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeletePositionRequest>, I>>(
    object: I,
  ): DeletePositionRequest {
    const message = createBaseDeletePositionRequest();
    message.positionId = object.positionId ?? 0;
    return message;
  },
};

function createBaseDeletePositionResponse(): DeletePositionResponse {
  return { success: false, errorMessage: '' };
}

export const DeletePositionResponse = {
  encode(
    message: DeletePositionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeletePositionResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePositionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePositionResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: DeletePositionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeletePositionResponse>, I>>(
    base?: I,
  ): DeletePositionResponse {
    return DeletePositionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeletePositionResponse>, I>>(
    object: I,
  ): DeletePositionResponse {
    const message = createBaseDeletePositionResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

export type AdminPositionServiceService = typeof AdminPositionServiceService;
export const AdminPositionServiceService = {
  getPositionList: {
    path: '/admin.AdminPositionService/GetPositionList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetPositionListRequest) =>
      Buffer.from(GetPositionListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetPositionListRequest.decode(value),
    responseSerialize: (value: GetPositionListResponse) =>
      Buffer.from(GetPositionListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetPositionListResponse.decode(value),
  },
  createPosition: {
    path: '/admin.AdminPositionService/CreatePosition',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreatePositionRequest) =>
      Buffer.from(CreatePositionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreatePositionRequest.decode(value),
    responseSerialize: (value: CreatePositionResponse) =>
      Buffer.from(CreatePositionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      CreatePositionResponse.decode(value),
  },
  updatePosition: {
    path: '/admin.AdminPositionService/UpdatePosition',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdatePositionRequest) =>
      Buffer.from(UpdatePositionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdatePositionRequest.decode(value),
    responseSerialize: (value: UpdatePositionResponse) =>
      Buffer.from(UpdatePositionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      UpdatePositionResponse.decode(value),
  },
  deletePosition: {
    path: '/admin.AdminPositionService/DeletePosition',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeletePositionRequest) =>
      Buffer.from(DeletePositionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeletePositionRequest.decode(value),
    responseSerialize: (value: DeletePositionResponse) =>
      Buffer.from(DeletePositionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      DeletePositionResponse.decode(value),
  },
} as const;

export interface AdminPositionServiceServer
  extends UntypedServiceImplementation {
  getPositionList: handleUnaryCall<
    GetPositionListRequest,
    GetPositionListResponse
  >;
  createPosition: handleUnaryCall<
    CreatePositionRequest,
    CreatePositionResponse
  >;
  updatePosition: handleUnaryCall<
    UpdatePositionRequest,
    UpdatePositionResponse
  >;
  deletePosition: handleUnaryCall<
    DeletePositionRequest,
    DeletePositionResponse
  >;
}

export interface AdminPositionServiceClient extends Client {
  getPositionList(
    request: GetPositionListRequest,
    callback: (
      error: ServiceError | null,
      response: GetPositionListResponse,
    ) => void,
  ): ClientUnaryCall;
  getPositionList(
    request: GetPositionListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetPositionListResponse,
    ) => void,
  ): ClientUnaryCall;
  getPositionList(
    request: GetPositionListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetPositionListResponse,
    ) => void,
  ): ClientUnaryCall;
  createPosition(
    request: CreatePositionRequest,
    callback: (
      error: ServiceError | null,
      response: CreatePositionResponse,
    ) => void,
  ): ClientUnaryCall;
  createPosition(
    request: CreatePositionRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: CreatePositionResponse,
    ) => void,
  ): ClientUnaryCall;
  createPosition(
    request: CreatePositionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: CreatePositionResponse,
    ) => void,
  ): ClientUnaryCall;
  updatePosition(
    request: UpdatePositionRequest,
    callback: (
      error: ServiceError | null,
      response: UpdatePositionResponse,
    ) => void,
  ): ClientUnaryCall;
  updatePosition(
    request: UpdatePositionRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: UpdatePositionResponse,
    ) => void,
  ): ClientUnaryCall;
  updatePosition(
    request: UpdatePositionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: UpdatePositionResponse,
    ) => void,
  ): ClientUnaryCall;
  deletePosition(
    request: DeletePositionRequest,
    callback: (
      error: ServiceError | null,
      response: DeletePositionResponse,
    ) => void,
  ): ClientUnaryCall;
  deletePosition(
    request: DeletePositionRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: DeletePositionResponse,
    ) => void,
  ): ClientUnaryCall;
  deletePosition(
    request: DeletePositionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: DeletePositionResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const AdminPositionServiceClient = makeGenericClientConstructor(
  AdminPositionServiceService,
  'admin.AdminPositionService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): AdminPositionServiceClient;
  service: typeof AdminPositionServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
