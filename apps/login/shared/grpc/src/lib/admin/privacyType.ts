// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: privacyType.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';
import { PrivacyType } from './admin-common';

export const protobufPackage = 'admin';

export interface GetPrivacyTypeListRequest {}

export interface GetPrivacyTypeListResponse {
  success: boolean;
  errorMessage: string;
  privacyTypeList: PrivacyType[];
}

export interface CreatePrivacyTypeRequest {
  name: string;
  description: string;
  isActive: boolean;
}

export interface CreatePrivacyTypeResponse {
  success: boolean;
  errorMessage: string;
}

export interface UpdatePrivacyTypeRequest {
  privacyTypeId: number;
  name: string;
  description: string;
  isActive: boolean;
}

export interface UpdatePrivacyTypeResponse {
  success: boolean;
  errorMessage: string;
}

export interface DeletePrivacyTypeRequest {
  privacyTypeId: number;
}

export interface DeletePrivacyTypeResponse {
  success: boolean;
  errorMessage: string;
}

function createBaseGetPrivacyTypeListRequest(): GetPrivacyTypeListRequest {
  return {};
}

export const GetPrivacyTypeListRequest = {
  encode(
    _: GetPrivacyTypeListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetPrivacyTypeListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPrivacyTypeListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetPrivacyTypeListRequest {
    return {};
  },

  toJSON(_: GetPrivacyTypeListRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPrivacyTypeListRequest>, I>>(
    base?: I,
  ): GetPrivacyTypeListRequest {
    return GetPrivacyTypeListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPrivacyTypeListRequest>, I>>(
    _: I,
  ): GetPrivacyTypeListRequest {
    const message = createBaseGetPrivacyTypeListRequest();
    return message;
  },
};

function createBaseGetPrivacyTypeListResponse(): GetPrivacyTypeListResponse {
  return { success: false, errorMessage: '', privacyTypeList: [] };
}

export const GetPrivacyTypeListResponse = {
  encode(
    message: GetPrivacyTypeListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.privacyTypeList) {
      PrivacyType.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetPrivacyTypeListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPrivacyTypeListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.privacyTypeList.push(
            PrivacyType.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPrivacyTypeListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      privacyTypeList: globalThis.Array.isArray(object?.privacyTypeList)
        ? object.privacyTypeList.map((e: any) => PrivacyType.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetPrivacyTypeListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.privacyTypeList?.length) {
      obj.privacyTypeList = message.privacyTypeList.map(e =>
        PrivacyType.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPrivacyTypeListResponse>, I>>(
    base?: I,
  ): GetPrivacyTypeListResponse {
    return GetPrivacyTypeListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPrivacyTypeListResponse>, I>>(
    object: I,
  ): GetPrivacyTypeListResponse {
    const message = createBaseGetPrivacyTypeListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.privacyTypeList =
      object.privacyTypeList?.map(e => PrivacyType.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreatePrivacyTypeRequest(): CreatePrivacyTypeRequest {
  return { name: '', description: '', isActive: false };
}

export const CreatePrivacyTypeRequest = {
  encode(
    message: CreatePrivacyTypeRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== '') {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(18).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(24).bool(message.isActive);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreatePrivacyTypeRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePrivacyTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePrivacyTypeRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: CreatePrivacyTypeRequest): unknown {
    const obj: any = {};
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePrivacyTypeRequest>, I>>(
    base?: I,
  ): CreatePrivacyTypeRequest {
    return CreatePrivacyTypeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePrivacyTypeRequest>, I>>(
    object: I,
  ): CreatePrivacyTypeRequest {
    const message = createBaseCreatePrivacyTypeRequest();
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseCreatePrivacyTypeResponse(): CreatePrivacyTypeResponse {
  return { success: false, errorMessage: '' };
}

export const CreatePrivacyTypeResponse = {
  encode(
    message: CreatePrivacyTypeResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreatePrivacyTypeResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePrivacyTypeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePrivacyTypeResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: CreatePrivacyTypeResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatePrivacyTypeResponse>, I>>(
    base?: I,
  ): CreatePrivacyTypeResponse {
    return CreatePrivacyTypeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatePrivacyTypeResponse>, I>>(
    object: I,
  ): CreatePrivacyTypeResponse {
    const message = createBaseCreatePrivacyTypeResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseUpdatePrivacyTypeRequest(): UpdatePrivacyTypeRequest {
  return { privacyTypeId: 0, name: '', description: '', isActive: false };
}

export const UpdatePrivacyTypeRequest = {
  encode(
    message: UpdatePrivacyTypeRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.privacyTypeId !== 0) {
      writer.uint32(8).int32(message.privacyTypeId);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(26).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdatePrivacyTypeRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePrivacyTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.privacyTypeId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePrivacyTypeRequest {
    return {
      privacyTypeId: isSet(object.privacyTypeId)
        ? globalThis.Number(object.privacyTypeId)
        : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: UpdatePrivacyTypeRequest): unknown {
    const obj: any = {};
    if (message.privacyTypeId !== 0) {
      obj.privacyTypeId = Math.round(message.privacyTypeId);
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePrivacyTypeRequest>, I>>(
    base?: I,
  ): UpdatePrivacyTypeRequest {
    return UpdatePrivacyTypeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePrivacyTypeRequest>, I>>(
    object: I,
  ): UpdatePrivacyTypeRequest {
    const message = createBaseUpdatePrivacyTypeRequest();
    message.privacyTypeId = object.privacyTypeId ?? 0;
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseUpdatePrivacyTypeResponse(): UpdatePrivacyTypeResponse {
  return { success: false, errorMessage: '' };
}

export const UpdatePrivacyTypeResponse = {
  encode(
    message: UpdatePrivacyTypeResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdatePrivacyTypeResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePrivacyTypeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePrivacyTypeResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: UpdatePrivacyTypeResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePrivacyTypeResponse>, I>>(
    base?: I,
  ): UpdatePrivacyTypeResponse {
    return UpdatePrivacyTypeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePrivacyTypeResponse>, I>>(
    object: I,
  ): UpdatePrivacyTypeResponse {
    const message = createBaseUpdatePrivacyTypeResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseDeletePrivacyTypeRequest(): DeletePrivacyTypeRequest {
  return { privacyTypeId: 0 };
}

export const DeletePrivacyTypeRequest = {
  encode(
    message: DeletePrivacyTypeRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.privacyTypeId !== 0) {
      writer.uint32(8).int32(message.privacyTypeId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeletePrivacyTypeRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePrivacyTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.privacyTypeId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePrivacyTypeRequest {
    return {
      privacyTypeId: isSet(object.privacyTypeId)
        ? globalThis.Number(object.privacyTypeId)
        : 0,
    };
  },

  toJSON(message: DeletePrivacyTypeRequest): unknown {
    const obj: any = {};
    if (message.privacyTypeId !== 0) {
      obj.privacyTypeId = Math.round(message.privacyTypeId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeletePrivacyTypeRequest>, I>>(
    base?: I,
  ): DeletePrivacyTypeRequest {
    return DeletePrivacyTypeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeletePrivacyTypeRequest>, I>>(
    object: I,
  ): DeletePrivacyTypeRequest {
    const message = createBaseDeletePrivacyTypeRequest();
    message.privacyTypeId = object.privacyTypeId ?? 0;
    return message;
  },
};

function createBaseDeletePrivacyTypeResponse(): DeletePrivacyTypeResponse {
  return { success: false, errorMessage: '' };
}

export const DeletePrivacyTypeResponse = {
  encode(
    message: DeletePrivacyTypeResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeletePrivacyTypeResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeletePrivacyTypeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeletePrivacyTypeResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: DeletePrivacyTypeResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeletePrivacyTypeResponse>, I>>(
    base?: I,
  ): DeletePrivacyTypeResponse {
    return DeletePrivacyTypeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeletePrivacyTypeResponse>, I>>(
    object: I,
  ): DeletePrivacyTypeResponse {
    const message = createBaseDeletePrivacyTypeResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

export type AdminPrivacyTypeServiceService =
  typeof AdminPrivacyTypeServiceService;
export const AdminPrivacyTypeServiceService = {
  getPrivacyTypeList: {
    path: '/admin.AdminPrivacyTypeService/GetPrivacyTypeList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetPrivacyTypeListRequest) =>
      Buffer.from(GetPrivacyTypeListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      GetPrivacyTypeListRequest.decode(value),
    responseSerialize: (value: GetPrivacyTypeListResponse) =>
      Buffer.from(GetPrivacyTypeListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetPrivacyTypeListResponse.decode(value),
  },
  createPrivacyType: {
    path: '/admin.AdminPrivacyTypeService/CreatePrivacyType',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreatePrivacyTypeRequest) =>
      Buffer.from(CreatePrivacyTypeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      CreatePrivacyTypeRequest.decode(value),
    responseSerialize: (value: CreatePrivacyTypeResponse) =>
      Buffer.from(CreatePrivacyTypeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      CreatePrivacyTypeResponse.decode(value),
  },
  updatePrivacyType: {
    path: '/admin.AdminPrivacyTypeService/UpdatePrivacyType',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdatePrivacyTypeRequest) =>
      Buffer.from(UpdatePrivacyTypeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      UpdatePrivacyTypeRequest.decode(value),
    responseSerialize: (value: UpdatePrivacyTypeResponse) =>
      Buffer.from(UpdatePrivacyTypeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      UpdatePrivacyTypeResponse.decode(value),
  },
  deletePrivacyType: {
    path: '/admin.AdminPrivacyTypeService/DeletePrivacyType',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeletePrivacyTypeRequest) =>
      Buffer.from(DeletePrivacyTypeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      DeletePrivacyTypeRequest.decode(value),
    responseSerialize: (value: DeletePrivacyTypeResponse) =>
      Buffer.from(DeletePrivacyTypeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      DeletePrivacyTypeResponse.decode(value),
  },
} as const;

export interface AdminPrivacyTypeServiceServer
  extends UntypedServiceImplementation {
  getPrivacyTypeList: handleUnaryCall<
    GetPrivacyTypeListRequest,
    GetPrivacyTypeListResponse
  >;
  createPrivacyType: handleUnaryCall<
    CreatePrivacyTypeRequest,
    CreatePrivacyTypeResponse
  >;
  updatePrivacyType: handleUnaryCall<
    UpdatePrivacyTypeRequest,
    UpdatePrivacyTypeResponse
  >;
  deletePrivacyType: handleUnaryCall<
    DeletePrivacyTypeRequest,
    DeletePrivacyTypeResponse
  >;
}

export interface AdminPrivacyTypeServiceClient extends Client {
  getPrivacyTypeList(
    request: GetPrivacyTypeListRequest,
    callback: (
      error: ServiceError | null,
      response: GetPrivacyTypeListResponse,
    ) => void,
  ): ClientUnaryCall;
  getPrivacyTypeList(
    request: GetPrivacyTypeListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetPrivacyTypeListResponse,
    ) => void,
  ): ClientUnaryCall;
  getPrivacyTypeList(
    request: GetPrivacyTypeListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetPrivacyTypeListResponse,
    ) => void,
  ): ClientUnaryCall;
  createPrivacyType(
    request: CreatePrivacyTypeRequest,
    callback: (
      error: ServiceError | null,
      response: CreatePrivacyTypeResponse,
    ) => void,
  ): ClientUnaryCall;
  createPrivacyType(
    request: CreatePrivacyTypeRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: CreatePrivacyTypeResponse,
    ) => void,
  ): ClientUnaryCall;
  createPrivacyType(
    request: CreatePrivacyTypeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: CreatePrivacyTypeResponse,
    ) => void,
  ): ClientUnaryCall;
  updatePrivacyType(
    request: UpdatePrivacyTypeRequest,
    callback: (
      error: ServiceError | null,
      response: UpdatePrivacyTypeResponse,
    ) => void,
  ): ClientUnaryCall;
  updatePrivacyType(
    request: UpdatePrivacyTypeRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: UpdatePrivacyTypeResponse,
    ) => void,
  ): ClientUnaryCall;
  updatePrivacyType(
    request: UpdatePrivacyTypeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: UpdatePrivacyTypeResponse,
    ) => void,
  ): ClientUnaryCall;
  deletePrivacyType(
    request: DeletePrivacyTypeRequest,
    callback: (
      error: ServiceError | null,
      response: DeletePrivacyTypeResponse,
    ) => void,
  ): ClientUnaryCall;
  deletePrivacyType(
    request: DeletePrivacyTypeRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: DeletePrivacyTypeResponse,
    ) => void,
  ): ClientUnaryCall;
  deletePrivacyType(
    request: DeletePrivacyTypeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: DeletePrivacyTypeResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const AdminPrivacyTypeServiceClient = makeGenericClientConstructor(
  AdminPrivacyTypeServiceService,
  'admin.AdminPrivacyTypeService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): AdminPrivacyTypeServiceClient;
  service: typeof AdminPrivacyTypeServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
