// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: requiredUserField.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';
import { RequiredUserField } from './admin-common';

export const protobufPackage = 'admin';

export interface GetRequiredUserFieldListRequest {}

export interface GetRequiredUserFieldListResponse {
  success: boolean;
  errorMessage: string;
  requiredUserFieldList: RequiredUserField[];
}

export interface CreateRequiredUserFieldRequest {
  field: string;
  isRequire: boolean;
  isActive: boolean;
}

export interface CreateRequiredUserFieldResponse {
  success: boolean;
  errorMessage: string;
}

export interface UpdateRequiredUserFieldRequest {
  fieldId: number;
  field: string;
  isRequire: boolean;
  isActive: boolean;
}

export interface UpdateRequiredUserFieldResponse {
  success: boolean;
  errorMessage: string;
}

export interface DeleteRequiredUserFieldRequest {
  fieldId: number;
}

export interface DeleteRequiredUserFieldResponse {
  success: boolean;
  errorMessage: string;
}

function createBaseGetRequiredUserFieldListRequest(): GetRequiredUserFieldListRequest {
  return {};
}

export const GetRequiredUserFieldListRequest = {
  encode(
    _: GetRequiredUserFieldListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetRequiredUserFieldListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRequiredUserFieldListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetRequiredUserFieldListRequest {
    return {};
  },

  toJSON(_: GetRequiredUserFieldListRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetRequiredUserFieldListRequest>, I>>(
    base?: I,
  ): GetRequiredUserFieldListRequest {
    return GetRequiredUserFieldListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetRequiredUserFieldListRequest>, I>>(
    _: I,
  ): GetRequiredUserFieldListRequest {
    const message = createBaseGetRequiredUserFieldListRequest();
    return message;
  },
};

function createBaseGetRequiredUserFieldListResponse(): GetRequiredUserFieldListResponse {
  return { success: false, errorMessage: '', requiredUserFieldList: [] };
}

export const GetRequiredUserFieldListResponse = {
  encode(
    message: GetRequiredUserFieldListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.requiredUserFieldList) {
      RequiredUserField.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetRequiredUserFieldListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRequiredUserFieldListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.requiredUserFieldList.push(
            RequiredUserField.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRequiredUserFieldListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      requiredUserFieldList: globalThis.Array.isArray(
        object?.requiredUserFieldList,
      )
        ? object.requiredUserFieldList.map((e: any) =>
            RequiredUserField.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: GetRequiredUserFieldListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.requiredUserFieldList?.length) {
      obj.requiredUserFieldList = message.requiredUserFieldList.map(e =>
        RequiredUserField.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetRequiredUserFieldListResponse>, I>>(
    base?: I,
  ): GetRequiredUserFieldListResponse {
    return GetRequiredUserFieldListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<GetRequiredUserFieldListResponse>, I>,
  >(object: I): GetRequiredUserFieldListResponse {
    const message = createBaseGetRequiredUserFieldListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.requiredUserFieldList =
      object.requiredUserFieldList?.map(e =>
        RequiredUserField.fromPartial(e),
      ) || [];
    return message;
  },
};

function createBaseCreateRequiredUserFieldRequest(): CreateRequiredUserFieldRequest {
  return { field: '', isRequire: false, isActive: false };
}

export const CreateRequiredUserFieldRequest = {
  encode(
    message: CreateRequiredUserFieldRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.field !== '') {
      writer.uint32(10).string(message.field);
    }
    if (message.isRequire !== false) {
      writer.uint32(16).bool(message.isRequire);
    }
    if (message.isActive !== false) {
      writer.uint32(24).bool(message.isActive);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateRequiredUserFieldRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRequiredUserFieldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.field = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isRequire = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRequiredUserFieldRequest {
    return {
      field: isSet(object.field) ? globalThis.String(object.field) : '',
      isRequire: isSet(object.isRequire)
        ? globalThis.Boolean(object.isRequire)
        : false,
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: CreateRequiredUserFieldRequest): unknown {
    const obj: any = {};
    if (message.field !== '') {
      obj.field = message.field;
    }
    if (message.isRequire !== false) {
      obj.isRequire = message.isRequire;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateRequiredUserFieldRequest>, I>>(
    base?: I,
  ): CreateRequiredUserFieldRequest {
    return CreateRequiredUserFieldRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateRequiredUserFieldRequest>, I>>(
    object: I,
  ): CreateRequiredUserFieldRequest {
    const message = createBaseCreateRequiredUserFieldRequest();
    message.field = object.field ?? '';
    message.isRequire = object.isRequire ?? false;
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseCreateRequiredUserFieldResponse(): CreateRequiredUserFieldResponse {
  return { success: false, errorMessage: '' };
}

export const CreateRequiredUserFieldResponse = {
  encode(
    message: CreateRequiredUserFieldResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateRequiredUserFieldResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRequiredUserFieldResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRequiredUserFieldResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: CreateRequiredUserFieldResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateRequiredUserFieldResponse>, I>>(
    base?: I,
  ): CreateRequiredUserFieldResponse {
    return CreateRequiredUserFieldResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateRequiredUserFieldResponse>, I>>(
    object: I,
  ): CreateRequiredUserFieldResponse {
    const message = createBaseCreateRequiredUserFieldResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseUpdateRequiredUserFieldRequest(): UpdateRequiredUserFieldRequest {
  return { fieldId: 0, field: '', isRequire: false, isActive: false };
}

export const UpdateRequiredUserFieldRequest = {
  encode(
    message: UpdateRequiredUserFieldRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.fieldId !== 0) {
      writer.uint32(8).int32(message.fieldId);
    }
    if (message.field !== '') {
      writer.uint32(18).string(message.field);
    }
    if (message.isRequire !== false) {
      writer.uint32(24).bool(message.isRequire);
    }
    if (message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateRequiredUserFieldRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRequiredUserFieldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fieldId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.field = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isRequire = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRequiredUserFieldRequest {
    return {
      fieldId: isSet(object.fieldId) ? globalThis.Number(object.fieldId) : 0,
      field: isSet(object.field) ? globalThis.String(object.field) : '',
      isRequire: isSet(object.isRequire)
        ? globalThis.Boolean(object.isRequire)
        : false,
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: UpdateRequiredUserFieldRequest): unknown {
    const obj: any = {};
    if (message.fieldId !== 0) {
      obj.fieldId = Math.round(message.fieldId);
    }
    if (message.field !== '') {
      obj.field = message.field;
    }
    if (message.isRequire !== false) {
      obj.isRequire = message.isRequire;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateRequiredUserFieldRequest>, I>>(
    base?: I,
  ): UpdateRequiredUserFieldRequest {
    return UpdateRequiredUserFieldRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateRequiredUserFieldRequest>, I>>(
    object: I,
  ): UpdateRequiredUserFieldRequest {
    const message = createBaseUpdateRequiredUserFieldRequest();
    message.fieldId = object.fieldId ?? 0;
    message.field = object.field ?? '';
    message.isRequire = object.isRequire ?? false;
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseUpdateRequiredUserFieldResponse(): UpdateRequiredUserFieldResponse {
  return { success: false, errorMessage: '' };
}

export const UpdateRequiredUserFieldResponse = {
  encode(
    message: UpdateRequiredUserFieldResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateRequiredUserFieldResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRequiredUserFieldResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRequiredUserFieldResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: UpdateRequiredUserFieldResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateRequiredUserFieldResponse>, I>>(
    base?: I,
  ): UpdateRequiredUserFieldResponse {
    return UpdateRequiredUserFieldResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateRequiredUserFieldResponse>, I>>(
    object: I,
  ): UpdateRequiredUserFieldResponse {
    const message = createBaseUpdateRequiredUserFieldResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseDeleteRequiredUserFieldRequest(): DeleteRequiredUserFieldRequest {
  return { fieldId: 0 };
}

export const DeleteRequiredUserFieldRequest = {
  encode(
    message: DeleteRequiredUserFieldRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.fieldId !== 0) {
      writer.uint32(8).int32(message.fieldId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteRequiredUserFieldRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRequiredUserFieldRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fieldId = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRequiredUserFieldRequest {
    return {
      fieldId: isSet(object.fieldId) ? globalThis.Number(object.fieldId) : 0,
    };
  },

  toJSON(message: DeleteRequiredUserFieldRequest): unknown {
    const obj: any = {};
    if (message.fieldId !== 0) {
      obj.fieldId = Math.round(message.fieldId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteRequiredUserFieldRequest>, I>>(
    base?: I,
  ): DeleteRequiredUserFieldRequest {
    return DeleteRequiredUserFieldRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteRequiredUserFieldRequest>, I>>(
    object: I,
  ): DeleteRequiredUserFieldRequest {
    const message = createBaseDeleteRequiredUserFieldRequest();
    message.fieldId = object.fieldId ?? 0;
    return message;
  },
};

function createBaseDeleteRequiredUserFieldResponse(): DeleteRequiredUserFieldResponse {
  return { success: false, errorMessage: '' };
}

export const DeleteRequiredUserFieldResponse = {
  encode(
    message: DeleteRequiredUserFieldResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteRequiredUserFieldResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRequiredUserFieldResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRequiredUserFieldResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: DeleteRequiredUserFieldResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteRequiredUserFieldResponse>, I>>(
    base?: I,
  ): DeleteRequiredUserFieldResponse {
    return DeleteRequiredUserFieldResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteRequiredUserFieldResponse>, I>>(
    object: I,
  ): DeleteRequiredUserFieldResponse {
    const message = createBaseDeleteRequiredUserFieldResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

export type AdminRequiredUserFieldServiceService =
  typeof AdminRequiredUserFieldServiceService;
export const AdminRequiredUserFieldServiceService = {
  getRequiredUserFieldList: {
    path: '/admin.AdminRequiredUserFieldService/GetRequiredUserFieldList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetRequiredUserFieldListRequest) =>
      Buffer.from(GetRequiredUserFieldListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      GetRequiredUserFieldListRequest.decode(value),
    responseSerialize: (value: GetRequiredUserFieldListResponse) =>
      Buffer.from(GetRequiredUserFieldListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetRequiredUserFieldListResponse.decode(value),
  },
  createRequiredUserField: {
    path: '/admin.AdminRequiredUserFieldService/CreateRequiredUserField',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateRequiredUserFieldRequest) =>
      Buffer.from(CreateRequiredUserFieldRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      CreateRequiredUserFieldRequest.decode(value),
    responseSerialize: (value: CreateRequiredUserFieldResponse) =>
      Buffer.from(CreateRequiredUserFieldResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      CreateRequiredUserFieldResponse.decode(value),
  },
  updateRequiredUserField: {
    path: '/admin.AdminRequiredUserFieldService/UpdateRequiredUserField',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateRequiredUserFieldRequest) =>
      Buffer.from(UpdateRequiredUserFieldRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      UpdateRequiredUserFieldRequest.decode(value),
    responseSerialize: (value: UpdateRequiredUserFieldResponse) =>
      Buffer.from(UpdateRequiredUserFieldResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      UpdateRequiredUserFieldResponse.decode(value),
  },
  deleteRequiredUserField: {
    path: '/admin.AdminRequiredUserFieldService/DeleteRequiredUserField',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteRequiredUserFieldRequest) =>
      Buffer.from(DeleteRequiredUserFieldRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      DeleteRequiredUserFieldRequest.decode(value),
    responseSerialize: (value: DeleteRequiredUserFieldResponse) =>
      Buffer.from(DeleteRequiredUserFieldResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      DeleteRequiredUserFieldResponse.decode(value),
  },
} as const;

export interface AdminRequiredUserFieldServiceServer
  extends UntypedServiceImplementation {
  getRequiredUserFieldList: handleUnaryCall<
    GetRequiredUserFieldListRequest,
    GetRequiredUserFieldListResponse
  >;
  createRequiredUserField: handleUnaryCall<
    CreateRequiredUserFieldRequest,
    CreateRequiredUserFieldResponse
  >;
  updateRequiredUserField: handleUnaryCall<
    UpdateRequiredUserFieldRequest,
    UpdateRequiredUserFieldResponse
  >;
  deleteRequiredUserField: handleUnaryCall<
    DeleteRequiredUserFieldRequest,
    DeleteRequiredUserFieldResponse
  >;
}

export interface AdminRequiredUserFieldServiceClient extends Client {
  getRequiredUserFieldList(
    request: GetRequiredUserFieldListRequest,
    callback: (
      error: ServiceError | null,
      response: GetRequiredUserFieldListResponse,
    ) => void,
  ): ClientUnaryCall;
  getRequiredUserFieldList(
    request: GetRequiredUserFieldListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetRequiredUserFieldListResponse,
    ) => void,
  ): ClientUnaryCall;
  getRequiredUserFieldList(
    request: GetRequiredUserFieldListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetRequiredUserFieldListResponse,
    ) => void,
  ): ClientUnaryCall;
  createRequiredUserField(
    request: CreateRequiredUserFieldRequest,
    callback: (
      error: ServiceError | null,
      response: CreateRequiredUserFieldResponse,
    ) => void,
  ): ClientUnaryCall;
  createRequiredUserField(
    request: CreateRequiredUserFieldRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: CreateRequiredUserFieldResponse,
    ) => void,
  ): ClientUnaryCall;
  createRequiredUserField(
    request: CreateRequiredUserFieldRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: CreateRequiredUserFieldResponse,
    ) => void,
  ): ClientUnaryCall;
  updateRequiredUserField(
    request: UpdateRequiredUserFieldRequest,
    callback: (
      error: ServiceError | null,
      response: UpdateRequiredUserFieldResponse,
    ) => void,
  ): ClientUnaryCall;
  updateRequiredUserField(
    request: UpdateRequiredUserFieldRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: UpdateRequiredUserFieldResponse,
    ) => void,
  ): ClientUnaryCall;
  updateRequiredUserField(
    request: UpdateRequiredUserFieldRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: UpdateRequiredUserFieldResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteRequiredUserField(
    request: DeleteRequiredUserFieldRequest,
    callback: (
      error: ServiceError | null,
      response: DeleteRequiredUserFieldResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteRequiredUserField(
    request: DeleteRequiredUserFieldRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: DeleteRequiredUserFieldResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteRequiredUserField(
    request: DeleteRequiredUserFieldRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: DeleteRequiredUserFieldResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const AdminRequiredUserFieldServiceClient = makeGenericClientConstructor(
  AdminRequiredUserFieldServiceService,
  'admin.AdminRequiredUserFieldService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): AdminRequiredUserFieldServiceClient;
  service: typeof AdminRequiredUserFieldServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
