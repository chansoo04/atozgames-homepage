// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: system.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';
import { System } from './admin-common';

export const protobufPackage = 'admin';

export interface GetSystemListRequest {}

export interface GetSystemListResponse {
  success: boolean;
  errorMessage: string;
  systemList: System[];
}

export interface CreateSystemRequest {
  systemId: string;
  name: string;
  description: string;
  isActive: boolean;
}

export interface CreateSystemResponse {
  success: boolean;
  errorMessage: string;
}

export interface UpdateSystemRequest {
  systemId: string;
  name: string;
  description: string;
  isActive: boolean;
}

export interface UpdateSystemResponse {
  success: boolean;
  errorMessage: string;
}

export interface DeleteSystemRequest {
  systemId: string;
}

export interface DeleteSystemResponse {
  success: boolean;
  errorMessage: string;
}

function createBaseGetSystemListRequest(): GetSystemListRequest {
  return {};
}

export const GetSystemListRequest = {
  encode(
    _: GetSystemListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetSystemListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSystemListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetSystemListRequest {
    return {};
  },

  toJSON(_: GetSystemListRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSystemListRequest>, I>>(
    base?: I,
  ): GetSystemListRequest {
    return GetSystemListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSystemListRequest>, I>>(
    _: I,
  ): GetSystemListRequest {
    const message = createBaseGetSystemListRequest();
    return message;
  },
};

function createBaseGetSystemListResponse(): GetSystemListResponse {
  return { success: false, errorMessage: '', systemList: [] };
}

export const GetSystemListResponse = {
  encode(
    message: GetSystemListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.systemList) {
      System.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetSystemListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSystemListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.systemList.push(System.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSystemListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      systemList: globalThis.Array.isArray(object?.systemList)
        ? object.systemList.map((e: any) => System.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetSystemListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.systemList?.length) {
      obj.systemList = message.systemList.map(e => System.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetSystemListResponse>, I>>(
    base?: I,
  ): GetSystemListResponse {
    return GetSystemListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetSystemListResponse>, I>>(
    object: I,
  ): GetSystemListResponse {
    const message = createBaseGetSystemListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.systemList =
      object.systemList?.map(e => System.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateSystemRequest(): CreateSystemRequest {
  return { systemId: '', name: '', description: '', isActive: false };
}

export const CreateSystemRequest = {
  encode(
    message: CreateSystemRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.systemId !== '') {
      writer.uint32(10).string(message.systemId);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(26).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateSystemRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSystemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.systemId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSystemRequest {
    return {
      systemId: isSet(object.systemId)
        ? globalThis.String(object.systemId)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: CreateSystemRequest): unknown {
    const obj: any = {};
    if (message.systemId !== '') {
      obj.systemId = message.systemId;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateSystemRequest>, I>>(
    base?: I,
  ): CreateSystemRequest {
    return CreateSystemRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateSystemRequest>, I>>(
    object: I,
  ): CreateSystemRequest {
    const message = createBaseCreateSystemRequest();
    message.systemId = object.systemId ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseCreateSystemResponse(): CreateSystemResponse {
  return { success: false, errorMessage: '' };
}

export const CreateSystemResponse = {
  encode(
    message: CreateSystemResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateSystemResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSystemResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSystemResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: CreateSystemResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateSystemResponse>, I>>(
    base?: I,
  ): CreateSystemResponse {
    return CreateSystemResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateSystemResponse>, I>>(
    object: I,
  ): CreateSystemResponse {
    const message = createBaseCreateSystemResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseUpdateSystemRequest(): UpdateSystemRequest {
  return { systemId: '', name: '', description: '', isActive: false };
}

export const UpdateSystemRequest = {
  encode(
    message: UpdateSystemRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.systemId !== '') {
      writer.uint32(10).string(message.systemId);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== '') {
      writer.uint32(26).string(message.description);
    }
    if (message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateSystemRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSystemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.systemId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSystemRequest {
    return {
      systemId: isSet(object.systemId)
        ? globalThis.String(object.systemId)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      description: isSet(object.description)
        ? globalThis.String(object.description)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
    };
  },

  toJSON(message: UpdateSystemRequest): unknown {
    const obj: any = {};
    if (message.systemId !== '') {
      obj.systemId = message.systemId;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.description !== '') {
      obj.description = message.description;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSystemRequest>, I>>(
    base?: I,
  ): UpdateSystemRequest {
    return UpdateSystemRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSystemRequest>, I>>(
    object: I,
  ): UpdateSystemRequest {
    const message = createBaseUpdateSystemRequest();
    message.systemId = object.systemId ?? '';
    message.name = object.name ?? '';
    message.description = object.description ?? '';
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseUpdateSystemResponse(): UpdateSystemResponse {
  return { success: false, errorMessage: '' };
}

export const UpdateSystemResponse = {
  encode(
    message: UpdateSystemResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateSystemResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSystemResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSystemResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: UpdateSystemResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSystemResponse>, I>>(
    base?: I,
  ): UpdateSystemResponse {
    return UpdateSystemResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSystemResponse>, I>>(
    object: I,
  ): UpdateSystemResponse {
    const message = createBaseUpdateSystemResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseDeleteSystemRequest(): DeleteSystemRequest {
  return { systemId: '' };
}

export const DeleteSystemRequest = {
  encode(
    message: DeleteSystemRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.systemId !== '') {
      writer.uint32(10).string(message.systemId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteSystemRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSystemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.systemId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSystemRequest {
    return {
      systemId: isSet(object.systemId)
        ? globalThis.String(object.systemId)
        : '',
    };
  },

  toJSON(message: DeleteSystemRequest): unknown {
    const obj: any = {};
    if (message.systemId !== '') {
      obj.systemId = message.systemId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteSystemRequest>, I>>(
    base?: I,
  ): DeleteSystemRequest {
    return DeleteSystemRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteSystemRequest>, I>>(
    object: I,
  ): DeleteSystemRequest {
    const message = createBaseDeleteSystemRequest();
    message.systemId = object.systemId ?? '';
    return message;
  },
};

function createBaseDeleteSystemResponse(): DeleteSystemResponse {
  return { success: false, errorMessage: '' };
}

export const DeleteSystemResponse = {
  encode(
    message: DeleteSystemResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteSystemResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSystemResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSystemResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: DeleteSystemResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteSystemResponse>, I>>(
    base?: I,
  ): DeleteSystemResponse {
    return DeleteSystemResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteSystemResponse>, I>>(
    object: I,
  ): DeleteSystemResponse {
    const message = createBaseDeleteSystemResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

export type AdminSystemServiceService = typeof AdminSystemServiceService;
export const AdminSystemServiceService = {
  getSystemList: {
    path: '/admin.AdminSystemService/GetSystemList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetSystemListRequest) =>
      Buffer.from(GetSystemListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetSystemListRequest.decode(value),
    responseSerialize: (value: GetSystemListResponse) =>
      Buffer.from(GetSystemListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetSystemListResponse.decode(value),
  },
  createSystem: {
    path: '/admin.AdminSystemService/CreateSystem',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateSystemRequest) =>
      Buffer.from(CreateSystemRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateSystemRequest.decode(value),
    responseSerialize: (value: CreateSystemResponse) =>
      Buffer.from(CreateSystemResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateSystemResponse.decode(value),
  },
  updateSystem: {
    path: '/admin.AdminSystemService/UpdateSystem',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateSystemRequest) =>
      Buffer.from(UpdateSystemRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateSystemRequest.decode(value),
    responseSerialize: (value: UpdateSystemResponse) =>
      Buffer.from(UpdateSystemResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateSystemResponse.decode(value),
  },
  deleteSystem: {
    path: '/admin.AdminSystemService/DeleteSystem',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteSystemRequest) =>
      Buffer.from(DeleteSystemRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteSystemRequest.decode(value),
    responseSerialize: (value: DeleteSystemResponse) =>
      Buffer.from(DeleteSystemResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteSystemResponse.decode(value),
  },
} as const;

export interface AdminSystemServiceServer extends UntypedServiceImplementation {
  getSystemList: handleUnaryCall<GetSystemListRequest, GetSystemListResponse>;
  createSystem: handleUnaryCall<CreateSystemRequest, CreateSystemResponse>;
  updateSystem: handleUnaryCall<UpdateSystemRequest, UpdateSystemResponse>;
  deleteSystem: handleUnaryCall<DeleteSystemRequest, DeleteSystemResponse>;
}

export interface AdminSystemServiceClient extends Client {
  getSystemList(
    request: GetSystemListRequest,
    callback: (
      error: ServiceError | null,
      response: GetSystemListResponse,
    ) => void,
  ): ClientUnaryCall;
  getSystemList(
    request: GetSystemListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetSystemListResponse,
    ) => void,
  ): ClientUnaryCall;
  getSystemList(
    request: GetSystemListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetSystemListResponse,
    ) => void,
  ): ClientUnaryCall;
  createSystem(
    request: CreateSystemRequest,
    callback: (
      error: ServiceError | null,
      response: CreateSystemResponse,
    ) => void,
  ): ClientUnaryCall;
  createSystem(
    request: CreateSystemRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: CreateSystemResponse,
    ) => void,
  ): ClientUnaryCall;
  createSystem(
    request: CreateSystemRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: CreateSystemResponse,
    ) => void,
  ): ClientUnaryCall;
  updateSystem(
    request: UpdateSystemRequest,
    callback: (
      error: ServiceError | null,
      response: UpdateSystemResponse,
    ) => void,
  ): ClientUnaryCall;
  updateSystem(
    request: UpdateSystemRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: UpdateSystemResponse,
    ) => void,
  ): ClientUnaryCall;
  updateSystem(
    request: UpdateSystemRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: UpdateSystemResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteSystem(
    request: DeleteSystemRequest,
    callback: (
      error: ServiceError | null,
      response: DeleteSystemResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteSystem(
    request: DeleteSystemRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: DeleteSystemResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteSystem(
    request: DeleteSystemRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: DeleteSystemResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const AdminSystemServiceClient = makeGenericClientConstructor(
  AdminSystemServiceService,
  'admin.AdminSystemService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): AdminSystemServiceClient;
  service: typeof AdminSystemServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
