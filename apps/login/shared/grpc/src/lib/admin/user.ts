// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';
import { GlobalNavigationMenus, UserInfo } from './admin-common';

export const protobufPackage = 'admin';

export interface SignUpRequest {
  email: string;
  password: string;
  /** 사원번호 */
  employeeNumber: string;
  /** 이름 */
  name: string;
  /** 부서 ID */
  departmentId: number;
  /** 직책 ID */
  positionId: number;
  /** 직무 ID */
  jobId: number;
  /** 전화번호 */
  phoneNumber: number;
  /** 사내번호 */
  extensionNumber: number;
}

export interface SignUpResponse {
  success: boolean;
  errorMessage: string;
}

export interface SignInRequest {
  email: string;
  password: string;
}

export interface SignInResponse {
  success: boolean;
  errorMessage: string;
  userId: string;
}

export interface SendEmailAuthCodeRequest {
  email: string;
}

export interface SendEmailAuthCodeResponse {
  success: boolean;
  errorMessage: string;
  authCode: string;
}

/** 임시 비밀번호 발급 요청 */
export interface IssueTemporaryUserPasswordRequest {
  email: string;
  name: string;
}

/** 임시 비밀번호 발급 응답 */
export interface IssueTemporaryUserPasswordResponse {
  success: boolean;
  errorMessage: string;
}

/** 비밀번호 변경 요청 */
export interface UpdateUserPasswordRequest {
  email: string;
  password: string;
  newPassword: string;
}

/** 비밀번호 변경 응답 */
export interface UpdateUserPasswordResponse {
  success: boolean;
  errorMessage: string;
}

/** 사용자 정보 조회 요청 */
export interface GetUserInfoRequest {
  userId: string;
}

/** 사용자 정보 조회 응답 */
export interface GetUserInfoResponse {
  success: boolean;
  errorMessage: string;
  info?: UserInfo | undefined;
}

/** 사용자 글로벌 내비게이션 메뉴 조회 응답 */
export interface GetUserMenusResponse {
  success: boolean;
  errorMessage?: string | undefined;
  menus: GlobalNavigationMenus[];
}

/** 비밀번호 확인 요청 */
export interface CheckPasswordRequest {
  userId: string;
  password: string;
}

/** 비밀번호 확인 응답 */
export interface CheckPasswordResponse {
  success: boolean;
  errorMessage: string;
}

/** 사용자 목록 조회 요청 */
export interface GetUserListRequest {
  page: number;
  countPerPage: number;
  email: string;
  name: string;
  memo: string;
  /** 계정 상태 */
  state: number;
}

/** 사용자 목록 조회 응답 */
export interface GetUserListResponse {
  success: boolean;
  errorMessage: string;
  userInfoList: UserInfo[];
}

/** 사용자 정보 수정 요청 */
export interface UpdateUserInfoRequest {
  userId: string;
  email: string;
  /** 사원번호 */
  employeeNumber: string;
  /** 이름 */
  name: string;
  /** 부서 ID */
  departmentId: number;
  /** 직책 ID */
  positionId: number;
  /** 직무 ID */
  jobId: number;
  /** 전화번호 */
  phoneNumber: number;
  /** 사내번호 */
  extensionNumber: number;
  /** 계정 상태 */
  state: number;
}

/** 사용자 정보 수정 응답 */
export interface UpdateUserInfoResponse {
  success: boolean;
  errorMessage: string;
}

function createBaseSignUpRequest(): SignUpRequest {
  return {
    email: '',
    password: '',
    employeeNumber: '',
    name: '',
    departmentId: 0,
    positionId: 0,
    jobId: 0,
    phoneNumber: 0,
    extensionNumber: 0,
  };
}

export const SignUpRequest = {
  encode(
    message: SignUpRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.email !== '') {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== '') {
      writer.uint32(18).string(message.password);
    }
    if (message.employeeNumber !== '') {
      writer.uint32(26).string(message.employeeNumber);
    }
    if (message.name !== '') {
      writer.uint32(34).string(message.name);
    }
    if (message.departmentId !== 0) {
      writer.uint32(40).int32(message.departmentId);
    }
    if (message.positionId !== 0) {
      writer.uint32(48).int32(message.positionId);
    }
    if (message.jobId !== 0) {
      writer.uint32(56).int32(message.jobId);
    }
    if (message.phoneNumber !== 0) {
      writer.uint32(64).int64(message.phoneNumber);
    }
    if (message.extensionNumber !== 0) {
      writer.uint32(72).int32(message.extensionNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignUpRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignUpRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.employeeNumber = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.departmentId = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.positionId = reader.int32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.jobId = reader.int32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.phoneNumber = longToNumber(reader.int64());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.extensionNumber = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignUpRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : '',
      password: isSet(object.password)
        ? globalThis.String(object.password)
        : '',
      employeeNumber: isSet(object.employeeNumber)
        ? globalThis.String(object.employeeNumber)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      departmentId: isSet(object.departmentId)
        ? globalThis.Number(object.departmentId)
        : 0,
      positionId: isSet(object.positionId)
        ? globalThis.Number(object.positionId)
        : 0,
      jobId: isSet(object.jobId) ? globalThis.Number(object.jobId) : 0,
      phoneNumber: isSet(object.phoneNumber)
        ? globalThis.Number(object.phoneNumber)
        : 0,
      extensionNumber: isSet(object.extensionNumber)
        ? globalThis.Number(object.extensionNumber)
        : 0,
    };
  },

  toJSON(message: SignUpRequest): unknown {
    const obj: any = {};
    if (message.email !== '') {
      obj.email = message.email;
    }
    if (message.password !== '') {
      obj.password = message.password;
    }
    if (message.employeeNumber !== '') {
      obj.employeeNumber = message.employeeNumber;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.departmentId !== 0) {
      obj.departmentId = Math.round(message.departmentId);
    }
    if (message.positionId !== 0) {
      obj.positionId = Math.round(message.positionId);
    }
    if (message.jobId !== 0) {
      obj.jobId = Math.round(message.jobId);
    }
    if (message.phoneNumber !== 0) {
      obj.phoneNumber = Math.round(message.phoneNumber);
    }
    if (message.extensionNumber !== 0) {
      obj.extensionNumber = Math.round(message.extensionNumber);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignUpRequest>, I>>(
    base?: I,
  ): SignUpRequest {
    return SignUpRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignUpRequest>, I>>(
    object: I,
  ): SignUpRequest {
    const message = createBaseSignUpRequest();
    message.email = object.email ?? '';
    message.password = object.password ?? '';
    message.employeeNumber = object.employeeNumber ?? '';
    message.name = object.name ?? '';
    message.departmentId = object.departmentId ?? 0;
    message.positionId = object.positionId ?? 0;
    message.jobId = object.jobId ?? 0;
    message.phoneNumber = object.phoneNumber ?? 0;
    message.extensionNumber = object.extensionNumber ?? 0;
    return message;
  },
};

function createBaseSignUpResponse(): SignUpResponse {
  return { success: false, errorMessage: '' };
}

export const SignUpResponse = {
  encode(
    message: SignUpResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignUpResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignUpResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignUpResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: SignUpResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignUpResponse>, I>>(
    base?: I,
  ): SignUpResponse {
    return SignUpResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignUpResponse>, I>>(
    object: I,
  ): SignUpResponse {
    const message = createBaseSignUpResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseSignInRequest(): SignInRequest {
  return { email: '', password: '' };
}

export const SignInRequest = {
  encode(
    message: SignInRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.email !== '') {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== '') {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignInRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignInRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignInRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : '',
      password: isSet(object.password)
        ? globalThis.String(object.password)
        : '',
    };
  },

  toJSON(message: SignInRequest): unknown {
    const obj: any = {};
    if (message.email !== '') {
      obj.email = message.email;
    }
    if (message.password !== '') {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignInRequest>, I>>(
    base?: I,
  ): SignInRequest {
    return SignInRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignInRequest>, I>>(
    object: I,
  ): SignInRequest {
    const message = createBaseSignInRequest();
    message.email = object.email ?? '';
    message.password = object.password ?? '';
    return message;
  },
};

function createBaseSignInResponse(): SignInResponse {
  return { success: false, errorMessage: '', userId: '' };
}

export const SignInResponse = {
  encode(
    message: SignInResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.userId !== '') {
      writer.uint32(26).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignInResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignInResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignInResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      userId: isSet(object.userId) ? globalThis.String(object.userId) : '',
    };
  },

  toJSON(message: SignInResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.userId !== '') {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignInResponse>, I>>(
    base?: I,
  ): SignInResponse {
    return SignInResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignInResponse>, I>>(
    object: I,
  ): SignInResponse {
    const message = createBaseSignInResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.userId = object.userId ?? '';
    return message;
  },
};

function createBaseSendEmailAuthCodeRequest(): SendEmailAuthCodeRequest {
  return { email: '' };
}

export const SendEmailAuthCodeRequest = {
  encode(
    message: SendEmailAuthCodeRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.email !== '') {
      writer.uint32(10).string(message.email);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): SendEmailAuthCodeRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendEmailAuthCodeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendEmailAuthCodeRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : '',
    };
  },

  toJSON(message: SendEmailAuthCodeRequest): unknown {
    const obj: any = {};
    if (message.email !== '') {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendEmailAuthCodeRequest>, I>>(
    base?: I,
  ): SendEmailAuthCodeRequest {
    return SendEmailAuthCodeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendEmailAuthCodeRequest>, I>>(
    object: I,
  ): SendEmailAuthCodeRequest {
    const message = createBaseSendEmailAuthCodeRequest();
    message.email = object.email ?? '';
    return message;
  },
};

function createBaseSendEmailAuthCodeResponse(): SendEmailAuthCodeResponse {
  return { success: false, errorMessage: '', authCode: '' };
}

export const SendEmailAuthCodeResponse = {
  encode(
    message: SendEmailAuthCodeResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.authCode !== '') {
      writer.uint32(26).string(message.authCode);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): SendEmailAuthCodeResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendEmailAuthCodeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.authCode = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendEmailAuthCodeResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      authCode: isSet(object.authCode)
        ? globalThis.String(object.authCode)
        : '',
    };
  },

  toJSON(message: SendEmailAuthCodeResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.authCode !== '') {
      obj.authCode = message.authCode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendEmailAuthCodeResponse>, I>>(
    base?: I,
  ): SendEmailAuthCodeResponse {
    return SendEmailAuthCodeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendEmailAuthCodeResponse>, I>>(
    object: I,
  ): SendEmailAuthCodeResponse {
    const message = createBaseSendEmailAuthCodeResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.authCode = object.authCode ?? '';
    return message;
  },
};

function createBaseIssueTemporaryUserPasswordRequest(): IssueTemporaryUserPasswordRequest {
  return { email: '', name: '' };
}

export const IssueTemporaryUserPasswordRequest = {
  encode(
    message: IssueTemporaryUserPasswordRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.email !== '') {
      writer.uint32(10).string(message.email);
    }
    if (message.name !== '') {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): IssueTemporaryUserPasswordRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIssueTemporaryUserPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IssueTemporaryUserPasswordRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
    };
  },

  toJSON(message: IssueTemporaryUserPasswordRequest): unknown {
    const obj: any = {};
    if (message.email !== '') {
      obj.email = message.email;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IssueTemporaryUserPasswordRequest>, I>>(
    base?: I,
  ): IssueTemporaryUserPasswordRequest {
    return IssueTemporaryUserPasswordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<IssueTemporaryUserPasswordRequest>, I>,
  >(object: I): IssueTemporaryUserPasswordRequest {
    const message = createBaseIssueTemporaryUserPasswordRequest();
    message.email = object.email ?? '';
    message.name = object.name ?? '';
    return message;
  },
};

function createBaseIssueTemporaryUserPasswordResponse(): IssueTemporaryUserPasswordResponse {
  return { success: false, errorMessage: '' };
}

export const IssueTemporaryUserPasswordResponse = {
  encode(
    message: IssueTemporaryUserPasswordResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): IssueTemporaryUserPasswordResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIssueTemporaryUserPasswordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IssueTemporaryUserPasswordResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: IssueTemporaryUserPasswordResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IssueTemporaryUserPasswordResponse>, I>>(
    base?: I,
  ): IssueTemporaryUserPasswordResponse {
    return IssueTemporaryUserPasswordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<IssueTemporaryUserPasswordResponse>, I>,
  >(object: I): IssueTemporaryUserPasswordResponse {
    const message = createBaseIssueTemporaryUserPasswordResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseUpdateUserPasswordRequest(): UpdateUserPasswordRequest {
  return { email: '', password: '', newPassword: '' };
}

export const UpdateUserPasswordRequest = {
  encode(
    message: UpdateUserPasswordRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.email !== '') {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== '') {
      writer.uint32(18).string(message.password);
    }
    if (message.newPassword !== '') {
      writer.uint32(26).string(message.newPassword);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateUserPasswordRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.newPassword = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserPasswordRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : '',
      password: isSet(object.password)
        ? globalThis.String(object.password)
        : '',
      newPassword: isSet(object.newPassword)
        ? globalThis.String(object.newPassword)
        : '',
    };
  },

  toJSON(message: UpdateUserPasswordRequest): unknown {
    const obj: any = {};
    if (message.email !== '') {
      obj.email = message.email;
    }
    if (message.password !== '') {
      obj.password = message.password;
    }
    if (message.newPassword !== '') {
      obj.newPassword = message.newPassword;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserPasswordRequest>, I>>(
    base?: I,
  ): UpdateUserPasswordRequest {
    return UpdateUserPasswordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserPasswordRequest>, I>>(
    object: I,
  ): UpdateUserPasswordRequest {
    const message = createBaseUpdateUserPasswordRequest();
    message.email = object.email ?? '';
    message.password = object.password ?? '';
    message.newPassword = object.newPassword ?? '';
    return message;
  },
};

function createBaseUpdateUserPasswordResponse(): UpdateUserPasswordResponse {
  return { success: false, errorMessage: '' };
}

export const UpdateUserPasswordResponse = {
  encode(
    message: UpdateUserPasswordResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateUserPasswordResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserPasswordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserPasswordResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: UpdateUserPasswordResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserPasswordResponse>, I>>(
    base?: I,
  ): UpdateUserPasswordResponse {
    return UpdateUserPasswordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserPasswordResponse>, I>>(
    object: I,
  ): UpdateUserPasswordResponse {
    const message = createBaseUpdateUserPasswordResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseGetUserInfoRequest(): GetUserInfoRequest {
  return { userId: '' };
}

export const GetUserInfoRequest = {
  encode(
    message: GetUserInfoRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userId !== '') {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetUserInfoRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserInfoRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : '',
    };
  },

  toJSON(message: GetUserInfoRequest): unknown {
    const obj: any = {};
    if (message.userId !== '') {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserInfoRequest>, I>>(
    base?: I,
  ): GetUserInfoRequest {
    return GetUserInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserInfoRequest>, I>>(
    object: I,
  ): GetUserInfoRequest {
    const message = createBaseGetUserInfoRequest();
    message.userId = object.userId ?? '';
    return message;
  },
};

function createBaseGetUserInfoResponse(): GetUserInfoResponse {
  return { success: false, errorMessage: '', info: undefined };
}

export const GetUserInfoResponse = {
  encode(
    message: GetUserInfoResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.info !== undefined) {
      UserInfo.encode(message.info, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetUserInfoResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.info = UserInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserInfoResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      info: isSet(object.info) ? UserInfo.fromJSON(object.info) : undefined,
    };
  },

  toJSON(message: GetUserInfoResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.info !== undefined) {
      obj.info = UserInfo.toJSON(message.info);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserInfoResponse>, I>>(
    base?: I,
  ): GetUserInfoResponse {
    return GetUserInfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserInfoResponse>, I>>(
    object: I,
  ): GetUserInfoResponse {
    const message = createBaseGetUserInfoResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.info =
      object.info !== undefined && object.info !== null
        ? UserInfo.fromPartial(object.info)
        : undefined;
    return message;
  },
};

function createBaseGetUserMenusResponse(): GetUserMenusResponse {
  return { success: false, errorMessage: undefined, menus: [] };
}

export const GetUserMenusResponse = {
  encode(
    message: GetUserMenusResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== undefined) {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.menus) {
      GlobalNavigationMenus.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetUserMenusResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserMenusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.menus.push(
            GlobalNavigationMenus.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserMenusResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : undefined,
      menus: globalThis.Array.isArray(object?.menus)
        ? object.menus.map((e: any) => GlobalNavigationMenus.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetUserMenusResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== undefined) {
      obj.errorMessage = message.errorMessage;
    }
    if (message.menus?.length) {
      obj.menus = message.menus.map(e => GlobalNavigationMenus.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserMenusResponse>, I>>(
    base?: I,
  ): GetUserMenusResponse {
    return GetUserMenusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserMenusResponse>, I>>(
    object: I,
  ): GetUserMenusResponse {
    const message = createBaseGetUserMenusResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? undefined;
    message.menus =
      object.menus?.map(e => GlobalNavigationMenus.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCheckPasswordRequest(): CheckPasswordRequest {
  return { userId: '', password: '' };
}

export const CheckPasswordRequest = {
  encode(
    message: CheckPasswordRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userId !== '') {
      writer.uint32(10).string(message.userId);
    }
    if (message.password !== '') {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CheckPasswordRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckPasswordRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : '',
      password: isSet(object.password)
        ? globalThis.String(object.password)
        : '',
    };
  },

  toJSON(message: CheckPasswordRequest): unknown {
    const obj: any = {};
    if (message.userId !== '') {
      obj.userId = message.userId;
    }
    if (message.password !== '') {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckPasswordRequest>, I>>(
    base?: I,
  ): CheckPasswordRequest {
    return CheckPasswordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckPasswordRequest>, I>>(
    object: I,
  ): CheckPasswordRequest {
    const message = createBaseCheckPasswordRequest();
    message.userId = object.userId ?? '';
    message.password = object.password ?? '';
    return message;
  },
};

function createBaseCheckPasswordResponse(): CheckPasswordResponse {
  return { success: false, errorMessage: '' };
}

export const CheckPasswordResponse = {
  encode(
    message: CheckPasswordResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CheckPasswordResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckPasswordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckPasswordResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: CheckPasswordResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckPasswordResponse>, I>>(
    base?: I,
  ): CheckPasswordResponse {
    return CheckPasswordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckPasswordResponse>, I>>(
    object: I,
  ): CheckPasswordResponse {
    const message = createBaseCheckPasswordResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseGetUserListRequest(): GetUserListRequest {
  return { page: 0, countPerPage: 0, email: '', name: '', memo: '', state: 0 };
}

export const GetUserListRequest = {
  encode(
    message: GetUserListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.countPerPage !== 0) {
      writer.uint32(16).int32(message.countPerPage);
    }
    if (message.email !== '') {
      writer.uint32(26).string(message.email);
    }
    if (message.name !== '') {
      writer.uint32(34).string(message.name);
    }
    if (message.memo !== '') {
      writer.uint32(42).string(message.memo);
    }
    if (message.state !== 0) {
      writer.uint32(48).int32(message.state);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetUserListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.countPerPage = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.memo = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.state = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserListRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      countPerPage: isSet(object.countPerPage)
        ? globalThis.Number(object.countPerPage)
        : 0,
      email: isSet(object.email) ? globalThis.String(object.email) : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      memo: isSet(object.memo) ? globalThis.String(object.memo) : '',
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
    };
  },

  toJSON(message: GetUserListRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.countPerPage !== 0) {
      obj.countPerPage = Math.round(message.countPerPage);
    }
    if (message.email !== '') {
      obj.email = message.email;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.memo !== '') {
      obj.memo = message.memo;
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserListRequest>, I>>(
    base?: I,
  ): GetUserListRequest {
    return GetUserListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserListRequest>, I>>(
    object: I,
  ): GetUserListRequest {
    const message = createBaseGetUserListRequest();
    message.page = object.page ?? 0;
    message.countPerPage = object.countPerPage ?? 0;
    message.email = object.email ?? '';
    message.name = object.name ?? '';
    message.memo = object.memo ?? '';
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseGetUserListResponse(): GetUserListResponse {
  return { success: false, errorMessage: '', userInfoList: [] };
}

export const GetUserListResponse = {
  encode(
    message: GetUserListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.userInfoList) {
      UserInfo.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetUserListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userInfoList.push(UserInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      userInfoList: globalThis.Array.isArray(object?.userInfoList)
        ? object.userInfoList.map((e: any) => UserInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetUserListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.userInfoList?.length) {
      obj.userInfoList = message.userInfoList.map(e => UserInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserListResponse>, I>>(
    base?: I,
  ): GetUserListResponse {
    return GetUserListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserListResponse>, I>>(
    object: I,
  ): GetUserListResponse {
    const message = createBaseGetUserListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.userInfoList =
      object.userInfoList?.map(e => UserInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateUserInfoRequest(): UpdateUserInfoRequest {
  return {
    userId: '',
    email: '',
    employeeNumber: '',
    name: '',
    departmentId: 0,
    positionId: 0,
    jobId: 0,
    phoneNumber: 0,
    extensionNumber: 0,
    state: 0,
  };
}

export const UpdateUserInfoRequest = {
  encode(
    message: UpdateUserInfoRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userId !== '') {
      writer.uint32(10).string(message.userId);
    }
    if (message.email !== '') {
      writer.uint32(18).string(message.email);
    }
    if (message.employeeNumber !== '') {
      writer.uint32(26).string(message.employeeNumber);
    }
    if (message.name !== '') {
      writer.uint32(34).string(message.name);
    }
    if (message.departmentId !== 0) {
      writer.uint32(40).int32(message.departmentId);
    }
    if (message.positionId !== 0) {
      writer.uint32(48).int32(message.positionId);
    }
    if (message.jobId !== 0) {
      writer.uint32(56).int32(message.jobId);
    }
    if (message.phoneNumber !== 0) {
      writer.uint32(64).int64(message.phoneNumber);
    }
    if (message.extensionNumber !== 0) {
      writer.uint32(72).int32(message.extensionNumber);
    }
    if (message.state !== 0) {
      writer.uint32(80).int32(message.state);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateUserInfoRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.employeeNumber = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.departmentId = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.positionId = reader.int32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.jobId = reader.int32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.phoneNumber = longToNumber(reader.int64());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.extensionNumber = reader.int32();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.state = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserInfoRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : '',
      email: isSet(object.email) ? globalThis.String(object.email) : '',
      employeeNumber: isSet(object.employeeNumber)
        ? globalThis.String(object.employeeNumber)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      departmentId: isSet(object.departmentId)
        ? globalThis.Number(object.departmentId)
        : 0,
      positionId: isSet(object.positionId)
        ? globalThis.Number(object.positionId)
        : 0,
      jobId: isSet(object.jobId) ? globalThis.Number(object.jobId) : 0,
      phoneNumber: isSet(object.phoneNumber)
        ? globalThis.Number(object.phoneNumber)
        : 0,
      extensionNumber: isSet(object.extensionNumber)
        ? globalThis.Number(object.extensionNumber)
        : 0,
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
    };
  },

  toJSON(message: UpdateUserInfoRequest): unknown {
    const obj: any = {};
    if (message.userId !== '') {
      obj.userId = message.userId;
    }
    if (message.email !== '') {
      obj.email = message.email;
    }
    if (message.employeeNumber !== '') {
      obj.employeeNumber = message.employeeNumber;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.departmentId !== 0) {
      obj.departmentId = Math.round(message.departmentId);
    }
    if (message.positionId !== 0) {
      obj.positionId = Math.round(message.positionId);
    }
    if (message.jobId !== 0) {
      obj.jobId = Math.round(message.jobId);
    }
    if (message.phoneNumber !== 0) {
      obj.phoneNumber = Math.round(message.phoneNumber);
    }
    if (message.extensionNumber !== 0) {
      obj.extensionNumber = Math.round(message.extensionNumber);
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserInfoRequest>, I>>(
    base?: I,
  ): UpdateUserInfoRequest {
    return UpdateUserInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserInfoRequest>, I>>(
    object: I,
  ): UpdateUserInfoRequest {
    const message = createBaseUpdateUserInfoRequest();
    message.userId = object.userId ?? '';
    message.email = object.email ?? '';
    message.employeeNumber = object.employeeNumber ?? '';
    message.name = object.name ?? '';
    message.departmentId = object.departmentId ?? 0;
    message.positionId = object.positionId ?? 0;
    message.jobId = object.jobId ?? 0;
    message.phoneNumber = object.phoneNumber ?? 0;
    message.extensionNumber = object.extensionNumber ?? 0;
    message.state = object.state ?? 0;
    return message;
  },
};

function createBaseUpdateUserInfoResponse(): UpdateUserInfoResponse {
  return { success: false, errorMessage: '' };
}

export const UpdateUserInfoResponse = {
  encode(
    message: UpdateUserInfoResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateUserInfoResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserInfoResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: UpdateUserInfoResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserInfoResponse>, I>>(
    base?: I,
  ): UpdateUserInfoResponse {
    return UpdateUserInfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserInfoResponse>, I>>(
    object: I,
  ): UpdateUserInfoResponse {
    const message = createBaseUpdateUserInfoResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

export type AdminUserServiceService = typeof AdminUserServiceService;
export const AdminUserServiceService = {
  signUp: {
    path: '/admin.AdminUserService/SignUp',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SignUpRequest) =>
      Buffer.from(SignUpRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SignUpRequest.decode(value),
    responseSerialize: (value: SignUpResponse) =>
      Buffer.from(SignUpResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SignUpResponse.decode(value),
  },
  signIn: {
    path: '/admin.AdminUserService/SignIn',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SignInRequest) =>
      Buffer.from(SignInRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SignInRequest.decode(value),
    responseSerialize: (value: SignInResponse) =>
      Buffer.from(SignInResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SignInResponse.decode(value),
  },
  sendEmailAuthCode: {
    path: '/admin.AdminUserService/SendEmailAuthCode',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SendEmailAuthCodeRequest) =>
      Buffer.from(SendEmailAuthCodeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      SendEmailAuthCodeRequest.decode(value),
    responseSerialize: (value: SendEmailAuthCodeResponse) =>
      Buffer.from(SendEmailAuthCodeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      SendEmailAuthCodeResponse.decode(value),
  },
  issueTemporaryUserPassword: {
    path: '/admin.AdminUserService/IssueTemporaryUserPassword',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: IssueTemporaryUserPasswordRequest) =>
      Buffer.from(IssueTemporaryUserPasswordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      IssueTemporaryUserPasswordRequest.decode(value),
    responseSerialize: (value: IssueTemporaryUserPasswordResponse) =>
      Buffer.from(IssueTemporaryUserPasswordResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      IssueTemporaryUserPasswordResponse.decode(value),
  },
  updateUserPassword: {
    path: '/admin.AdminUserService/UpdateUserPassword',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateUserPasswordRequest) =>
      Buffer.from(UpdateUserPasswordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      UpdateUserPasswordRequest.decode(value),
    responseSerialize: (value: UpdateUserPasswordResponse) =>
      Buffer.from(UpdateUserPasswordResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      UpdateUserPasswordResponse.decode(value),
  },
  getUserInfo: {
    path: '/admin.AdminUserService/GetUserInfo',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserInfoRequest) =>
      Buffer.from(GetUserInfoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetUserInfoRequest.decode(value),
    responseSerialize: (value: GetUserInfoResponse) =>
      Buffer.from(GetUserInfoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetUserInfoResponse.decode(value),
  },
  getUserMenus: {
    path: '/admin.AdminUserService/GetUserMenus',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserInfoRequest) =>
      Buffer.from(GetUserInfoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetUserInfoRequest.decode(value),
    responseSerialize: (value: GetUserMenusResponse) =>
      Buffer.from(GetUserMenusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetUserMenusResponse.decode(value),
  },
  checkPassword: {
    path: '/admin.AdminUserService/CheckPassword',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CheckPasswordRequest) =>
      Buffer.from(CheckPasswordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CheckPasswordRequest.decode(value),
    responseSerialize: (value: CheckPasswordResponse) =>
      Buffer.from(CheckPasswordResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CheckPasswordResponse.decode(value),
  },
  getUserList: {
    path: '/admin.AdminUserService/GetUserList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserListRequest) =>
      Buffer.from(GetUserListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetUserListRequest.decode(value),
    responseSerialize: (value: GetUserListResponse) =>
      Buffer.from(GetUserListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetUserListResponse.decode(value),
  },
  updateUserInfo: {
    path: '/admin.AdminUserService/UpdateUserInfo',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateUserInfoRequest) =>
      Buffer.from(UpdateUserInfoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateUserInfoRequest.decode(value),
    responseSerialize: (value: UpdateUserInfoResponse) =>
      Buffer.from(UpdateUserInfoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      UpdateUserInfoResponse.decode(value),
  },
} as const;

export interface AdminUserServiceServer extends UntypedServiceImplementation {
  signUp: handleUnaryCall<SignUpRequest, SignUpResponse>;
  signIn: handleUnaryCall<SignInRequest, SignInResponse>;
  sendEmailAuthCode: handleUnaryCall<
    SendEmailAuthCodeRequest,
    SendEmailAuthCodeResponse
  >;
  issueTemporaryUserPassword: handleUnaryCall<
    IssueTemporaryUserPasswordRequest,
    IssueTemporaryUserPasswordResponse
  >;
  updateUserPassword: handleUnaryCall<
    UpdateUserPasswordRequest,
    UpdateUserPasswordResponse
  >;
  getUserInfo: handleUnaryCall<GetUserInfoRequest, GetUserInfoResponse>;
  getUserMenus: handleUnaryCall<GetUserInfoRequest, GetUserMenusResponse>;
  checkPassword: handleUnaryCall<CheckPasswordRequest, CheckPasswordResponse>;
  getUserList: handleUnaryCall<GetUserListRequest, GetUserListResponse>;
  updateUserInfo: handleUnaryCall<
    UpdateUserInfoRequest,
    UpdateUserInfoResponse
  >;
}

export interface AdminUserServiceClient extends Client {
  signUp(
    request: SignUpRequest,
    callback: (error: ServiceError | null, response: SignUpResponse) => void,
  ): ClientUnaryCall;
  signUp(
    request: SignUpRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SignUpResponse) => void,
  ): ClientUnaryCall;
  signUp(
    request: SignUpRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SignUpResponse) => void,
  ): ClientUnaryCall;
  signIn(
    request: SignInRequest,
    callback: (error: ServiceError | null, response: SignInResponse) => void,
  ): ClientUnaryCall;
  signIn(
    request: SignInRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SignInResponse) => void,
  ): ClientUnaryCall;
  signIn(
    request: SignInRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SignInResponse) => void,
  ): ClientUnaryCall;
  sendEmailAuthCode(
    request: SendEmailAuthCodeRequest,
    callback: (
      error: ServiceError | null,
      response: SendEmailAuthCodeResponse,
    ) => void,
  ): ClientUnaryCall;
  sendEmailAuthCode(
    request: SendEmailAuthCodeRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: SendEmailAuthCodeResponse,
    ) => void,
  ): ClientUnaryCall;
  sendEmailAuthCode(
    request: SendEmailAuthCodeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: SendEmailAuthCodeResponse,
    ) => void,
  ): ClientUnaryCall;
  issueTemporaryUserPassword(
    request: IssueTemporaryUserPasswordRequest,
    callback: (
      error: ServiceError | null,
      response: IssueTemporaryUserPasswordResponse,
    ) => void,
  ): ClientUnaryCall;
  issueTemporaryUserPassword(
    request: IssueTemporaryUserPasswordRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: IssueTemporaryUserPasswordResponse,
    ) => void,
  ): ClientUnaryCall;
  issueTemporaryUserPassword(
    request: IssueTemporaryUserPasswordRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: IssueTemporaryUserPasswordResponse,
    ) => void,
  ): ClientUnaryCall;
  updateUserPassword(
    request: UpdateUserPasswordRequest,
    callback: (
      error: ServiceError | null,
      response: UpdateUserPasswordResponse,
    ) => void,
  ): ClientUnaryCall;
  updateUserPassword(
    request: UpdateUserPasswordRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: UpdateUserPasswordResponse,
    ) => void,
  ): ClientUnaryCall;
  updateUserPassword(
    request: UpdateUserPasswordRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: UpdateUserPasswordResponse,
    ) => void,
  ): ClientUnaryCall;
  getUserInfo(
    request: GetUserInfoRequest,
    callback: (
      error: ServiceError | null,
      response: GetUserInfoResponse,
    ) => void,
  ): ClientUnaryCall;
  getUserInfo(
    request: GetUserInfoRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetUserInfoResponse,
    ) => void,
  ): ClientUnaryCall;
  getUserInfo(
    request: GetUserInfoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetUserInfoResponse,
    ) => void,
  ): ClientUnaryCall;
  getUserMenus(
    request: GetUserInfoRequest,
    callback: (
      error: ServiceError | null,
      response: GetUserMenusResponse,
    ) => void,
  ): ClientUnaryCall;
  getUserMenus(
    request: GetUserInfoRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetUserMenusResponse,
    ) => void,
  ): ClientUnaryCall;
  getUserMenus(
    request: GetUserInfoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetUserMenusResponse,
    ) => void,
  ): ClientUnaryCall;
  checkPassword(
    request: CheckPasswordRequest,
    callback: (
      error: ServiceError | null,
      response: CheckPasswordResponse,
    ) => void,
  ): ClientUnaryCall;
  checkPassword(
    request: CheckPasswordRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: CheckPasswordResponse,
    ) => void,
  ): ClientUnaryCall;
  checkPassword(
    request: CheckPasswordRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: CheckPasswordResponse,
    ) => void,
  ): ClientUnaryCall;
  getUserList(
    request: GetUserListRequest,
    callback: (
      error: ServiceError | null,
      response: GetUserListResponse,
    ) => void,
  ): ClientUnaryCall;
  getUserList(
    request: GetUserListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetUserListResponse,
    ) => void,
  ): ClientUnaryCall;
  getUserList(
    request: GetUserListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetUserListResponse,
    ) => void,
  ): ClientUnaryCall;
  updateUserInfo(
    request: UpdateUserInfoRequest,
    callback: (
      error: ServiceError | null,
      response: UpdateUserInfoResponse,
    ) => void,
  ): ClientUnaryCall;
  updateUserInfo(
    request: UpdateUserInfoRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: UpdateUserInfoResponse,
    ) => void,
  ): ClientUnaryCall;
  updateUserInfo(
    request: UpdateUserInfoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: UpdateUserInfoResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const AdminUserServiceClient = makeGenericClientConstructor(
  AdminUserServiceService,
  'admin.AdminUserService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): AdminUserServiceClient;
  service: typeof AdminUserServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error('Value is larger than Number.MAX_SAFE_INTEGER');
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error('Value is smaller than Number.MIN_SAFE_INTEGER');
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
