// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: userPermission.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';
import { User, UserPermission } from './admin-common';

export const protobufPackage = 'admin';

export interface GetUserPermissionListInfoRequest {
  page: number;
  countPerPage: number;
  userId: string;
}

export interface GetUserPermissionListInfoResponse {
  success: boolean;
  errorMessage: string;
  userPermissionListInfo?: UserPermission | undefined;
}

export interface CreateUserPermissionRequest {
  userId: string;
  menuId: string;
  menuActionId: string;
}

export interface CreateUserPermissionResponse {
  success: boolean;
  errorMessage: string;
}

export interface DeleteUserPermissionRequest {
  userId: string;
  menuId: string;
  menuActionId: string;
}

export interface DeleteUserPermissionResponse {
  success: boolean;
  errorMessage: string;
}

/** 개별 권한이 없는 사용자 조회 요청 */
export interface GetUserListWithoutUserPermissionRequest {
  page: number;
  countPerPage: number;
}

/** 개별 권한이 없는 사용자 조회 응답 */
export interface GetUserListWithoutUserPermissionResponse {
  success: boolean;
  errorMessage: string;
  userList: User[];
}

function createBaseGetUserPermissionListInfoRequest(): GetUserPermissionListInfoRequest {
  return { page: 0, countPerPage: 0, userId: '' };
}

export const GetUserPermissionListInfoRequest = {
  encode(
    message: GetUserPermissionListInfoRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.countPerPage !== 0) {
      writer.uint32(16).int32(message.countPerPage);
    }
    if (message.userId !== '') {
      writer.uint32(26).string(message.userId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetUserPermissionListInfoRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserPermissionListInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.countPerPage = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserPermissionListInfoRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      countPerPage: isSet(object.countPerPage)
        ? globalThis.Number(object.countPerPage)
        : 0,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : '',
    };
  },

  toJSON(message: GetUserPermissionListInfoRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.countPerPage !== 0) {
      obj.countPerPage = Math.round(message.countPerPage);
    }
    if (message.userId !== '') {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserPermissionListInfoRequest>, I>>(
    base?: I,
  ): GetUserPermissionListInfoRequest {
    return GetUserPermissionListInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<GetUserPermissionListInfoRequest>, I>,
  >(object: I): GetUserPermissionListInfoRequest {
    const message = createBaseGetUserPermissionListInfoRequest();
    message.page = object.page ?? 0;
    message.countPerPage = object.countPerPage ?? 0;
    message.userId = object.userId ?? '';
    return message;
  },
};

function createBaseGetUserPermissionListInfoResponse(): GetUserPermissionListInfoResponse {
  return {
    success: false,
    errorMessage: '',
    userPermissionListInfo: undefined,
  };
}

export const GetUserPermissionListInfoResponse = {
  encode(
    message: GetUserPermissionListInfoResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.userPermissionListInfo !== undefined) {
      UserPermission.encode(
        message.userPermissionListInfo,
        writer.uint32(26).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetUserPermissionListInfoResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserPermissionListInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userPermissionListInfo = UserPermission.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserPermissionListInfoResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      userPermissionListInfo: isSet(object.userPermissionListInfo)
        ? UserPermission.fromJSON(object.userPermissionListInfo)
        : undefined,
    };
  },

  toJSON(message: GetUserPermissionListInfoResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.userPermissionListInfo !== undefined) {
      obj.userPermissionListInfo = UserPermission.toJSON(
        message.userPermissionListInfo,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserPermissionListInfoResponse>, I>>(
    base?: I,
  ): GetUserPermissionListInfoResponse {
    return GetUserPermissionListInfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<GetUserPermissionListInfoResponse>, I>,
  >(object: I): GetUserPermissionListInfoResponse {
    const message = createBaseGetUserPermissionListInfoResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.userPermissionListInfo =
      object.userPermissionListInfo !== undefined &&
      object.userPermissionListInfo !== null
        ? UserPermission.fromPartial(object.userPermissionListInfo)
        : undefined;
    return message;
  },
};

function createBaseCreateUserPermissionRequest(): CreateUserPermissionRequest {
  return { userId: '', menuId: '', menuActionId: '' };
}

export const CreateUserPermissionRequest = {
  encode(
    message: CreateUserPermissionRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userId !== '') {
      writer.uint32(10).string(message.userId);
    }
    if (message.menuId !== '') {
      writer.uint32(18).string(message.menuId);
    }
    if (message.menuActionId !== '') {
      writer.uint32(26).string(message.menuActionId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateUserPermissionRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.menuId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.menuActionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserPermissionRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : '',
      menuId: isSet(object.menuId) ? globalThis.String(object.menuId) : '',
      menuActionId: isSet(object.menuActionId)
        ? globalThis.String(object.menuActionId)
        : '',
    };
  },

  toJSON(message: CreateUserPermissionRequest): unknown {
    const obj: any = {};
    if (message.userId !== '') {
      obj.userId = message.userId;
    }
    if (message.menuId !== '') {
      obj.menuId = message.menuId;
    }
    if (message.menuActionId !== '') {
      obj.menuActionId = message.menuActionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateUserPermissionRequest>, I>>(
    base?: I,
  ): CreateUserPermissionRequest {
    return CreateUserPermissionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateUserPermissionRequest>, I>>(
    object: I,
  ): CreateUserPermissionRequest {
    const message = createBaseCreateUserPermissionRequest();
    message.userId = object.userId ?? '';
    message.menuId = object.menuId ?? '';
    message.menuActionId = object.menuActionId ?? '';
    return message;
  },
};

function createBaseCreateUserPermissionResponse(): CreateUserPermissionResponse {
  return { success: false, errorMessage: '' };
}

export const CreateUserPermissionResponse = {
  encode(
    message: CreateUserPermissionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateUserPermissionResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserPermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserPermissionResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: CreateUserPermissionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateUserPermissionResponse>, I>>(
    base?: I,
  ): CreateUserPermissionResponse {
    return CreateUserPermissionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateUserPermissionResponse>, I>>(
    object: I,
  ): CreateUserPermissionResponse {
    const message = createBaseCreateUserPermissionResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseDeleteUserPermissionRequest(): DeleteUserPermissionRequest {
  return { userId: '', menuId: '', menuActionId: '' };
}

export const DeleteUserPermissionRequest = {
  encode(
    message: DeleteUserPermissionRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userId !== '') {
      writer.uint32(10).string(message.userId);
    }
    if (message.menuId !== '') {
      writer.uint32(18).string(message.menuId);
    }
    if (message.menuActionId !== '') {
      writer.uint32(26).string(message.menuActionId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteUserPermissionRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteUserPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.menuId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.menuActionId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteUserPermissionRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : '',
      menuId: isSet(object.menuId) ? globalThis.String(object.menuId) : '',
      menuActionId: isSet(object.menuActionId)
        ? globalThis.String(object.menuActionId)
        : '',
    };
  },

  toJSON(message: DeleteUserPermissionRequest): unknown {
    const obj: any = {};
    if (message.userId !== '') {
      obj.userId = message.userId;
    }
    if (message.menuId !== '') {
      obj.menuId = message.menuId;
    }
    if (message.menuActionId !== '') {
      obj.menuActionId = message.menuActionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteUserPermissionRequest>, I>>(
    base?: I,
  ): DeleteUserPermissionRequest {
    return DeleteUserPermissionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteUserPermissionRequest>, I>>(
    object: I,
  ): DeleteUserPermissionRequest {
    const message = createBaseDeleteUserPermissionRequest();
    message.userId = object.userId ?? '';
    message.menuId = object.menuId ?? '';
    message.menuActionId = object.menuActionId ?? '';
    return message;
  },
};

function createBaseDeleteUserPermissionResponse(): DeleteUserPermissionResponse {
  return { success: false, errorMessage: '' };
}

export const DeleteUserPermissionResponse = {
  encode(
    message: DeleteUserPermissionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteUserPermissionResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteUserPermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteUserPermissionResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: DeleteUserPermissionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteUserPermissionResponse>, I>>(
    base?: I,
  ): DeleteUserPermissionResponse {
    return DeleteUserPermissionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteUserPermissionResponse>, I>>(
    object: I,
  ): DeleteUserPermissionResponse {
    const message = createBaseDeleteUserPermissionResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

function createBaseGetUserListWithoutUserPermissionRequest(): GetUserListWithoutUserPermissionRequest {
  return { page: 0, countPerPage: 0 };
}

export const GetUserListWithoutUserPermissionRequest = {
  encode(
    message: GetUserListWithoutUserPermissionRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.countPerPage !== 0) {
      writer.uint32(16).int32(message.countPerPage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetUserListWithoutUserPermissionRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserListWithoutUserPermissionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.countPerPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserListWithoutUserPermissionRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      countPerPage: isSet(object.countPerPage)
        ? globalThis.Number(object.countPerPage)
        : 0,
    };
  },

  toJSON(message: GetUserListWithoutUserPermissionRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.countPerPage !== 0) {
      obj.countPerPage = Math.round(message.countPerPage);
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<GetUserListWithoutUserPermissionRequest>, I>,
  >(base?: I): GetUserListWithoutUserPermissionRequest {
    return GetUserListWithoutUserPermissionRequest.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<GetUserListWithoutUserPermissionRequest>, I>,
  >(object: I): GetUserListWithoutUserPermissionRequest {
    const message = createBaseGetUserListWithoutUserPermissionRequest();
    message.page = object.page ?? 0;
    message.countPerPage = object.countPerPage ?? 0;
    return message;
  },
};

function createBaseGetUserListWithoutUserPermissionResponse(): GetUserListWithoutUserPermissionResponse {
  return { success: false, errorMessage: '', userList: [] };
}

export const GetUserListWithoutUserPermissionResponse = {
  encode(
    message: GetUserListWithoutUserPermissionResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.userList) {
      User.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetUserListWithoutUserPermissionResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserListWithoutUserPermissionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userList.push(User.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserListWithoutUserPermissionResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      userList: globalThis.Array.isArray(object?.userList)
        ? object.userList.map((e: any) => User.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetUserListWithoutUserPermissionResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.userList?.length) {
      obj.userList = message.userList.map(e => User.toJSON(e));
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<GetUserListWithoutUserPermissionResponse>, I>,
  >(base?: I): GetUserListWithoutUserPermissionResponse {
    return GetUserListWithoutUserPermissionResponse.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<GetUserListWithoutUserPermissionResponse>, I>,
  >(object: I): GetUserListWithoutUserPermissionResponse {
    const message = createBaseGetUserListWithoutUserPermissionResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.userList = object.userList?.map(e => User.fromPartial(e)) || [];
    return message;
  },
};

export type AdminUserPermissionServiceService =
  typeof AdminUserPermissionServiceService;
export const AdminUserPermissionServiceService = {
  getUserPermissionListInfo: {
    path: '/admin.AdminUserPermissionService/GetUserPermissionListInfo',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserPermissionListInfoRequest) =>
      Buffer.from(GetUserPermissionListInfoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      GetUserPermissionListInfoRequest.decode(value),
    responseSerialize: (value: GetUserPermissionListInfoResponse) =>
      Buffer.from(GetUserPermissionListInfoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetUserPermissionListInfoResponse.decode(value),
  },
  createUserPermission: {
    path: '/admin.AdminUserPermissionService/CreateUserPermission',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateUserPermissionRequest) =>
      Buffer.from(CreateUserPermissionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      CreateUserPermissionRequest.decode(value),
    responseSerialize: (value: CreateUserPermissionResponse) =>
      Buffer.from(CreateUserPermissionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      CreateUserPermissionResponse.decode(value),
  },
  deleteUserPermission: {
    path: '/admin.AdminUserPermissionService/DeleteUserPermission',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteUserPermissionRequest) =>
      Buffer.from(DeleteUserPermissionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      DeleteUserPermissionRequest.decode(value),
    responseSerialize: (value: DeleteUserPermissionResponse) =>
      Buffer.from(DeleteUserPermissionResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      DeleteUserPermissionResponse.decode(value),
  },
  /** 개별 권한이 없는 사용자 조회 */
  getUserListWithoutUserPermission: {
    path: '/admin.AdminUserPermissionService/GetUserListWithoutUserPermission',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserListWithoutUserPermissionRequest) =>
      Buffer.from(
        GetUserListWithoutUserPermissionRequest.encode(value).finish(),
      ),
    requestDeserialize: (value: Buffer) =>
      GetUserListWithoutUserPermissionRequest.decode(value),
    responseSerialize: (value: GetUserListWithoutUserPermissionResponse) =>
      Buffer.from(
        GetUserListWithoutUserPermissionResponse.encode(value).finish(),
      ),
    responseDeserialize: (value: Buffer) =>
      GetUserListWithoutUserPermissionResponse.decode(value),
  },
} as const;

export interface AdminUserPermissionServiceServer
  extends UntypedServiceImplementation {
  getUserPermissionListInfo: handleUnaryCall<
    GetUserPermissionListInfoRequest,
    GetUserPermissionListInfoResponse
  >;
  createUserPermission: handleUnaryCall<
    CreateUserPermissionRequest,
    CreateUserPermissionResponse
  >;
  deleteUserPermission: handleUnaryCall<
    DeleteUserPermissionRequest,
    DeleteUserPermissionResponse
  >;
  /** 개별 권한이 없는 사용자 조회 */
  getUserListWithoutUserPermission: handleUnaryCall<
    GetUserListWithoutUserPermissionRequest,
    GetUserListWithoutUserPermissionResponse
  >;
}

export interface AdminUserPermissionServiceClient extends Client {
  getUserPermissionListInfo(
    request: GetUserPermissionListInfoRequest,
    callback: (
      error: ServiceError | null,
      response: GetUserPermissionListInfoResponse,
    ) => void,
  ): ClientUnaryCall;
  getUserPermissionListInfo(
    request: GetUserPermissionListInfoRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetUserPermissionListInfoResponse,
    ) => void,
  ): ClientUnaryCall;
  getUserPermissionListInfo(
    request: GetUserPermissionListInfoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetUserPermissionListInfoResponse,
    ) => void,
  ): ClientUnaryCall;
  createUserPermission(
    request: CreateUserPermissionRequest,
    callback: (
      error: ServiceError | null,
      response: CreateUserPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  createUserPermission(
    request: CreateUserPermissionRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: CreateUserPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  createUserPermission(
    request: CreateUserPermissionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: CreateUserPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteUserPermission(
    request: DeleteUserPermissionRequest,
    callback: (
      error: ServiceError | null,
      response: DeleteUserPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteUserPermission(
    request: DeleteUserPermissionRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: DeleteUserPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteUserPermission(
    request: DeleteUserPermissionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: DeleteUserPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  /** 개별 권한이 없는 사용자 조회 */
  getUserListWithoutUserPermission(
    request: GetUserListWithoutUserPermissionRequest,
    callback: (
      error: ServiceError | null,
      response: GetUserListWithoutUserPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  getUserListWithoutUserPermission(
    request: GetUserListWithoutUserPermissionRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetUserListWithoutUserPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
  getUserListWithoutUserPermission(
    request: GetUserListWithoutUserPermissionRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetUserListWithoutUserPermissionResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const AdminUserPermissionServiceClient = makeGenericClientConstructor(
  AdminUserPermissionServiceService,
  'admin.AdminUserPermissionService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): AdminUserPermissionServiceClient;
  service: typeof AdminUserPermissionServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
