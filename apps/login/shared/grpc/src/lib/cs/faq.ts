// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: faq.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';

export const protobufPackage = 'cs';

export interface FAQ {
  id: number;
  category: string;
  title: string;
  question: string;
  answer: string;
  createdAt: string;
  updatedAt: string;
}

export interface CreateFAQRequest {
  category: string;
  title: string;
  question: string;
  answer: string;
}

export interface DefaultFAQResponse {
  success: boolean;
  errorMessage: string;
  faq?: FAQ | undefined;
}

export interface UpdateFAQRequest {
  id: number;
  category: string;
  title: string;
  question: string;
  answer: string;
}

export interface DeleteFAQRequest {
  id: number;
}

export interface GetFAQRequest {
  id: number;
}

export interface GetFAQResponse {
  success: boolean;
  errorMessage: string;
  faq?: FAQ | undefined;
}

export interface GetFAQsRequest {
  category: string;
  /** 검색어 */
  text: string;
  page: number;
  countPerPage: number;
}

export interface GetFAQsResponse {
  success: boolean;
  errorMessage: string;
  faqList: FAQ[];
}

function createBaseFAQ(): FAQ {
  return {
    id: 0,
    category: '',
    title: '',
    question: '',
    answer: '',
    createdAt: '',
    updatedAt: '',
  };
}

export const FAQ = {
  encode(
    message: FAQ,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.category !== '') {
      writer.uint32(18).string(message.category);
    }
    if (message.title !== '') {
      writer.uint32(26).string(message.title);
    }
    if (message.question !== '') {
      writer.uint32(34).string(message.question);
    }
    if (message.answer !== '') {
      writer.uint32(42).string(message.answer);
    }
    if (message.createdAt !== '') {
      writer.uint32(50).string(message.createdAt);
    }
    if (message.updatedAt !== '') {
      writer.uint32(58).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FAQ {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFAQ();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.category = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.question = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.answer = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FAQ {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      category: isSet(object.category)
        ? globalThis.String(object.category)
        : '',
      title: isSet(object.title) ? globalThis.String(object.title) : '',
      question: isSet(object.question)
        ? globalThis.String(object.question)
        : '',
      answer: isSet(object.answer) ? globalThis.String(object.answer) : '',
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
      updatedAt: isSet(object.updatedAt)
        ? globalThis.String(object.updatedAt)
        : '',
    };
  },

  toJSON(message: FAQ): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.category !== '') {
      obj.category = message.category;
    }
    if (message.title !== '') {
      obj.title = message.title;
    }
    if (message.question !== '') {
      obj.question = message.question;
    }
    if (message.answer !== '') {
      obj.answer = message.answer;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== '') {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FAQ>, I>>(base?: I): FAQ {
    return FAQ.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FAQ>, I>>(object: I): FAQ {
    const message = createBaseFAQ();
    message.id = object.id ?? 0;
    message.category = object.category ?? '';
    message.title = object.title ?? '';
    message.question = object.question ?? '';
    message.answer = object.answer ?? '';
    message.createdAt = object.createdAt ?? '';
    message.updatedAt = object.updatedAt ?? '';
    return message;
  },
};

function createBaseCreateFAQRequest(): CreateFAQRequest {
  return { category: '', title: '', question: '', answer: '' };
}

export const CreateFAQRequest = {
  encode(
    message: CreateFAQRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.category !== '') {
      writer.uint32(10).string(message.category);
    }
    if (message.title !== '') {
      writer.uint32(18).string(message.title);
    }
    if (message.question !== '') {
      writer.uint32(26).string(message.question);
    }
    if (message.answer !== '') {
      writer.uint32(34).string(message.answer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFAQRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFAQRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.category = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.question = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.answer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateFAQRequest {
    return {
      category: isSet(object.category)
        ? globalThis.String(object.category)
        : '',
      title: isSet(object.title) ? globalThis.String(object.title) : '',
      question: isSet(object.question)
        ? globalThis.String(object.question)
        : '',
      answer: isSet(object.answer) ? globalThis.String(object.answer) : '',
    };
  },

  toJSON(message: CreateFAQRequest): unknown {
    const obj: any = {};
    if (message.category !== '') {
      obj.category = message.category;
    }
    if (message.title !== '') {
      obj.title = message.title;
    }
    if (message.question !== '') {
      obj.question = message.question;
    }
    if (message.answer !== '') {
      obj.answer = message.answer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateFAQRequest>, I>>(
    base?: I,
  ): CreateFAQRequest {
    return CreateFAQRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateFAQRequest>, I>>(
    object: I,
  ): CreateFAQRequest {
    const message = createBaseCreateFAQRequest();
    message.category = object.category ?? '';
    message.title = object.title ?? '';
    message.question = object.question ?? '';
    message.answer = object.answer ?? '';
    return message;
  },
};

function createBaseDefaultFAQResponse(): DefaultFAQResponse {
  return { success: false, errorMessage: '', faq: undefined };
}

export const DefaultFAQResponse = {
  encode(
    message: DefaultFAQResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.faq !== undefined) {
      FAQ.encode(message.faq, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DefaultFAQResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDefaultFAQResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.faq = FAQ.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DefaultFAQResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      faq: isSet(object.faq) ? FAQ.fromJSON(object.faq) : undefined,
    };
  },

  toJSON(message: DefaultFAQResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.faq !== undefined) {
      obj.faq = FAQ.toJSON(message.faq);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DefaultFAQResponse>, I>>(
    base?: I,
  ): DefaultFAQResponse {
    return DefaultFAQResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DefaultFAQResponse>, I>>(
    object: I,
  ): DefaultFAQResponse {
    const message = createBaseDefaultFAQResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.faq =
      object.faq !== undefined && object.faq !== null
        ? FAQ.fromPartial(object.faq)
        : undefined;
    return message;
  },
};

function createBaseUpdateFAQRequest(): UpdateFAQRequest {
  return { id: 0, category: '', title: '', question: '', answer: '' };
}

export const UpdateFAQRequest = {
  encode(
    message: UpdateFAQRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.category !== '') {
      writer.uint32(18).string(message.category);
    }
    if (message.title !== '') {
      writer.uint32(26).string(message.title);
    }
    if (message.question !== '') {
      writer.uint32(34).string(message.question);
    }
    if (message.answer !== '') {
      writer.uint32(42).string(message.answer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateFAQRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateFAQRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.category = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.question = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.answer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateFAQRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      category: isSet(object.category)
        ? globalThis.String(object.category)
        : '',
      title: isSet(object.title) ? globalThis.String(object.title) : '',
      question: isSet(object.question)
        ? globalThis.String(object.question)
        : '',
      answer: isSet(object.answer) ? globalThis.String(object.answer) : '',
    };
  },

  toJSON(message: UpdateFAQRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.category !== '') {
      obj.category = message.category;
    }
    if (message.title !== '') {
      obj.title = message.title;
    }
    if (message.question !== '') {
      obj.question = message.question;
    }
    if (message.answer !== '') {
      obj.answer = message.answer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateFAQRequest>, I>>(
    base?: I,
  ): UpdateFAQRequest {
    return UpdateFAQRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateFAQRequest>, I>>(
    object: I,
  ): UpdateFAQRequest {
    const message = createBaseUpdateFAQRequest();
    message.id = object.id ?? 0;
    message.category = object.category ?? '';
    message.title = object.title ?? '';
    message.question = object.question ?? '';
    message.answer = object.answer ?? '';
    return message;
  },
};

function createBaseDeleteFAQRequest(): DeleteFAQRequest {
  return { id: 0 };
}

export const DeleteFAQRequest = {
  encode(
    message: DeleteFAQRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteFAQRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteFAQRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteFAQRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: DeleteFAQRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteFAQRequest>, I>>(
    base?: I,
  ): DeleteFAQRequest {
    return DeleteFAQRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteFAQRequest>, I>>(
    object: I,
  ): DeleteFAQRequest {
    const message = createBaseDeleteFAQRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetFAQRequest(): GetFAQRequest {
  return { id: 0 };
}

export const GetFAQRequest = {
  encode(
    message: GetFAQRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFAQRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFAQRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFAQRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: GetFAQRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFAQRequest>, I>>(
    base?: I,
  ): GetFAQRequest {
    return GetFAQRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFAQRequest>, I>>(
    object: I,
  ): GetFAQRequest {
    const message = createBaseGetFAQRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetFAQResponse(): GetFAQResponse {
  return { success: false, errorMessage: '', faq: undefined };
}

export const GetFAQResponse = {
  encode(
    message: GetFAQResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.faq !== undefined) {
      FAQ.encode(message.faq, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFAQResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFAQResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.faq = FAQ.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFAQResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      faq: isSet(object.faq) ? FAQ.fromJSON(object.faq) : undefined,
    };
  },

  toJSON(message: GetFAQResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.faq !== undefined) {
      obj.faq = FAQ.toJSON(message.faq);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFAQResponse>, I>>(
    base?: I,
  ): GetFAQResponse {
    return GetFAQResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFAQResponse>, I>>(
    object: I,
  ): GetFAQResponse {
    const message = createBaseGetFAQResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.faq =
      object.faq !== undefined && object.faq !== null
        ? FAQ.fromPartial(object.faq)
        : undefined;
    return message;
  },
};

function createBaseGetFAQsRequest(): GetFAQsRequest {
  return { category: '', text: '', page: 0, countPerPage: 0 };
}

export const GetFAQsRequest = {
  encode(
    message: GetFAQsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.category !== '') {
      writer.uint32(10).string(message.category);
    }
    if (message.text !== '') {
      writer.uint32(18).string(message.text);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.countPerPage !== 0) {
      writer.uint32(32).int32(message.countPerPage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFAQsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFAQsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.category = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.countPerPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFAQsRequest {
    return {
      category: isSet(object.category)
        ? globalThis.String(object.category)
        : '',
      text: isSet(object.text) ? globalThis.String(object.text) : '',
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      countPerPage: isSet(object.countPerPage)
        ? globalThis.Number(object.countPerPage)
        : 0,
    };
  },

  toJSON(message: GetFAQsRequest): unknown {
    const obj: any = {};
    if (message.category !== '') {
      obj.category = message.category;
    }
    if (message.text !== '') {
      obj.text = message.text;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.countPerPage !== 0) {
      obj.countPerPage = Math.round(message.countPerPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFAQsRequest>, I>>(
    base?: I,
  ): GetFAQsRequest {
    return GetFAQsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFAQsRequest>, I>>(
    object: I,
  ): GetFAQsRequest {
    const message = createBaseGetFAQsRequest();
    message.category = object.category ?? '';
    message.text = object.text ?? '';
    message.page = object.page ?? 0;
    message.countPerPage = object.countPerPage ?? 0;
    return message;
  },
};

function createBaseGetFAQsResponse(): GetFAQsResponse {
  return { success: false, errorMessage: '', faqList: [] };
}

export const GetFAQsResponse = {
  encode(
    message: GetFAQsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.faqList) {
      FAQ.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFAQsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFAQsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.faqList.push(FAQ.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFAQsResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      faqList: globalThis.Array.isArray(object?.faqList)
        ? object.faqList.map((e: any) => FAQ.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetFAQsResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.faqList?.length) {
      obj.faqList = message.faqList.map(e => FAQ.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetFAQsResponse>, I>>(
    base?: I,
  ): GetFAQsResponse {
    return GetFAQsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetFAQsResponse>, I>>(
    object: I,
  ): GetFAQsResponse {
    const message = createBaseGetFAQsResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.faqList = object.faqList?.map(e => FAQ.fromPartial(e)) || [];
    return message;
  },
};

export type FAQServiceService = typeof FAQServiceService;
export const FAQServiceService = {
  createFaq: {
    path: '/cs.FAQService/CreateFAQ',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateFAQRequest) =>
      Buffer.from(CreateFAQRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateFAQRequest.decode(value),
    responseSerialize: (value: DefaultFAQResponse) =>
      Buffer.from(DefaultFAQResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultFAQResponse.decode(value),
  },
  updateFaq: {
    path: '/cs.FAQService/UpdateFAQ',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateFAQRequest) =>
      Buffer.from(UpdateFAQRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateFAQRequest.decode(value),
    responseSerialize: (value: DefaultFAQResponse) =>
      Buffer.from(DefaultFAQResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultFAQResponse.decode(value),
  },
  deleteFaq: {
    path: '/cs.FAQService/DeleteFAQ',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteFAQRequest) =>
      Buffer.from(DeleteFAQRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteFAQRequest.decode(value),
    responseSerialize: (value: DefaultFAQResponse) =>
      Buffer.from(DefaultFAQResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultFAQResponse.decode(value),
  },
  getFaq: {
    path: '/cs.FAQService/GetFAQ',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetFAQRequest) =>
      Buffer.from(GetFAQRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetFAQRequest.decode(value),
    responseSerialize: (value: GetFAQResponse) =>
      Buffer.from(GetFAQResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetFAQResponse.decode(value),
  },
  getFaQs: {
    path: '/cs.FAQService/GetFAQs',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetFAQsRequest) =>
      Buffer.from(GetFAQsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetFAQsRequest.decode(value),
    responseSerialize: (value: GetFAQsResponse) =>
      Buffer.from(GetFAQsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetFAQsResponse.decode(value),
  },
} as const;

export interface FAQServiceServer extends UntypedServiceImplementation {
  createFaq: handleUnaryCall<CreateFAQRequest, DefaultFAQResponse>;
  updateFaq: handleUnaryCall<UpdateFAQRequest, DefaultFAQResponse>;
  deleteFaq: handleUnaryCall<DeleteFAQRequest, DefaultFAQResponse>;
  getFaq: handleUnaryCall<GetFAQRequest, GetFAQResponse>;
  getFaQs: handleUnaryCall<GetFAQsRequest, GetFAQsResponse>;
}

export interface FAQServiceClient extends Client {
  createFaq(
    request: CreateFAQRequest,
    callback: (
      error: ServiceError | null,
      response: DefaultFAQResponse,
    ) => void,
  ): ClientUnaryCall;
  createFaq(
    request: CreateFAQRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: DefaultFAQResponse,
    ) => void,
  ): ClientUnaryCall;
  createFaq(
    request: CreateFAQRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: DefaultFAQResponse,
    ) => void,
  ): ClientUnaryCall;
  updateFaq(
    request: UpdateFAQRequest,
    callback: (
      error: ServiceError | null,
      response: DefaultFAQResponse,
    ) => void,
  ): ClientUnaryCall;
  updateFaq(
    request: UpdateFAQRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: DefaultFAQResponse,
    ) => void,
  ): ClientUnaryCall;
  updateFaq(
    request: UpdateFAQRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: DefaultFAQResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteFaq(
    request: DeleteFAQRequest,
    callback: (
      error: ServiceError | null,
      response: DefaultFAQResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteFaq(
    request: DeleteFAQRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: DefaultFAQResponse,
    ) => void,
  ): ClientUnaryCall;
  deleteFaq(
    request: DeleteFAQRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: DefaultFAQResponse,
    ) => void,
  ): ClientUnaryCall;
  getFaq(
    request: GetFAQRequest,
    callback: (error: ServiceError | null, response: GetFAQResponse) => void,
  ): ClientUnaryCall;
  getFaq(
    request: GetFAQRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetFAQResponse) => void,
  ): ClientUnaryCall;
  getFaq(
    request: GetFAQRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetFAQResponse) => void,
  ): ClientUnaryCall;
  getFaQs(
    request: GetFAQsRequest,
    callback: (error: ServiceError | null, response: GetFAQsResponse) => void,
  ): ClientUnaryCall;
  getFaQs(
    request: GetFAQsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetFAQsResponse) => void,
  ): ClientUnaryCall;
  getFaQs(
    request: GetFAQsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetFAQsResponse) => void,
  ): ClientUnaryCall;
}

export const FAQServiceClient = makeGenericClientConstructor(
  FAQServiceService,
  'cs.FAQService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): FAQServiceClient;
  service: typeof FAQServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
