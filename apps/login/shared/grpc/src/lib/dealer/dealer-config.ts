// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: dealer-config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';

export const protobufPackage = 'dealer';

export interface Game {
  gameId: string;
  en: string;
  ko: string;
  createdAt: string;
  updatedAt: string;
}

export interface MoneyTable {
  ruleMoneyTableId: number;
  gameId: string;
  level: number;
  ante: string;
  smallBlind: string;
  bigBlind: string;
  minBuyIn: string;
  maxBuyIn: string;
  createdAt: string;
  updatedAt: string;
}

export interface Empty {}

export interface GamesResponse {
  success: boolean;
  errorMessage: string;
  game: Game[];
}

export interface MoneyTableRequest {
  moneyTableId: number;
  gameId: string;
  level: number;
  ante: string;
  smallBlind: string;
  bigBlind: string;
  minBuyIn: string;
  maxBuyIn: string;
}

export interface MoneyTableResponse {
  success: boolean;
  errorMessage: string;
  moneyTable?: MoneyTable | undefined;
}

export interface MoneyTablesResponse {
  success: boolean;
  errorMessage: string;
  moneyTable: MoneyTable[];
}

function createBaseGame(): Game {
  return { gameId: '', en: '', ko: '', createdAt: '', updatedAt: '' };
}

export const Game = {
  encode(
    message: Game,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.gameId !== '') {
      writer.uint32(10).string(message.gameId);
    }
    if (message.en !== '') {
      writer.uint32(18).string(message.en);
    }
    if (message.ko !== '') {
      writer.uint32(26).string(message.ko);
    }
    if (message.createdAt !== '') {
      writer.uint32(34).string(message.createdAt);
    }
    if (message.updatedAt !== '') {
      writer.uint32(42).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Game {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.gameId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.en = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ko = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Game {
    return {
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : '',
      en: isSet(object.en) ? globalThis.String(object.en) : '',
      ko: isSet(object.ko) ? globalThis.String(object.ko) : '',
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
      updatedAt: isSet(object.updatedAt)
        ? globalThis.String(object.updatedAt)
        : '',
    };
  },

  toJSON(message: Game): unknown {
    const obj: any = {};
    if (message.gameId !== '') {
      obj.gameId = message.gameId;
    }
    if (message.en !== '') {
      obj.en = message.en;
    }
    if (message.ko !== '') {
      obj.ko = message.ko;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== '') {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Game>, I>>(base?: I): Game {
    return Game.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Game>, I>>(object: I): Game {
    const message = createBaseGame();
    message.gameId = object.gameId ?? '';
    message.en = object.en ?? '';
    message.ko = object.ko ?? '';
    message.createdAt = object.createdAt ?? '';
    message.updatedAt = object.updatedAt ?? '';
    return message;
  },
};

function createBaseMoneyTable(): MoneyTable {
  return {
    ruleMoneyTableId: 0,
    gameId: '',
    level: 0,
    ante: '',
    smallBlind: '',
    bigBlind: '',
    minBuyIn: '',
    maxBuyIn: '',
    createdAt: '',
    updatedAt: '',
  };
}

export const MoneyTable = {
  encode(
    message: MoneyTable,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.ruleMoneyTableId !== 0) {
      writer.uint32(8).int32(message.ruleMoneyTableId);
    }
    if (message.gameId !== '') {
      writer.uint32(18).string(message.gameId);
    }
    if (message.level !== 0) {
      writer.uint32(24).int32(message.level);
    }
    if (message.ante !== '') {
      writer.uint32(34).string(message.ante);
    }
    if (message.smallBlind !== '') {
      writer.uint32(42).string(message.smallBlind);
    }
    if (message.bigBlind !== '') {
      writer.uint32(50).string(message.bigBlind);
    }
    if (message.minBuyIn !== '') {
      writer.uint32(58).string(message.minBuyIn);
    }
    if (message.maxBuyIn !== '') {
      writer.uint32(66).string(message.maxBuyIn);
    }
    if (message.createdAt !== '') {
      writer.uint32(74).string(message.createdAt);
    }
    if (message.updatedAt !== '') {
      writer.uint32(82).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MoneyTable {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMoneyTable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.ruleMoneyTableId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gameId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.level = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.ante = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.smallBlind = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bigBlind = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.minBuyIn = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.maxBuyIn = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MoneyTable {
    return {
      ruleMoneyTableId: isSet(object.ruleMoneyTableId)
        ? globalThis.Number(object.ruleMoneyTableId)
        : 0,
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : '',
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      ante: isSet(object.ante) ? globalThis.String(object.ante) : '',
      smallBlind: isSet(object.smallBlind)
        ? globalThis.String(object.smallBlind)
        : '',
      bigBlind: isSet(object.bigBlind)
        ? globalThis.String(object.bigBlind)
        : '',
      minBuyIn: isSet(object.minBuyIn)
        ? globalThis.String(object.minBuyIn)
        : '',
      maxBuyIn: isSet(object.maxBuyIn)
        ? globalThis.String(object.maxBuyIn)
        : '',
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
      updatedAt: isSet(object.updatedAt)
        ? globalThis.String(object.updatedAt)
        : '',
    };
  },

  toJSON(message: MoneyTable): unknown {
    const obj: any = {};
    if (message.ruleMoneyTableId !== 0) {
      obj.ruleMoneyTableId = Math.round(message.ruleMoneyTableId);
    }
    if (message.gameId !== '') {
      obj.gameId = message.gameId;
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.ante !== '') {
      obj.ante = message.ante;
    }
    if (message.smallBlind !== '') {
      obj.smallBlind = message.smallBlind;
    }
    if (message.bigBlind !== '') {
      obj.bigBlind = message.bigBlind;
    }
    if (message.minBuyIn !== '') {
      obj.minBuyIn = message.minBuyIn;
    }
    if (message.maxBuyIn !== '') {
      obj.maxBuyIn = message.maxBuyIn;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== '') {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MoneyTable>, I>>(base?: I): MoneyTable {
    return MoneyTable.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MoneyTable>, I>>(
    object: I,
  ): MoneyTable {
    const message = createBaseMoneyTable();
    message.ruleMoneyTableId = object.ruleMoneyTableId ?? 0;
    message.gameId = object.gameId ?? '';
    message.level = object.level ?? 0;
    message.ante = object.ante ?? '';
    message.smallBlind = object.smallBlind ?? '';
    message.bigBlind = object.bigBlind ?? '';
    message.minBuyIn = object.minBuyIn ?? '';
    message.maxBuyIn = object.maxBuyIn ?? '';
    message.createdAt = object.createdAt ?? '';
    message.updatedAt = object.updatedAt ?? '';
    return message;
  },
};

function createBaseEmpty(): Empty {
  return {};
}

export const Empty = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseGamesResponse(): GamesResponse {
  return { success: false, errorMessage: '', game: [] };
}

export const GamesResponse = {
  encode(
    message: GamesResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.game) {
      Game.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GamesResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGamesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.game.push(Game.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GamesResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      game: globalThis.Array.isArray(object?.game)
        ? object.game.map((e: any) => Game.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GamesResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.game?.length) {
      obj.game = message.game.map(e => Game.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GamesResponse>, I>>(
    base?: I,
  ): GamesResponse {
    return GamesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GamesResponse>, I>>(
    object: I,
  ): GamesResponse {
    const message = createBaseGamesResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.game = object.game?.map(e => Game.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMoneyTableRequest(): MoneyTableRequest {
  return {
    moneyTableId: 0,
    gameId: '',
    level: 0,
    ante: '',
    smallBlind: '',
    bigBlind: '',
    minBuyIn: '',
    maxBuyIn: '',
  };
}

export const MoneyTableRequest = {
  encode(
    message: MoneyTableRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.moneyTableId !== 0) {
      writer.uint32(8).int32(message.moneyTableId);
    }
    if (message.gameId !== '') {
      writer.uint32(18).string(message.gameId);
    }
    if (message.level !== 0) {
      writer.uint32(24).int32(message.level);
    }
    if (message.ante !== '') {
      writer.uint32(34).string(message.ante);
    }
    if (message.smallBlind !== '') {
      writer.uint32(42).string(message.smallBlind);
    }
    if (message.bigBlind !== '') {
      writer.uint32(50).string(message.bigBlind);
    }
    if (message.minBuyIn !== '') {
      writer.uint32(58).string(message.minBuyIn);
    }
    if (message.maxBuyIn !== '') {
      writer.uint32(66).string(message.maxBuyIn);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MoneyTableRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMoneyTableRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.moneyTableId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gameId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.level = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.ante = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.smallBlind = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bigBlind = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.minBuyIn = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.maxBuyIn = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MoneyTableRequest {
    return {
      moneyTableId: isSet(object.moneyTableId)
        ? globalThis.Number(object.moneyTableId)
        : 0,
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : '',
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      ante: isSet(object.ante) ? globalThis.String(object.ante) : '',
      smallBlind: isSet(object.smallBlind)
        ? globalThis.String(object.smallBlind)
        : '',
      bigBlind: isSet(object.bigBlind)
        ? globalThis.String(object.bigBlind)
        : '',
      minBuyIn: isSet(object.minBuyIn)
        ? globalThis.String(object.minBuyIn)
        : '',
      maxBuyIn: isSet(object.maxBuyIn)
        ? globalThis.String(object.maxBuyIn)
        : '',
    };
  },

  toJSON(message: MoneyTableRequest): unknown {
    const obj: any = {};
    if (message.moneyTableId !== 0) {
      obj.moneyTableId = Math.round(message.moneyTableId);
    }
    if (message.gameId !== '') {
      obj.gameId = message.gameId;
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.ante !== '') {
      obj.ante = message.ante;
    }
    if (message.smallBlind !== '') {
      obj.smallBlind = message.smallBlind;
    }
    if (message.bigBlind !== '') {
      obj.bigBlind = message.bigBlind;
    }
    if (message.minBuyIn !== '') {
      obj.minBuyIn = message.minBuyIn;
    }
    if (message.maxBuyIn !== '') {
      obj.maxBuyIn = message.maxBuyIn;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MoneyTableRequest>, I>>(
    base?: I,
  ): MoneyTableRequest {
    return MoneyTableRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MoneyTableRequest>, I>>(
    object: I,
  ): MoneyTableRequest {
    const message = createBaseMoneyTableRequest();
    message.moneyTableId = object.moneyTableId ?? 0;
    message.gameId = object.gameId ?? '';
    message.level = object.level ?? 0;
    message.ante = object.ante ?? '';
    message.smallBlind = object.smallBlind ?? '';
    message.bigBlind = object.bigBlind ?? '';
    message.minBuyIn = object.minBuyIn ?? '';
    message.maxBuyIn = object.maxBuyIn ?? '';
    return message;
  },
};

function createBaseMoneyTableResponse(): MoneyTableResponse {
  return { success: false, errorMessage: '', moneyTable: undefined };
}

export const MoneyTableResponse = {
  encode(
    message: MoneyTableResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.moneyTable !== undefined) {
      MoneyTable.encode(message.moneyTable, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MoneyTableResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMoneyTableResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.moneyTable = MoneyTable.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MoneyTableResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      moneyTable: isSet(object.moneyTable)
        ? MoneyTable.fromJSON(object.moneyTable)
        : undefined,
    };
  },

  toJSON(message: MoneyTableResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.moneyTable !== undefined) {
      obj.moneyTable = MoneyTable.toJSON(message.moneyTable);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MoneyTableResponse>, I>>(
    base?: I,
  ): MoneyTableResponse {
    return MoneyTableResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MoneyTableResponse>, I>>(
    object: I,
  ): MoneyTableResponse {
    const message = createBaseMoneyTableResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.moneyTable =
      object.moneyTable !== undefined && object.moneyTable !== null
        ? MoneyTable.fromPartial(object.moneyTable)
        : undefined;
    return message;
  },
};

function createBaseMoneyTablesResponse(): MoneyTablesResponse {
  return { success: false, errorMessage: '', moneyTable: [] };
}

export const MoneyTablesResponse = {
  encode(
    message: MoneyTablesResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.moneyTable) {
      MoneyTable.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MoneyTablesResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMoneyTablesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.moneyTable.push(MoneyTable.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MoneyTablesResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      moneyTable: globalThis.Array.isArray(object?.moneyTable)
        ? object.moneyTable.map((e: any) => MoneyTable.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MoneyTablesResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.moneyTable?.length) {
      obj.moneyTable = message.moneyTable.map(e => MoneyTable.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MoneyTablesResponse>, I>>(
    base?: I,
  ): MoneyTablesResponse {
    return MoneyTablesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MoneyTablesResponse>, I>>(
    object: I,
  ): MoneyTablesResponse {
    const message = createBaseMoneyTablesResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.moneyTable =
      object.moneyTable?.map(e => MoneyTable.fromPartial(e)) || [];
    return message;
  },
};

export type DealerConfigServiceService = typeof DealerConfigServiceService;
export const DealerConfigServiceService = {
  getGame: {
    path: '/dealer.DealerConfigService/GetGame',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) =>
      Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: GamesResponse) =>
      Buffer.from(GamesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GamesResponse.decode(value),
  },
  createMoneyTable: {
    path: '/dealer.DealerConfigService/CreateMoneyTable',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MoneyTableRequest) =>
      Buffer.from(MoneyTableRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => MoneyTableRequest.decode(value),
    responseSerialize: (value: MoneyTableResponse) =>
      Buffer.from(MoneyTableResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => MoneyTableResponse.decode(value),
  },
  getMoneyTable: {
    path: '/dealer.DealerConfigService/GetMoneyTable',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) =>
      Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: MoneyTablesResponse) =>
      Buffer.from(MoneyTablesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => MoneyTablesResponse.decode(value),
  },
  updateMoneyTable: {
    path: '/dealer.DealerConfigService/UpdateMoneyTable',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MoneyTableRequest) =>
      Buffer.from(MoneyTableRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => MoneyTableRequest.decode(value),
    responseSerialize: (value: MoneyTableResponse) =>
      Buffer.from(MoneyTableResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => MoneyTableResponse.decode(value),
  },
} as const;

export interface DealerConfigServiceServer
  extends UntypedServiceImplementation {
  getGame: handleUnaryCall<Empty, GamesResponse>;
  createMoneyTable: handleUnaryCall<MoneyTableRequest, MoneyTableResponse>;
  getMoneyTable: handleUnaryCall<Empty, MoneyTablesResponse>;
  updateMoneyTable: handleUnaryCall<MoneyTableRequest, MoneyTableResponse>;
}

export interface DealerConfigServiceClient extends Client {
  getGame(
    request: Empty,
    callback: (error: ServiceError | null, response: GamesResponse) => void,
  ): ClientUnaryCall;
  getGame(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GamesResponse) => void,
  ): ClientUnaryCall;
  getGame(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GamesResponse) => void,
  ): ClientUnaryCall;
  createMoneyTable(
    request: MoneyTableRequest,
    callback: (
      error: ServiceError | null,
      response: MoneyTableResponse,
    ) => void,
  ): ClientUnaryCall;
  createMoneyTable(
    request: MoneyTableRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: MoneyTableResponse,
    ) => void,
  ): ClientUnaryCall;
  createMoneyTable(
    request: MoneyTableRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: MoneyTableResponse,
    ) => void,
  ): ClientUnaryCall;
  getMoneyTable(
    request: Empty,
    callback: (
      error: ServiceError | null,
      response: MoneyTablesResponse,
    ) => void,
  ): ClientUnaryCall;
  getMoneyTable(
    request: Empty,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: MoneyTablesResponse,
    ) => void,
  ): ClientUnaryCall;
  getMoneyTable(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: MoneyTablesResponse,
    ) => void,
  ): ClientUnaryCall;
  updateMoneyTable(
    request: MoneyTableRequest,
    callback: (
      error: ServiceError | null,
      response: MoneyTableResponse,
    ) => void,
  ): ClientUnaryCall;
  updateMoneyTable(
    request: MoneyTableRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: MoneyTableResponse,
    ) => void,
  ): ClientUnaryCall;
  updateMoneyTable(
    request: MoneyTableRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: MoneyTableResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const DealerConfigServiceClient = makeGenericClientConstructor(
  DealerConfigServiceService,
  'dealer.DealerConfigService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): DealerConfigServiceClient;
  service: typeof DealerConfigServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
