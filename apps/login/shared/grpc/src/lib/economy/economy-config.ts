// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: economy-config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';

export const protobufPackage = 'economy';

export interface Config {
  configId: number;
  gameId: string;
  name: string;
  key: string;
  value: string;
  createdAt: string;
  updatedAt: string;
}

export interface Empty {}

export interface ConfigRequest {
  ruleConfigId: number;
  gameId: string;
  name: string;
  key: string;
  value: string;
}

export interface ConfigResponse {
  success: boolean;
  errorMessage: string;
  config?: Config | undefined;
}

export interface ConfigsResponse {
  success: boolean;
  errorMessage: string;
  config: Config[];
}

function createBaseConfig(): Config {
  return {
    configId: 0,
    gameId: '',
    name: '',
    key: '',
    value: '',
    createdAt: '',
    updatedAt: '',
  };
}

export const Config = {
  encode(
    message: Config,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.configId !== 0) {
      writer.uint32(8).int32(message.configId);
    }
    if (message.gameId !== '') {
      writer.uint32(18).string(message.gameId);
    }
    if (message.name !== '') {
      writer.uint32(26).string(message.name);
    }
    if (message.key !== '') {
      writer.uint32(34).string(message.key);
    }
    if (message.value !== '') {
      writer.uint32(42).string(message.value);
    }
    if (message.createdAt !== '') {
      writer.uint32(50).string(message.createdAt);
    }
    if (message.updatedAt !== '') {
      writer.uint32(58).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.configId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gameId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.key = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.value = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      configId: isSet(object.configId) ? globalThis.Number(object.configId) : 0,
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      key: isSet(object.key) ? globalThis.String(object.key) : '',
      value: isSet(object.value) ? globalThis.String(object.value) : '',
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
      updatedAt: isSet(object.updatedAt)
        ? globalThis.String(object.updatedAt)
        : '',
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.configId !== 0) {
      obj.configId = Math.round(message.configId);
    }
    if (message.gameId !== '') {
      obj.gameId = message.gameId;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.key !== '') {
      obj.key = message.key;
    }
    if (message.value !== '') {
      obj.value = message.value;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== '') {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.configId = object.configId ?? 0;
    message.gameId = object.gameId ?? '';
    message.name = object.name ?? '';
    message.key = object.key ?? '';
    message.value = object.value ?? '';
    message.createdAt = object.createdAt ?? '';
    message.updatedAt = object.updatedAt ?? '';
    return message;
  },
};

function createBaseEmpty(): Empty {
  return {};
}

export const Empty = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseConfigRequest(): ConfigRequest {
  return { ruleConfigId: 0, gameId: '', name: '', key: '', value: '' };
}

export const ConfigRequest = {
  encode(
    message: ConfigRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.ruleConfigId !== 0) {
      writer.uint32(8).int32(message.ruleConfigId);
    }
    if (message.gameId !== '') {
      writer.uint32(18).string(message.gameId);
    }
    if (message.name !== '') {
      writer.uint32(26).string(message.name);
    }
    if (message.key !== '') {
      writer.uint32(34).string(message.key);
    }
    if (message.value !== '') {
      writer.uint32(42).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.ruleConfigId = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.gameId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.key = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigRequest {
    return {
      ruleConfigId: isSet(object.ruleConfigId)
        ? globalThis.Number(object.ruleConfigId)
        : 0,
      gameId: isSet(object.gameId) ? globalThis.String(object.gameId) : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      key: isSet(object.key) ? globalThis.String(object.key) : '',
      value: isSet(object.value) ? globalThis.String(object.value) : '',
    };
  },

  toJSON(message: ConfigRequest): unknown {
    const obj: any = {};
    if (message.ruleConfigId !== 0) {
      obj.ruleConfigId = Math.round(message.ruleConfigId);
    }
    if (message.gameId !== '') {
      obj.gameId = message.gameId;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.key !== '') {
      obj.key = message.key;
    }
    if (message.value !== '') {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigRequest>, I>>(
    base?: I,
  ): ConfigRequest {
    return ConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigRequest>, I>>(
    object: I,
  ): ConfigRequest {
    const message = createBaseConfigRequest();
    message.ruleConfigId = object.ruleConfigId ?? 0;
    message.gameId = object.gameId ?? '';
    message.name = object.name ?? '';
    message.key = object.key ?? '';
    message.value = object.value ?? '';
    return message;
  },
};

function createBaseConfigResponse(): ConfigResponse {
  return { success: false, errorMessage: '', config: undefined };
}

export const ConfigResponse = {
  encode(
    message: ConfigResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.config !== undefined) {
      Config.encode(message.config, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.config = Config.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      config: isSet(object.config) ? Config.fromJSON(object.config) : undefined,
    };
  },

  toJSON(message: ConfigResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.config !== undefined) {
      obj.config = Config.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigResponse>, I>>(
    base?: I,
  ): ConfigResponse {
    return ConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigResponse>, I>>(
    object: I,
  ): ConfigResponse {
    const message = createBaseConfigResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.config =
      object.config !== undefined && object.config !== null
        ? Config.fromPartial(object.config)
        : undefined;
    return message;
  },
};

function createBaseConfigsResponse(): ConfigsResponse {
  return { success: false, errorMessage: '', config: [] };
}

export const ConfigsResponse = {
  encode(
    message: ConfigsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.config) {
      Config.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.config.push(Config.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigsResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      config: globalThis.Array.isArray(object?.config)
        ? object.config.map((e: any) => Config.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ConfigsResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.config?.length) {
      obj.config = message.config.map(e => Config.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigsResponse>, I>>(
    base?: I,
  ): ConfigsResponse {
    return ConfigsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigsResponse>, I>>(
    object: I,
  ): ConfigsResponse {
    const message = createBaseConfigsResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.config = object.config?.map(e => Config.fromPartial(e)) || [];
    return message;
  },
};

export type EconomyConfigServiceService = typeof EconomyConfigServiceService;
export const EconomyConfigServiceService = {
  createConfig: {
    path: '/economy.EconomyConfigService/CreateConfig',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ConfigRequest) =>
      Buffer.from(ConfigRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ConfigRequest.decode(value),
    responseSerialize: (value: ConfigResponse) =>
      Buffer.from(ConfigResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ConfigResponse.decode(value),
  },
  getConfig: {
    path: '/economy.EconomyConfigService/GetConfig',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty) =>
      Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Empty.decode(value),
    responseSerialize: (value: ConfigsResponse) =>
      Buffer.from(ConfigsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ConfigsResponse.decode(value),
  },
  updateConfig: {
    path: '/economy.EconomyConfigService/UpdateConfig',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ConfigRequest) =>
      Buffer.from(ConfigRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ConfigRequest.decode(value),
    responseSerialize: (value: ConfigResponse) =>
      Buffer.from(ConfigResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ConfigResponse.decode(value),
  },
} as const;

export interface EconomyConfigServiceServer
  extends UntypedServiceImplementation {
  createConfig: handleUnaryCall<ConfigRequest, ConfigResponse>;
  getConfig: handleUnaryCall<Empty, ConfigsResponse>;
  updateConfig: handleUnaryCall<ConfigRequest, ConfigResponse>;
}

export interface EconomyConfigServiceClient extends Client {
  createConfig(
    request: ConfigRequest,
    callback: (error: ServiceError | null, response: ConfigResponse) => void,
  ): ClientUnaryCall;
  createConfig(
    request: ConfigRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ConfigResponse) => void,
  ): ClientUnaryCall;
  createConfig(
    request: ConfigRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ConfigResponse) => void,
  ): ClientUnaryCall;
  getConfig(
    request: Empty,
    callback: (error: ServiceError | null, response: ConfigsResponse) => void,
  ): ClientUnaryCall;
  getConfig(
    request: Empty,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ConfigsResponse) => void,
  ): ClientUnaryCall;
  getConfig(
    request: Empty,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ConfigsResponse) => void,
  ): ClientUnaryCall;
  updateConfig(
    request: ConfigRequest,
    callback: (error: ServiceError | null, response: ConfigResponse) => void,
  ): ClientUnaryCall;
  updateConfig(
    request: ConfigRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ConfigResponse) => void,
  ): ClientUnaryCall;
  updateConfig(
    request: ConfigRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ConfigResponse) => void,
  ): ClientUnaryCall;
}

export const EconomyConfigServiceClient = makeGenericClientConstructor(
  EconomyConfigServiceService,
  'economy.EconomyConfigService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): EconomyConfigServiceClient;
  service: typeof EconomyConfigServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
