// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: notice.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';

export const protobufPackage = 'gm';

export interface Notice {
  id: number;
  order: string;
  category: string;
  title: string;
  content: string;
  createdAt: string;
  updatedAt: string;
  append: string;
  isActive: string;
  status: string;
}

export interface Empty {}

export interface NoticeListResponse {
  success: boolean;
  errorMessage: string;
  notice: Notice[];
}

export interface NoticeListRequest {
  accountId: string;
  page: number;
  countPerPage: number;
}

export interface NoticeRequest {
  id: number;
}

export interface NoticeResponse {
  success: boolean;
  errorMessage: string;
  notice?: Notice | undefined;
}

export interface CreateNoticeRequest {
  accountId: string;
  category: string;
  title: string;
  content: string;
  isActive: string;
  order: string;
  status: string;
  append: string;
}

export interface UpdateNoticeRequest {
  id: number;
  accountId: string;
  category: string;
  title: string;
  content: string;
  isActive: string;
  order: string;
  status: string;
  append: string;
}

export interface DeleteNoticeRequest {
  id: number;
}

function createBaseNotice(): Notice {
  return {
    id: 0,
    order: '',
    category: '',
    title: '',
    content: '',
    createdAt: '',
    updatedAt: '',
    append: '',
    isActive: '',
    status: '',
  };
}

export const Notice = {
  encode(
    message: Notice,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.order !== '') {
      writer.uint32(18).string(message.order);
    }
    if (message.category !== '') {
      writer.uint32(26).string(message.category);
    }
    if (message.title !== '') {
      writer.uint32(34).string(message.title);
    }
    if (message.content !== '') {
      writer.uint32(42).string(message.content);
    }
    if (message.createdAt !== '') {
      writer.uint32(50).string(message.createdAt);
    }
    if (message.updatedAt !== '') {
      writer.uint32(58).string(message.updatedAt);
    }
    if (message.append !== '') {
      writer.uint32(66).string(message.append);
    }
    if (message.isActive !== '') {
      writer.uint32(74).string(message.isActive);
    }
    if (message.status !== '') {
      writer.uint32(82).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Notice {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.order = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.category = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.content = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.append = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.isActive = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.status = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Notice {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      order: isSet(object.order) ? globalThis.String(object.order) : '',
      category: isSet(object.category)
        ? globalThis.String(object.category)
        : '',
      title: isSet(object.title) ? globalThis.String(object.title) : '',
      content: isSet(object.content) ? globalThis.String(object.content) : '',
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
      updatedAt: isSet(object.updatedAt)
        ? globalThis.String(object.updatedAt)
        : '',
      append: isSet(object.append) ? globalThis.String(object.append) : '',
      isActive: isSet(object.isActive)
        ? globalThis.String(object.isActive)
        : '',
      status: isSet(object.status) ? globalThis.String(object.status) : '',
    };
  },

  toJSON(message: Notice): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.order !== '') {
      obj.order = message.order;
    }
    if (message.category !== '') {
      obj.category = message.category;
    }
    if (message.title !== '') {
      obj.title = message.title;
    }
    if (message.content !== '') {
      obj.content = message.content;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== '') {
      obj.updatedAt = message.updatedAt;
    }
    if (message.append !== '') {
      obj.append = message.append;
    }
    if (message.isActive !== '') {
      obj.isActive = message.isActive;
    }
    if (message.status !== '') {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Notice>, I>>(base?: I): Notice {
    return Notice.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Notice>, I>>(object: I): Notice {
    const message = createBaseNotice();
    message.id = object.id ?? 0;
    message.order = object.order ?? '';
    message.category = object.category ?? '';
    message.title = object.title ?? '';
    message.content = object.content ?? '';
    message.createdAt = object.createdAt ?? '';
    message.updatedAt = object.updatedAt ?? '';
    message.append = object.append ?? '';
    message.isActive = object.isActive ?? '';
    message.status = object.status ?? '';
    return message;
  },
};

function createBaseEmpty(): Empty {
  return {};
}

export const Empty = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseNoticeListResponse(): NoticeListResponse {
  return { success: false, errorMessage: '', notice: [] };
}

export const NoticeListResponse = {
  encode(
    message: NoticeListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.notice) {
      Notice.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): NoticeListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNoticeListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.notice.push(Notice.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NoticeListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      notice: globalThis.Array.isArray(object?.notice)
        ? object.notice.map((e: any) => Notice.fromJSON(e))
        : [],
    };
  },

  toJSON(message: NoticeListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.notice?.length) {
      obj.notice = message.notice.map(e => Notice.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NoticeListResponse>, I>>(
    base?: I,
  ): NoticeListResponse {
    return NoticeListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NoticeListResponse>, I>>(
    object: I,
  ): NoticeListResponse {
    const message = createBaseNoticeListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.notice = object.notice?.map(e => Notice.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNoticeListRequest(): NoticeListRequest {
  return { accountId: '', page: 0, countPerPage: 0 };
}

export const NoticeListRequest = {
  encode(
    message: NoticeListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.countPerPage !== 0) {
      writer.uint32(24).int32(message.countPerPage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NoticeListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNoticeListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.countPerPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NoticeListRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      countPerPage: isSet(object.countPerPage)
        ? globalThis.Number(object.countPerPage)
        : 0,
    };
  },

  toJSON(message: NoticeListRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.countPerPage !== 0) {
      obj.countPerPage = Math.round(message.countPerPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NoticeListRequest>, I>>(
    base?: I,
  ): NoticeListRequest {
    return NoticeListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NoticeListRequest>, I>>(
    object: I,
  ): NoticeListRequest {
    const message = createBaseNoticeListRequest();
    message.accountId = object.accountId ?? '';
    message.page = object.page ?? 0;
    message.countPerPage = object.countPerPage ?? 0;
    return message;
  },
};

function createBaseNoticeRequest(): NoticeRequest {
  return { id: 0 };
}

export const NoticeRequest = {
  encode(
    message: NoticeRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NoticeRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNoticeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NoticeRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: NoticeRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NoticeRequest>, I>>(
    base?: I,
  ): NoticeRequest {
    return NoticeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NoticeRequest>, I>>(
    object: I,
  ): NoticeRequest {
    const message = createBaseNoticeRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseNoticeResponse(): NoticeResponse {
  return { success: false, errorMessage: '', notice: undefined };
}

export const NoticeResponse = {
  encode(
    message: NoticeResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.notice !== undefined) {
      Notice.encode(message.notice, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NoticeResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNoticeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.notice = Notice.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NoticeResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      notice: isSet(object.notice) ? Notice.fromJSON(object.notice) : undefined,
    };
  },

  toJSON(message: NoticeResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.notice !== undefined) {
      obj.notice = Notice.toJSON(message.notice);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NoticeResponse>, I>>(
    base?: I,
  ): NoticeResponse {
    return NoticeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NoticeResponse>, I>>(
    object: I,
  ): NoticeResponse {
    const message = createBaseNoticeResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.notice =
      object.notice !== undefined && object.notice !== null
        ? Notice.fromPartial(object.notice)
        : undefined;
    return message;
  },
};

function createBaseCreateNoticeRequest(): CreateNoticeRequest {
  return {
    accountId: '',
    category: '',
    title: '',
    content: '',
    isActive: '',
    order: '',
    status: '',
    append: '',
  };
}

export const CreateNoticeRequest = {
  encode(
    message: CreateNoticeRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.category !== '') {
      writer.uint32(18).string(message.category);
    }
    if (message.title !== '') {
      writer.uint32(26).string(message.title);
    }
    if (message.content !== '') {
      writer.uint32(34).string(message.content);
    }
    if (message.isActive !== '') {
      writer.uint32(42).string(message.isActive);
    }
    if (message.order !== '') {
      writer.uint32(50).string(message.order);
    }
    if (message.status !== '') {
      writer.uint32(58).string(message.status);
    }
    if (message.append !== '') {
      writer.uint32(66).string(message.append);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateNoticeRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateNoticeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.category = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.content = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.isActive = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.order = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.status = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.append = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateNoticeRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      category: isSet(object.category)
        ? globalThis.String(object.category)
        : '',
      title: isSet(object.title) ? globalThis.String(object.title) : '',
      content: isSet(object.content) ? globalThis.String(object.content) : '',
      isActive: isSet(object.isActive)
        ? globalThis.String(object.isActive)
        : '',
      order: isSet(object.order) ? globalThis.String(object.order) : '',
      status: isSet(object.status) ? globalThis.String(object.status) : '',
      append: isSet(object.append) ? globalThis.String(object.append) : '',
    };
  },

  toJSON(message: CreateNoticeRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.category !== '') {
      obj.category = message.category;
    }
    if (message.title !== '') {
      obj.title = message.title;
    }
    if (message.content !== '') {
      obj.content = message.content;
    }
    if (message.isActive !== '') {
      obj.isActive = message.isActive;
    }
    if (message.order !== '') {
      obj.order = message.order;
    }
    if (message.status !== '') {
      obj.status = message.status;
    }
    if (message.append !== '') {
      obj.append = message.append;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateNoticeRequest>, I>>(
    base?: I,
  ): CreateNoticeRequest {
    return CreateNoticeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateNoticeRequest>, I>>(
    object: I,
  ): CreateNoticeRequest {
    const message = createBaseCreateNoticeRequest();
    message.accountId = object.accountId ?? '';
    message.category = object.category ?? '';
    message.title = object.title ?? '';
    message.content = object.content ?? '';
    message.isActive = object.isActive ?? '';
    message.order = object.order ?? '';
    message.status = object.status ?? '';
    message.append = object.append ?? '';
    return message;
  },
};

function createBaseUpdateNoticeRequest(): UpdateNoticeRequest {
  return {
    id: 0,
    accountId: '',
    category: '',
    title: '',
    content: '',
    isActive: '',
    order: '',
    status: '',
    append: '',
  };
}

export const UpdateNoticeRequest = {
  encode(
    message: UpdateNoticeRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.accountId !== '') {
      writer.uint32(18).string(message.accountId);
    }
    if (message.category !== '') {
      writer.uint32(26).string(message.category);
    }
    if (message.title !== '') {
      writer.uint32(34).string(message.title);
    }
    if (message.content !== '') {
      writer.uint32(42).string(message.content);
    }
    if (message.isActive !== '') {
      writer.uint32(50).string(message.isActive);
    }
    if (message.order !== '') {
      writer.uint32(58).string(message.order);
    }
    if (message.status !== '') {
      writer.uint32(66).string(message.status);
    }
    if (message.append !== '') {
      writer.uint32(74).string(message.append);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateNoticeRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateNoticeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.category = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.content = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.isActive = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.order = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.status = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.append = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateNoticeRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      category: isSet(object.category)
        ? globalThis.String(object.category)
        : '',
      title: isSet(object.title) ? globalThis.String(object.title) : '',
      content: isSet(object.content) ? globalThis.String(object.content) : '',
      isActive: isSet(object.isActive)
        ? globalThis.String(object.isActive)
        : '',
      order: isSet(object.order) ? globalThis.String(object.order) : '',
      status: isSet(object.status) ? globalThis.String(object.status) : '',
      append: isSet(object.append) ? globalThis.String(object.append) : '',
    };
  },

  toJSON(message: UpdateNoticeRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.category !== '') {
      obj.category = message.category;
    }
    if (message.title !== '') {
      obj.title = message.title;
    }
    if (message.content !== '') {
      obj.content = message.content;
    }
    if (message.isActive !== '') {
      obj.isActive = message.isActive;
    }
    if (message.order !== '') {
      obj.order = message.order;
    }
    if (message.status !== '') {
      obj.status = message.status;
    }
    if (message.append !== '') {
      obj.append = message.append;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateNoticeRequest>, I>>(
    base?: I,
  ): UpdateNoticeRequest {
    return UpdateNoticeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateNoticeRequest>, I>>(
    object: I,
  ): UpdateNoticeRequest {
    const message = createBaseUpdateNoticeRequest();
    message.id = object.id ?? 0;
    message.accountId = object.accountId ?? '';
    message.category = object.category ?? '';
    message.title = object.title ?? '';
    message.content = object.content ?? '';
    message.isActive = object.isActive ?? '';
    message.order = object.order ?? '';
    message.status = object.status ?? '';
    message.append = object.append ?? '';
    return message;
  },
};

function createBaseDeleteNoticeRequest(): DeleteNoticeRequest {
  return { id: 0 };
}

export const DeleteNoticeRequest = {
  encode(
    message: DeleteNoticeRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DeleteNoticeRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteNoticeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteNoticeRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: DeleteNoticeRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteNoticeRequest>, I>>(
    base?: I,
  ): DeleteNoticeRequest {
    return DeleteNoticeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteNoticeRequest>, I>>(
    object: I,
  ): DeleteNoticeRequest {
    const message = createBaseDeleteNoticeRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

export type NoticeServiceService = typeof NoticeServiceService;
export const NoticeServiceService = {
  getNoticeList: {
    path: '/gm.NoticeService/GetNoticeList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: NoticeListRequest) =>
      Buffer.from(NoticeListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => NoticeListRequest.decode(value),
    responseSerialize: (value: NoticeListResponse) =>
      Buffer.from(NoticeListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => NoticeListResponse.decode(value),
  },
  getNotice: {
    path: '/gm.NoticeService/GetNotice',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: NoticeRequest) =>
      Buffer.from(NoticeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => NoticeRequest.decode(value),
    responseSerialize: (value: NoticeResponse) =>
      Buffer.from(NoticeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => NoticeResponse.decode(value),
  },
  createNotice: {
    path: '/gm.NoticeService/CreateNotice',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateNoticeRequest) =>
      Buffer.from(CreateNoticeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateNoticeRequest.decode(value),
    responseSerialize: (value: NoticeResponse) =>
      Buffer.from(NoticeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => NoticeResponse.decode(value),
  },
  updateNotice: {
    path: '/gm.NoticeService/UpdateNotice',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateNoticeRequest) =>
      Buffer.from(UpdateNoticeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateNoticeRequest.decode(value),
    responseSerialize: (value: NoticeResponse) =>
      Buffer.from(NoticeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => NoticeResponse.decode(value),
  },
  deleteNotice: {
    path: '/gm.NoticeService/DeleteNotice',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteNoticeRequest) =>
      Buffer.from(DeleteNoticeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteNoticeRequest.decode(value),
    responseSerialize: (value: NoticeResponse) =>
      Buffer.from(NoticeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => NoticeResponse.decode(value),
  },
} as const;

export interface NoticeServiceServer extends UntypedServiceImplementation {
  getNoticeList: handleUnaryCall<NoticeListRequest, NoticeListResponse>;
  getNotice: handleUnaryCall<NoticeRequest, NoticeResponse>;
  createNotice: handleUnaryCall<CreateNoticeRequest, NoticeResponse>;
  updateNotice: handleUnaryCall<UpdateNoticeRequest, NoticeResponse>;
  deleteNotice: handleUnaryCall<DeleteNoticeRequest, NoticeResponse>;
}

export interface NoticeServiceClient extends Client {
  getNoticeList(
    request: NoticeListRequest,
    callback: (
      error: ServiceError | null,
      response: NoticeListResponse,
    ) => void,
  ): ClientUnaryCall;
  getNoticeList(
    request: NoticeListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: NoticeListResponse,
    ) => void,
  ): ClientUnaryCall;
  getNoticeList(
    request: NoticeListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: NoticeListResponse,
    ) => void,
  ): ClientUnaryCall;
  getNotice(
    request: NoticeRequest,
    callback: (error: ServiceError | null, response: NoticeResponse) => void,
  ): ClientUnaryCall;
  getNotice(
    request: NoticeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: NoticeResponse) => void,
  ): ClientUnaryCall;
  getNotice(
    request: NoticeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: NoticeResponse) => void,
  ): ClientUnaryCall;
  createNotice(
    request: CreateNoticeRequest,
    callback: (error: ServiceError | null, response: NoticeResponse) => void,
  ): ClientUnaryCall;
  createNotice(
    request: CreateNoticeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: NoticeResponse) => void,
  ): ClientUnaryCall;
  createNotice(
    request: CreateNoticeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: NoticeResponse) => void,
  ): ClientUnaryCall;
  updateNotice(
    request: UpdateNoticeRequest,
    callback: (error: ServiceError | null, response: NoticeResponse) => void,
  ): ClientUnaryCall;
  updateNotice(
    request: UpdateNoticeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: NoticeResponse) => void,
  ): ClientUnaryCall;
  updateNotice(
    request: UpdateNoticeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: NoticeResponse) => void,
  ): ClientUnaryCall;
  deleteNotice(
    request: DeleteNoticeRequest,
    callback: (error: ServiceError | null, response: NoticeResponse) => void,
  ): ClientUnaryCall;
  deleteNotice(
    request: DeleteNoticeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: NoticeResponse) => void,
  ): ClientUnaryCall;
  deleteNotice(
    request: DeleteNoticeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: NoticeResponse) => void,
  ): ClientUnaryCall;
}

export const NoticeServiceClient = makeGenericClientConstructor(
  NoticeServiceService,
  'gm.NoticeService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): NoticeServiceClient;
  service: typeof NoticeServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
