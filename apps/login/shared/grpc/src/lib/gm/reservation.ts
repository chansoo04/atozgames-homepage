// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v6.31.1
// source: reservation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';

export const protobufPackage = 'gm';

export interface ReservationListResponse {
  success: boolean;
  errorMessage: string;
  reservation: Reservation[];
}

export interface ReservationResponse {
  success: boolean;
  errorMessage: string;
  reservation?: Reservation | undefined;
}

export interface ReservationListRequest {
  page: number;
  countPerPage: number;
  phoneNumber: string;
}

export interface Reservation {
  store: string;
  phoneNumber: string;
  agreeAge: boolean;
  agreePrivacy: boolean;
  agreeAlarm: boolean;
  createdAt: string;
}

function createBaseReservationListResponse(): ReservationListResponse {
  return { success: false, errorMessage: '', reservation: [] };
}

export const ReservationListResponse = {
  encode(
    message: ReservationListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.reservation) {
      Reservation.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ReservationListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReservationListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.reservation.push(Reservation.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReservationListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      reservation: globalThis.Array.isArray(object?.reservation)
        ? object.reservation.map((e: any) => Reservation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ReservationListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.reservation?.length) {
      obj.reservation = message.reservation.map(e => Reservation.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReservationListResponse>, I>>(
    base?: I,
  ): ReservationListResponse {
    return ReservationListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReservationListResponse>, I>>(
    object: I,
  ): ReservationListResponse {
    const message = createBaseReservationListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.reservation =
      object.reservation?.map(e => Reservation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReservationResponse(): ReservationResponse {
  return { success: false, errorMessage: '', reservation: undefined };
}

export const ReservationResponse = {
  encode(
    message: ReservationResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.reservation !== undefined) {
      Reservation.encode(message.reservation, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ReservationResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReservationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.reservation = Reservation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReservationResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      reservation: isSet(object.reservation)
        ? Reservation.fromJSON(object.reservation)
        : undefined,
    };
  },

  toJSON(message: ReservationResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.reservation !== undefined) {
      obj.reservation = Reservation.toJSON(message.reservation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReservationResponse>, I>>(
    base?: I,
  ): ReservationResponse {
    return ReservationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReservationResponse>, I>>(
    object: I,
  ): ReservationResponse {
    const message = createBaseReservationResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.reservation =
      object.reservation !== undefined && object.reservation !== null
        ? Reservation.fromPartial(object.reservation)
        : undefined;
    return message;
  },
};

function createBaseReservationListRequest(): ReservationListRequest {
  return { page: 0, countPerPage: 0, phoneNumber: '' };
}

export const ReservationListRequest = {
  encode(
    message: ReservationListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.countPerPage !== 0) {
      writer.uint32(16).int32(message.countPerPage);
    }
    if (message.phoneNumber !== '') {
      writer.uint32(26).string(message.phoneNumber);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ReservationListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReservationListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.countPerPage = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReservationListRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      countPerPage: isSet(object.countPerPage)
        ? globalThis.Number(object.countPerPage)
        : 0,
      phoneNumber: isSet(object.phoneNumber)
        ? globalThis.String(object.phoneNumber)
        : '',
    };
  },

  toJSON(message: ReservationListRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.countPerPage !== 0) {
      obj.countPerPage = Math.round(message.countPerPage);
    }
    if (message.phoneNumber !== '') {
      obj.phoneNumber = message.phoneNumber;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReservationListRequest>, I>>(
    base?: I,
  ): ReservationListRequest {
    return ReservationListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReservationListRequest>, I>>(
    object: I,
  ): ReservationListRequest {
    const message = createBaseReservationListRequest();
    message.page = object.page ?? 0;
    message.countPerPage = object.countPerPage ?? 0;
    message.phoneNumber = object.phoneNumber ?? '';
    return message;
  },
};

function createBaseReservation(): Reservation {
  return {
    store: '',
    phoneNumber: '',
    agreeAge: false,
    agreePrivacy: false,
    agreeAlarm: false,
    createdAt: '',
  };
}

export const Reservation = {
  encode(
    message: Reservation,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.store !== '') {
      writer.uint32(10).string(message.store);
    }
    if (message.phoneNumber !== '') {
      writer.uint32(18).string(message.phoneNumber);
    }
    if (message.agreeAge !== false) {
      writer.uint32(24).bool(message.agreeAge);
    }
    if (message.agreePrivacy !== false) {
      writer.uint32(32).bool(message.agreePrivacy);
    }
    if (message.agreeAlarm !== false) {
      writer.uint32(40).bool(message.agreeAlarm);
    }
    if (message.createdAt !== '') {
      writer.uint32(50).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Reservation {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReservation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.store = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.agreeAge = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.agreePrivacy = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.agreeAlarm = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Reservation {
    return {
      store: isSet(object.store) ? globalThis.String(object.store) : '',
      phoneNumber: isSet(object.phoneNumber)
        ? globalThis.String(object.phoneNumber)
        : '',
      agreeAge: isSet(object.agreeAge)
        ? globalThis.Boolean(object.agreeAge)
        : false,
      agreePrivacy: isSet(object.agreePrivacy)
        ? globalThis.Boolean(object.agreePrivacy)
        : false,
      agreeAlarm: isSet(object.agreeAlarm)
        ? globalThis.Boolean(object.agreeAlarm)
        : false,
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
    };
  },

  toJSON(message: Reservation): unknown {
    const obj: any = {};
    if (message.store !== '') {
      obj.store = message.store;
    }
    if (message.phoneNumber !== '') {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.agreeAge !== false) {
      obj.agreeAge = message.agreeAge;
    }
    if (message.agreePrivacy !== false) {
      obj.agreePrivacy = message.agreePrivacy;
    }
    if (message.agreeAlarm !== false) {
      obj.agreeAlarm = message.agreeAlarm;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Reservation>, I>>(base?: I): Reservation {
    return Reservation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Reservation>, I>>(
    object: I,
  ): Reservation {
    const message = createBaseReservation();
    message.store = object.store ?? '';
    message.phoneNumber = object.phoneNumber ?? '';
    message.agreeAge = object.agreeAge ?? false;
    message.agreePrivacy = object.agreePrivacy ?? false;
    message.agreeAlarm = object.agreeAlarm ?? false;
    message.createdAt = object.createdAt ?? '';
    return message;
  },
};

export type ReservationServiceService = typeof ReservationServiceService;
export const ReservationServiceService = {
  getReservation: {
    path: '/gm.ReservationService/GetReservation',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ReservationListRequest) =>
      Buffer.from(ReservationListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ReservationListRequest.decode(value),
    responseSerialize: (value: ReservationListResponse) =>
      Buffer.from(ReservationListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      ReservationListResponse.decode(value),
  },
  createReservation: {
    path: '/gm.ReservationService/CreateReservation',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Reservation) =>
      Buffer.from(Reservation.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Reservation.decode(value),
    responseSerialize: (value: ReservationResponse) =>
      Buffer.from(ReservationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ReservationResponse.decode(value),
  },
} as const;

export interface ReservationServiceServer extends UntypedServiceImplementation {
  getReservation: handleUnaryCall<
    ReservationListRequest,
    ReservationListResponse
  >;
  createReservation: handleUnaryCall<Reservation, ReservationResponse>;
}

export interface ReservationServiceClient extends Client {
  getReservation(
    request: ReservationListRequest,
    callback: (
      error: ServiceError | null,
      response: ReservationListResponse,
    ) => void,
  ): ClientUnaryCall;
  getReservation(
    request: ReservationListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: ReservationListResponse,
    ) => void,
  ): ClientUnaryCall;
  getReservation(
    request: ReservationListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: ReservationListResponse,
    ) => void,
  ): ClientUnaryCall;
  createReservation(
    request: Reservation,
    callback: (
      error: ServiceError | null,
      response: ReservationResponse,
    ) => void,
  ): ClientUnaryCall;
  createReservation(
    request: Reservation,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: ReservationResponse,
    ) => void,
  ): ClientUnaryCall;
  createReservation(
    request: Reservation,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: ReservationResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const ReservationServiceClient = makeGenericClientConstructor(
  ReservationServiceService,
  'gm.ReservationService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): ReservationServiceClient;
  service: typeof ReservationServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
