// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: wordCheck.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';

export const protobufPackage = 'gm';

export enum WordSearchMode {
  WORD_SEARCH_MODE_NONE = 0,
  WORD_SEARCH_MODE_QUERY = 1,
  WORD_SEARCH_MODE_AHO_CORASICK = 2,
  WORD_SEARCH_MODE_AHO_CORASICK_WITH_ALLOW = 3,
  WORD_SEARCH_MODE_AHO_CORASICK_STRICT = 4,
  UNRECOGNIZED = -1,
}

export function wordSearchModeFromJSON(object: any): WordSearchMode {
  switch (object) {
    case 0:
    case 'WORD_SEARCH_MODE_NONE':
      return WordSearchMode.WORD_SEARCH_MODE_NONE;
    case 1:
    case 'WORD_SEARCH_MODE_QUERY':
      return WordSearchMode.WORD_SEARCH_MODE_QUERY;
    case 2:
    case 'WORD_SEARCH_MODE_AHO_CORASICK':
      return WordSearchMode.WORD_SEARCH_MODE_AHO_CORASICK;
    case 3:
    case 'WORD_SEARCH_MODE_AHO_CORASICK_WITH_ALLOW':
      return WordSearchMode.WORD_SEARCH_MODE_AHO_CORASICK_WITH_ALLOW;
    case 4:
    case 'WORD_SEARCH_MODE_AHO_CORASICK_STRICT':
      return WordSearchMode.WORD_SEARCH_MODE_AHO_CORASICK_STRICT;
    case -1:
    case 'UNRECOGNIZED':
    default:
      return WordSearchMode.UNRECOGNIZED;
  }
}

export function wordSearchModeToJSON(object: WordSearchMode): string {
  switch (object) {
    case WordSearchMode.WORD_SEARCH_MODE_NONE:
      return 'WORD_SEARCH_MODE_NONE';
    case WordSearchMode.WORD_SEARCH_MODE_QUERY:
      return 'WORD_SEARCH_MODE_QUERY';
    case WordSearchMode.WORD_SEARCH_MODE_AHO_CORASICK:
      return 'WORD_SEARCH_MODE_AHO_CORASICK';
    case WordSearchMode.WORD_SEARCH_MODE_AHO_CORASICK_WITH_ALLOW:
      return 'WORD_SEARCH_MODE_AHO_CORASICK_WITH_ALLOW';
    case WordSearchMode.WORD_SEARCH_MODE_AHO_CORASICK_STRICT:
      return 'WORD_SEARCH_MODE_AHO_CORASICK_STRICT';
    case WordSearchMode.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED';
  }
}

export interface WordRequest {
  word: string;
  searchMode: WordSearchMode;
}

export interface WordBanCheckResult {
  start: number;
  end: number;
  word: string;
  length: number;
}

export interface WordResponse {
  success: boolean;
  errorMessage: string;
  banList: WordBanCheckResult[];
}

export interface GetWordListRequest {
  page: number;
  countPerPage: number;
}

export interface Word {
  id: number;
  word: string;
  createdAt: string;
  updatedAt: string;
}

export interface GetWordListResponse {
  success: boolean;
  errorMessage: string;
  wordList: Word[];
}

export interface AddWordListRequest {
  wordList: string[];
}

export interface UpdateWordListRequest {
  id: number;
  word: string;
}

export interface RemoveWordListRequest {
  idList: number[];
  isAll: boolean;
}

export interface DefaultResponse {
  success: boolean;
  errorMessage: string;
}

function createBaseWordRequest(): WordRequest {
  return { word: '', searchMode: 0 };
}

export const WordRequest = {
  encode(
    message: WordRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.word !== '') {
      writer.uint32(10).string(message.word);
    }
    if (message.searchMode !== 0) {
      writer.uint32(16).int32(message.searchMode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WordRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.word = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.searchMode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WordRequest {
    return {
      word: isSet(object.word) ? globalThis.String(object.word) : '',
      searchMode: isSet(object.searchMode)
        ? wordSearchModeFromJSON(object.searchMode)
        : 0,
    };
  },

  toJSON(message: WordRequest): unknown {
    const obj: any = {};
    if (message.word !== '') {
      obj.word = message.word;
    }
    if (message.searchMode !== 0) {
      obj.searchMode = wordSearchModeToJSON(message.searchMode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WordRequest>, I>>(base?: I): WordRequest {
    return WordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WordRequest>, I>>(
    object: I,
  ): WordRequest {
    const message = createBaseWordRequest();
    message.word = object.word ?? '';
    message.searchMode = object.searchMode ?? 0;
    return message;
  },
};

function createBaseWordBanCheckResult(): WordBanCheckResult {
  return { start: 0, end: 0, word: '', length: 0 };
}

export const WordBanCheckResult = {
  encode(
    message: WordBanCheckResult,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.start !== 0) {
      writer.uint32(8).int32(message.start);
    }
    if (message.end !== 0) {
      writer.uint32(16).int32(message.end);
    }
    if (message.word !== '') {
      writer.uint32(26).string(message.word);
    }
    if (message.length !== 0) {
      writer.uint32(32).int32(message.length);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WordBanCheckResult {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWordBanCheckResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.start = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.end = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.word = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.length = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WordBanCheckResult {
    return {
      start: isSet(object.start) ? globalThis.Number(object.start) : 0,
      end: isSet(object.end) ? globalThis.Number(object.end) : 0,
      word: isSet(object.word) ? globalThis.String(object.word) : '',
      length: isSet(object.length) ? globalThis.Number(object.length) : 0,
    };
  },

  toJSON(message: WordBanCheckResult): unknown {
    const obj: any = {};
    if (message.start !== 0) {
      obj.start = Math.round(message.start);
    }
    if (message.end !== 0) {
      obj.end = Math.round(message.end);
    }
    if (message.word !== '') {
      obj.word = message.word;
    }
    if (message.length !== 0) {
      obj.length = Math.round(message.length);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WordBanCheckResult>, I>>(
    base?: I,
  ): WordBanCheckResult {
    return WordBanCheckResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WordBanCheckResult>, I>>(
    object: I,
  ): WordBanCheckResult {
    const message = createBaseWordBanCheckResult();
    message.start = object.start ?? 0;
    message.end = object.end ?? 0;
    message.word = object.word ?? '';
    message.length = object.length ?? 0;
    return message;
  },
};

function createBaseWordResponse(): WordResponse {
  return { success: false, errorMessage: '', banList: [] };
}

export const WordResponse = {
  encode(
    message: WordResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.banList) {
      WordBanCheckResult.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WordResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.banList.push(
            WordBanCheckResult.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WordResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      banList: globalThis.Array.isArray(object?.banList)
        ? object.banList.map((e: any) => WordBanCheckResult.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WordResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.banList?.length) {
      obj.banList = message.banList.map(e => WordBanCheckResult.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WordResponse>, I>>(
    base?: I,
  ): WordResponse {
    return WordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WordResponse>, I>>(
    object: I,
  ): WordResponse {
    const message = createBaseWordResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.banList =
      object.banList?.map(e => WordBanCheckResult.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetWordListRequest(): GetWordListRequest {
  return { page: 0, countPerPage: 0 };
}

export const GetWordListRequest = {
  encode(
    message: GetWordListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.countPerPage !== 0) {
      writer.uint32(16).int32(message.countPerPage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetWordListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWordListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.countPerPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWordListRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      countPerPage: isSet(object.countPerPage)
        ? globalThis.Number(object.countPerPage)
        : 0,
    };
  },

  toJSON(message: GetWordListRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.countPerPage !== 0) {
      obj.countPerPage = Math.round(message.countPerPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWordListRequest>, I>>(
    base?: I,
  ): GetWordListRequest {
    return GetWordListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWordListRequest>, I>>(
    object: I,
  ): GetWordListRequest {
    const message = createBaseGetWordListRequest();
    message.page = object.page ?? 0;
    message.countPerPage = object.countPerPage ?? 0;
    return message;
  },
};

function createBaseWord(): Word {
  return { id: 0, word: '', createdAt: '', updatedAt: '' };
}

export const Word = {
  encode(
    message: Word,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.word !== '') {
      writer.uint32(18).string(message.word);
    }
    if (message.createdAt !== '') {
      writer.uint32(26).string(message.createdAt);
    }
    if (message.updatedAt !== '') {
      writer.uint32(34).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Word {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.word = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Word {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      word: isSet(object.word) ? globalThis.String(object.word) : '',
      createdAt: isSet(object.createdAt)
        ? globalThis.String(object.createdAt)
        : '',
      updatedAt: isSet(object.updatedAt)
        ? globalThis.String(object.updatedAt)
        : '',
    };
  },

  toJSON(message: Word): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.word !== '') {
      obj.word = message.word;
    }
    if (message.createdAt !== '') {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== '') {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Word>, I>>(base?: I): Word {
    return Word.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Word>, I>>(object: I): Word {
    const message = createBaseWord();
    message.id = object.id ?? 0;
    message.word = object.word ?? '';
    message.createdAt = object.createdAt ?? '';
    message.updatedAt = object.updatedAt ?? '';
    return message;
  },
};

function createBaseGetWordListResponse(): GetWordListResponse {
  return { success: false, errorMessage: '', wordList: [] };
}

export const GetWordListResponse = {
  encode(
    message: GetWordListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.wordList) {
      Word.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetWordListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWordListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.wordList.push(Word.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWordListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      wordList: globalThis.Array.isArray(object?.wordList)
        ? object.wordList.map((e: any) => Word.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetWordListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.wordList?.length) {
      obj.wordList = message.wordList.map(e => Word.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWordListResponse>, I>>(
    base?: I,
  ): GetWordListResponse {
    return GetWordListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWordListResponse>, I>>(
    object: I,
  ): GetWordListResponse {
    const message = createBaseGetWordListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.wordList = object.wordList?.map(e => Word.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddWordListRequest(): AddWordListRequest {
  return { wordList: [] };
}

export const AddWordListRequest = {
  encode(
    message: AddWordListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.wordList) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AddWordListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddWordListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.wordList.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddWordListRequest {
    return {
      wordList: globalThis.Array.isArray(object?.wordList)
        ? object.wordList.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: AddWordListRequest): unknown {
    const obj: any = {};
    if (message.wordList?.length) {
      obj.wordList = message.wordList;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddWordListRequest>, I>>(
    base?: I,
  ): AddWordListRequest {
    return AddWordListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddWordListRequest>, I>>(
    object: I,
  ): AddWordListRequest {
    const message = createBaseAddWordListRequest();
    message.wordList = object.wordList?.map(e => e) || [];
    return message;
  },
};

function createBaseUpdateWordListRequest(): UpdateWordListRequest {
  return { id: 0, word: '' };
}

export const UpdateWordListRequest = {
  encode(
    message: UpdateWordListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.word !== '') {
      writer.uint32(18).string(message.word);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateWordListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateWordListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.word = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateWordListRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      word: isSet(object.word) ? globalThis.String(object.word) : '',
    };
  },

  toJSON(message: UpdateWordListRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.word !== '') {
      obj.word = message.word;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateWordListRequest>, I>>(
    base?: I,
  ): UpdateWordListRequest {
    return UpdateWordListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateWordListRequest>, I>>(
    object: I,
  ): UpdateWordListRequest {
    const message = createBaseUpdateWordListRequest();
    message.id = object.id ?? 0;
    message.word = object.word ?? '';
    return message;
  },
};

function createBaseRemoveWordListRequest(): RemoveWordListRequest {
  return { idList: [], isAll: false };
}

export const RemoveWordListRequest = {
  encode(
    message: RemoveWordListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.idList) {
      writer.int32(v);
    }
    writer.join();
    if (message.isAll !== false) {
      writer.uint32(16).bool(message.isAll);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): RemoveWordListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveWordListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.idList.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.idList.push(reader.int32());
            }

            continue;
          }

          break;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isAll = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveWordListRequest {
    return {
      idList: globalThis.Array.isArray(object?.idList)
        ? object.idList.map((e: any) => globalThis.Number(e))
        : [],
      isAll: isSet(object.isAll) ? globalThis.Boolean(object.isAll) : false,
    };
  },

  toJSON(message: RemoveWordListRequest): unknown {
    const obj: any = {};
    if (message.idList?.length) {
      obj.idList = message.idList.map(e => Math.round(e));
    }
    if (message.isAll !== false) {
      obj.isAll = message.isAll;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveWordListRequest>, I>>(
    base?: I,
  ): RemoveWordListRequest {
    return RemoveWordListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveWordListRequest>, I>>(
    object: I,
  ): RemoveWordListRequest {
    const message = createBaseRemoveWordListRequest();
    message.idList = object.idList?.map(e => e) || [];
    message.isAll = object.isAll ?? false;
    return message;
  },
};

function createBaseDefaultResponse(): DefaultResponse {
  return { success: false, errorMessage: '' };
}

export const DefaultResponse = {
  encode(
    message: DefaultResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DefaultResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DefaultResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: DefaultResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DefaultResponse>, I>>(
    base?: I,
  ): DefaultResponse {
    return DefaultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DefaultResponse>, I>>(
    object: I,
  ): DefaultResponse {
    const message = createBaseDefaultResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

export type WordCheckServiceService = typeof WordCheckServiceService;
export const WordCheckServiceService = {
  isBanNickName: {
    path: '/gm.WordCheckService/IsBanNickName',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: WordRequest) =>
      Buffer.from(WordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => WordRequest.decode(value),
    responseSerialize: (value: WordResponse) =>
      Buffer.from(WordResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => WordResponse.decode(value),
  },
  getNickNameBanList: {
    path: '/gm.WordCheckService/GetNickNameBanList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetWordListRequest) =>
      Buffer.from(GetWordListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetWordListRequest.decode(value),
    responseSerialize: (value: GetWordListResponse) =>
      Buffer.from(GetWordListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetWordListResponse.decode(value),
  },
  addNickNameBanList: {
    path: '/gm.WordCheckService/AddNickNameBanList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddWordListRequest) =>
      Buffer.from(AddWordListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddWordListRequest.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
  updateNickNameBanList: {
    path: '/gm.WordCheckService/UpdateNickNameBanList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateWordListRequest) =>
      Buffer.from(UpdateWordListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateWordListRequest.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
  removeNickNameBanList: {
    path: '/gm.WordCheckService/RemoveNickNameBanList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RemoveWordListRequest) =>
      Buffer.from(RemoveWordListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RemoveWordListRequest.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
  getNickNameAllowList: {
    path: '/gm.WordCheckService/GetNickNameAllowList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetWordListRequest) =>
      Buffer.from(GetWordListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetWordListRequest.decode(value),
    responseSerialize: (value: GetWordListResponse) =>
      Buffer.from(GetWordListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetWordListResponse.decode(value),
  },
  addNickNameAllowList: {
    path: '/gm.WordCheckService/AddNickNameAllowList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddWordListRequest) =>
      Buffer.from(AddWordListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddWordListRequest.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
  updateNickNameAllowList: {
    path: '/gm.WordCheckService/UpdateNickNameAllowList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateWordListRequest) =>
      Buffer.from(UpdateWordListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateWordListRequest.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
  removeNickNameAllowList: {
    path: '/gm.WordCheckService/RemoveNickNameAllowList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RemoveWordListRequest) =>
      Buffer.from(RemoveWordListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RemoveWordListRequest.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
} as const;

export interface WordCheckServiceServer extends UntypedServiceImplementation {
  isBanNickName: handleUnaryCall<WordRequest, WordResponse>;
  getNickNameBanList: handleUnaryCall<GetWordListRequest, GetWordListResponse>;
  addNickNameBanList: handleUnaryCall<AddWordListRequest, DefaultResponse>;
  updateNickNameBanList: handleUnaryCall<
    UpdateWordListRequest,
    DefaultResponse
  >;
  removeNickNameBanList: handleUnaryCall<
    RemoveWordListRequest,
    DefaultResponse
  >;
  getNickNameAllowList: handleUnaryCall<
    GetWordListRequest,
    GetWordListResponse
  >;
  addNickNameAllowList: handleUnaryCall<AddWordListRequest, DefaultResponse>;
  updateNickNameAllowList: handleUnaryCall<
    UpdateWordListRequest,
    DefaultResponse
  >;
  removeNickNameAllowList: handleUnaryCall<
    RemoveWordListRequest,
    DefaultResponse
  >;
}

export interface WordCheckServiceClient extends Client {
  isBanNickName(
    request: WordRequest,
    callback: (error: ServiceError | null, response: WordResponse) => void,
  ): ClientUnaryCall;
  isBanNickName(
    request: WordRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: WordResponse) => void,
  ): ClientUnaryCall;
  isBanNickName(
    request: WordRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: WordResponse) => void,
  ): ClientUnaryCall;
  getNickNameBanList(
    request: GetWordListRequest,
    callback: (
      error: ServiceError | null,
      response: GetWordListResponse,
    ) => void,
  ): ClientUnaryCall;
  getNickNameBanList(
    request: GetWordListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetWordListResponse,
    ) => void,
  ): ClientUnaryCall;
  getNickNameBanList(
    request: GetWordListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetWordListResponse,
    ) => void,
  ): ClientUnaryCall;
  addNickNameBanList(
    request: AddWordListRequest,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  addNickNameBanList(
    request: AddWordListRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  addNickNameBanList(
    request: AddWordListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  updateNickNameBanList(
    request: UpdateWordListRequest,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  updateNickNameBanList(
    request: UpdateWordListRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  updateNickNameBanList(
    request: UpdateWordListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  removeNickNameBanList(
    request: RemoveWordListRequest,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  removeNickNameBanList(
    request: RemoveWordListRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  removeNickNameBanList(
    request: RemoveWordListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  getNickNameAllowList(
    request: GetWordListRequest,
    callback: (
      error: ServiceError | null,
      response: GetWordListResponse,
    ) => void,
  ): ClientUnaryCall;
  getNickNameAllowList(
    request: GetWordListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetWordListResponse,
    ) => void,
  ): ClientUnaryCall;
  getNickNameAllowList(
    request: GetWordListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetWordListResponse,
    ) => void,
  ): ClientUnaryCall;
  addNickNameAllowList(
    request: AddWordListRequest,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  addNickNameAllowList(
    request: AddWordListRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  addNickNameAllowList(
    request: AddWordListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  updateNickNameAllowList(
    request: UpdateWordListRequest,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  updateNickNameAllowList(
    request: UpdateWordListRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  updateNickNameAllowList(
    request: UpdateWordListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  removeNickNameAllowList(
    request: RemoveWordListRequest,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  removeNickNameAllowList(
    request: RemoveWordListRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  removeNickNameAllowList(
    request: RemoveWordListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
}

export const WordCheckServiceClient = makeGenericClientConstructor(
  WordCheckServiceService,
  'gm.WordCheckService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): WordCheckServiceClient;
  service: typeof WordCheckServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
