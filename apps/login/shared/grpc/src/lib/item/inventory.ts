// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: inventory.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';
import {
  Inventory,
  TransactionType,
  transactionTypeFromJSON,
  transactionTypeToJSON,
} from './item-common';

export const protobufPackage = 'item';

export interface ClassState {
  accountId: string;
  grade: string;
  expiredAt: string;
  continuousDay: number;
}

export interface AccountIdRequest {
  accountId: string;
}

export interface GetInventoryRequest {
  accountId: string;
  /** default false */
  includeItem: boolean;
}

export interface GetInvetoryRepeatRequest {
  accountIds: string[];
  /** default false */
  includeItem: boolean;
}

export interface GetInventoryByRequest {
  accountId: string;
  /** item_id or type */
  key: string;
  /** default false */
  includeItem: boolean;
}

export interface InventoryResponse {
  success: boolean;
  errorMessage: string;
  inventory?: Inventory | undefined;
}

export interface InventoriesResponse {
  success: boolean;
  errorMessage: string;
  inventory: Inventory[];
}

export interface InventoryItemRequest {
  accountId: string;
  itemId: string;
  amount: number;
  transactionType: TransactionType;
  txGroupId: string;
}

export interface ClassValidateRequest {
  accountId: string;
  grade: string;
  /** SINGLE | RECURRING */
  paymentType: string;
}

export interface ClassValidateResponse {
  success: boolean;
  errorMessage: string;
  /** NEW, APPEND, UPGRADE, FAIL */
  result: string;
}

export interface ClassApplyRequest {
  accountId: string;
  grade: string;
  count: number;
  /** SINGLE | RECURRING */
  paymentType: string;
}

export interface ClassCancelRequest {
  accountId: string;
  grade: string;
}

export interface ClassStateResponse {
  success: boolean;
  errorMessage: string;
  classState?: ClassState | undefined;
}

export interface ClassCancelResponse {
  success: boolean;
  errorMessage: string;
  classState?: ClassState | undefined;
  excess: string;
  balance: string;
  moneyBox: string;
}

export interface ClassContinuousRewardResponse {
  success: boolean;
  errorMessage: string;
  month: number;
  amount: string;
}

function createBaseClassState(): ClassState {
  return { accountId: '', grade: '', expiredAt: '', continuousDay: 0 };
}

export const ClassState = {
  encode(
    message: ClassState,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.grade !== '') {
      writer.uint32(18).string(message.grade);
    }
    if (message.expiredAt !== '') {
      writer.uint32(26).string(message.expiredAt);
    }
    if (message.continuousDay !== 0) {
      writer.uint32(32).int32(message.continuousDay);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClassState {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClassState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grade = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.expiredAt = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.continuousDay = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClassState {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      grade: isSet(object.grade) ? globalThis.String(object.grade) : '',
      expiredAt: isSet(object.expiredAt)
        ? globalThis.String(object.expiredAt)
        : '',
      continuousDay: isSet(object.continuousDay)
        ? globalThis.Number(object.continuousDay)
        : 0,
    };
  },

  toJSON(message: ClassState): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.grade !== '') {
      obj.grade = message.grade;
    }
    if (message.expiredAt !== '') {
      obj.expiredAt = message.expiredAt;
    }
    if (message.continuousDay !== 0) {
      obj.continuousDay = Math.round(message.continuousDay);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClassState>, I>>(base?: I): ClassState {
    return ClassState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClassState>, I>>(
    object: I,
  ): ClassState {
    const message = createBaseClassState();
    message.accountId = object.accountId ?? '';
    message.grade = object.grade ?? '';
    message.expiredAt = object.expiredAt ?? '';
    message.continuousDay = object.continuousDay ?? 0;
    return message;
  },
};

function createBaseAccountIdRequest(): AccountIdRequest {
  return { accountId: '' };
}

export const AccountIdRequest = {
  encode(
    message: AccountIdRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccountIdRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccountIdRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
    };
  },

  toJSON(message: AccountIdRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccountIdRequest>, I>>(
    base?: I,
  ): AccountIdRequest {
    return AccountIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccountIdRequest>, I>>(
    object: I,
  ): AccountIdRequest {
    const message = createBaseAccountIdRequest();
    message.accountId = object.accountId ?? '';
    return message;
  },
};

function createBaseGetInventoryRequest(): GetInventoryRequest {
  return { accountId: '', includeItem: false };
}

export const GetInventoryRequest = {
  encode(
    message: GetInventoryRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.includeItem !== false) {
      writer.uint32(16).bool(message.includeItem);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetInventoryRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInventoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.includeItem = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInventoryRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      includeItem: isSet(object.includeItem)
        ? globalThis.Boolean(object.includeItem)
        : false,
    };
  },

  toJSON(message: GetInventoryRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.includeItem !== false) {
      obj.includeItem = message.includeItem;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetInventoryRequest>, I>>(
    base?: I,
  ): GetInventoryRequest {
    return GetInventoryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetInventoryRequest>, I>>(
    object: I,
  ): GetInventoryRequest {
    const message = createBaseGetInventoryRequest();
    message.accountId = object.accountId ?? '';
    message.includeItem = object.includeItem ?? false;
    return message;
  },
};

function createBaseGetInvetoryRepeatRequest(): GetInvetoryRepeatRequest {
  return { accountIds: [], includeItem: false };
}

export const GetInvetoryRepeatRequest = {
  encode(
    message: GetInvetoryRepeatRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.accountIds) {
      writer.uint32(10).string(v!);
    }
    if (message.includeItem !== false) {
      writer.uint32(16).bool(message.includeItem);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetInvetoryRepeatRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInvetoryRepeatRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountIds.push(reader.string());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.includeItem = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInvetoryRepeatRequest {
    return {
      accountIds: globalThis.Array.isArray(object?.accountIds)
        ? object.accountIds.map((e: any) => globalThis.String(e))
        : [],
      includeItem: isSet(object.includeItem)
        ? globalThis.Boolean(object.includeItem)
        : false,
    };
  },

  toJSON(message: GetInvetoryRepeatRequest): unknown {
    const obj: any = {};
    if (message.accountIds?.length) {
      obj.accountIds = message.accountIds;
    }
    if (message.includeItem !== false) {
      obj.includeItem = message.includeItem;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetInvetoryRepeatRequest>, I>>(
    base?: I,
  ): GetInvetoryRepeatRequest {
    return GetInvetoryRepeatRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetInvetoryRepeatRequest>, I>>(
    object: I,
  ): GetInvetoryRepeatRequest {
    const message = createBaseGetInvetoryRepeatRequest();
    message.accountIds = object.accountIds?.map(e => e) || [];
    message.includeItem = object.includeItem ?? false;
    return message;
  },
};

function createBaseGetInventoryByRequest(): GetInventoryByRequest {
  return { accountId: '', key: '', includeItem: false };
}

export const GetInventoryByRequest = {
  encode(
    message: GetInventoryByRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.key !== '') {
      writer.uint32(18).string(message.key);
    }
    if (message.includeItem !== false) {
      writer.uint32(24).bool(message.includeItem);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetInventoryByRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInventoryByRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.includeItem = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInventoryByRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      key: isSet(object.key) ? globalThis.String(object.key) : '',
      includeItem: isSet(object.includeItem)
        ? globalThis.Boolean(object.includeItem)
        : false,
    };
  },

  toJSON(message: GetInventoryByRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.key !== '') {
      obj.key = message.key;
    }
    if (message.includeItem !== false) {
      obj.includeItem = message.includeItem;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetInventoryByRequest>, I>>(
    base?: I,
  ): GetInventoryByRequest {
    return GetInventoryByRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetInventoryByRequest>, I>>(
    object: I,
  ): GetInventoryByRequest {
    const message = createBaseGetInventoryByRequest();
    message.accountId = object.accountId ?? '';
    message.key = object.key ?? '';
    message.includeItem = object.includeItem ?? false;
    return message;
  },
};

function createBaseInventoryResponse(): InventoryResponse {
  return { success: false, errorMessage: '', inventory: undefined };
}

export const InventoryResponse = {
  encode(
    message: InventoryResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.inventory !== undefined) {
      Inventory.encode(message.inventory, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InventoryResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.inventory = Inventory.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InventoryResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      inventory: isSet(object.inventory)
        ? Inventory.fromJSON(object.inventory)
        : undefined,
    };
  },

  toJSON(message: InventoryResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.inventory !== undefined) {
      obj.inventory = Inventory.toJSON(message.inventory);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InventoryResponse>, I>>(
    base?: I,
  ): InventoryResponse {
    return InventoryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InventoryResponse>, I>>(
    object: I,
  ): InventoryResponse {
    const message = createBaseInventoryResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.inventory =
      object.inventory !== undefined && object.inventory !== null
        ? Inventory.fromPartial(object.inventory)
        : undefined;
    return message;
  },
};

function createBaseInventoriesResponse(): InventoriesResponse {
  return { success: false, errorMessage: '', inventory: [] };
}

export const InventoriesResponse = {
  encode(
    message: InventoriesResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.inventory) {
      Inventory.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): InventoriesResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventoriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.inventory.push(Inventory.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InventoriesResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      inventory: globalThis.Array.isArray(object?.inventory)
        ? object.inventory.map((e: any) => Inventory.fromJSON(e))
        : [],
    };
  },

  toJSON(message: InventoriesResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.inventory?.length) {
      obj.inventory = message.inventory.map(e => Inventory.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InventoriesResponse>, I>>(
    base?: I,
  ): InventoriesResponse {
    return InventoriesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InventoriesResponse>, I>>(
    object: I,
  ): InventoriesResponse {
    const message = createBaseInventoriesResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.inventory =
      object.inventory?.map(e => Inventory.fromPartial(e)) || [];
    return message;
  },
};

function createBaseInventoryItemRequest(): InventoryItemRequest {
  return {
    accountId: '',
    itemId: '',
    amount: 0,
    transactionType: 0,
    txGroupId: '',
  };
}

export const InventoryItemRequest = {
  encode(
    message: InventoryItemRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.itemId !== '') {
      writer.uint32(18).string(message.itemId);
    }
    if (message.amount !== 0) {
      writer.uint32(24).int32(message.amount);
    }
    if (message.transactionType !== 0) {
      writer.uint32(32).int32(message.transactionType);
    }
    if (message.txGroupId !== '') {
      writer.uint32(42).string(message.txGroupId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): InventoryItemRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventoryItemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.itemId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.amount = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.transactionType = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.txGroupId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InventoryItemRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      itemId: isSet(object.itemId) ? globalThis.String(object.itemId) : '',
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      transactionType: isSet(object.transactionType)
        ? transactionTypeFromJSON(object.transactionType)
        : 0,
      txGroupId: isSet(object.txGroupId)
        ? globalThis.String(object.txGroupId)
        : '',
    };
  },

  toJSON(message: InventoryItemRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.itemId !== '') {
      obj.itemId = message.itemId;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.transactionType !== 0) {
      obj.transactionType = transactionTypeToJSON(message.transactionType);
    }
    if (message.txGroupId !== '') {
      obj.txGroupId = message.txGroupId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InventoryItemRequest>, I>>(
    base?: I,
  ): InventoryItemRequest {
    return InventoryItemRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InventoryItemRequest>, I>>(
    object: I,
  ): InventoryItemRequest {
    const message = createBaseInventoryItemRequest();
    message.accountId = object.accountId ?? '';
    message.itemId = object.itemId ?? '';
    message.amount = object.amount ?? 0;
    message.transactionType = object.transactionType ?? 0;
    message.txGroupId = object.txGroupId ?? '';
    return message;
  },
};

function createBaseClassValidateRequest(): ClassValidateRequest {
  return { accountId: '', grade: '', paymentType: '' };
}

export const ClassValidateRequest = {
  encode(
    message: ClassValidateRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.grade !== '') {
      writer.uint32(18).string(message.grade);
    }
    if (message.paymentType !== '') {
      writer.uint32(26).string(message.paymentType);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ClassValidateRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClassValidateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grade = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.paymentType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClassValidateRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      grade: isSet(object.grade) ? globalThis.String(object.grade) : '',
      paymentType: isSet(object.paymentType)
        ? globalThis.String(object.paymentType)
        : '',
    };
  },

  toJSON(message: ClassValidateRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.grade !== '') {
      obj.grade = message.grade;
    }
    if (message.paymentType !== '') {
      obj.paymentType = message.paymentType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClassValidateRequest>, I>>(
    base?: I,
  ): ClassValidateRequest {
    return ClassValidateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClassValidateRequest>, I>>(
    object: I,
  ): ClassValidateRequest {
    const message = createBaseClassValidateRequest();
    message.accountId = object.accountId ?? '';
    message.grade = object.grade ?? '';
    message.paymentType = object.paymentType ?? '';
    return message;
  },
};

function createBaseClassValidateResponse(): ClassValidateResponse {
  return { success: false, errorMessage: '', result: '' };
}

export const ClassValidateResponse = {
  encode(
    message: ClassValidateResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.result !== '') {
      writer.uint32(26).string(message.result);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ClassValidateResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClassValidateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.result = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClassValidateResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      result: isSet(object.result) ? globalThis.String(object.result) : '',
    };
  },

  toJSON(message: ClassValidateResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.result !== '') {
      obj.result = message.result;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClassValidateResponse>, I>>(
    base?: I,
  ): ClassValidateResponse {
    return ClassValidateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClassValidateResponse>, I>>(
    object: I,
  ): ClassValidateResponse {
    const message = createBaseClassValidateResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.result = object.result ?? '';
    return message;
  },
};

function createBaseClassApplyRequest(): ClassApplyRequest {
  return { accountId: '', grade: '', count: 0, paymentType: '' };
}

export const ClassApplyRequest = {
  encode(
    message: ClassApplyRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.grade !== '') {
      writer.uint32(18).string(message.grade);
    }
    if (message.count !== 0) {
      writer.uint32(24).int32(message.count);
    }
    if (message.paymentType !== '') {
      writer.uint32(34).string(message.paymentType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClassApplyRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClassApplyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grade = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.count = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.paymentType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClassApplyRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      grade: isSet(object.grade) ? globalThis.String(object.grade) : '',
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      paymentType: isSet(object.paymentType)
        ? globalThis.String(object.paymentType)
        : '',
    };
  },

  toJSON(message: ClassApplyRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.grade !== '') {
      obj.grade = message.grade;
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.paymentType !== '') {
      obj.paymentType = message.paymentType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClassApplyRequest>, I>>(
    base?: I,
  ): ClassApplyRequest {
    return ClassApplyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClassApplyRequest>, I>>(
    object: I,
  ): ClassApplyRequest {
    const message = createBaseClassApplyRequest();
    message.accountId = object.accountId ?? '';
    message.grade = object.grade ?? '';
    message.count = object.count ?? 0;
    message.paymentType = object.paymentType ?? '';
    return message;
  },
};

function createBaseClassCancelRequest(): ClassCancelRequest {
  return { accountId: '', grade: '' };
}

export const ClassCancelRequest = {
  encode(
    message: ClassCancelRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.grade !== '') {
      writer.uint32(18).string(message.grade);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ClassCancelRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClassCancelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grade = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClassCancelRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      grade: isSet(object.grade) ? globalThis.String(object.grade) : '',
    };
  },

  toJSON(message: ClassCancelRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.grade !== '') {
      obj.grade = message.grade;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClassCancelRequest>, I>>(
    base?: I,
  ): ClassCancelRequest {
    return ClassCancelRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClassCancelRequest>, I>>(
    object: I,
  ): ClassCancelRequest {
    const message = createBaseClassCancelRequest();
    message.accountId = object.accountId ?? '';
    message.grade = object.grade ?? '';
    return message;
  },
};

function createBaseClassStateResponse(): ClassStateResponse {
  return { success: false, errorMessage: '', classState: undefined };
}

export const ClassStateResponse = {
  encode(
    message: ClassStateResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.classState !== undefined) {
      ClassState.encode(message.classState, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ClassStateResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClassStateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.classState = ClassState.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClassStateResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      classState: isSet(object.classState)
        ? ClassState.fromJSON(object.classState)
        : undefined,
    };
  },

  toJSON(message: ClassStateResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.classState !== undefined) {
      obj.classState = ClassState.toJSON(message.classState);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClassStateResponse>, I>>(
    base?: I,
  ): ClassStateResponse {
    return ClassStateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClassStateResponse>, I>>(
    object: I,
  ): ClassStateResponse {
    const message = createBaseClassStateResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.classState =
      object.classState !== undefined && object.classState !== null
        ? ClassState.fromPartial(object.classState)
        : undefined;
    return message;
  },
};

function createBaseClassCancelResponse(): ClassCancelResponse {
  return {
    success: false,
    errorMessage: '',
    classState: undefined,
    excess: '',
    balance: '',
    moneyBox: '',
  };
}

export const ClassCancelResponse = {
  encode(
    message: ClassCancelResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.classState !== undefined) {
      ClassState.encode(message.classState, writer.uint32(26).fork()).join();
    }
    if (message.excess !== '') {
      writer.uint32(34).string(message.excess);
    }
    if (message.balance !== '') {
      writer.uint32(42).string(message.balance);
    }
    if (message.moneyBox !== '') {
      writer.uint32(50).string(message.moneyBox);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ClassCancelResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClassCancelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.classState = ClassState.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.excess = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.balance = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.moneyBox = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClassCancelResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      classState: isSet(object.classState)
        ? ClassState.fromJSON(object.classState)
        : undefined,
      excess: isSet(object.excess) ? globalThis.String(object.excess) : '',
      balance: isSet(object.balance) ? globalThis.String(object.balance) : '',
      moneyBox: isSet(object.moneyBox)
        ? globalThis.String(object.moneyBox)
        : '',
    };
  },

  toJSON(message: ClassCancelResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.classState !== undefined) {
      obj.classState = ClassState.toJSON(message.classState);
    }
    if (message.excess !== '') {
      obj.excess = message.excess;
    }
    if (message.balance !== '') {
      obj.balance = message.balance;
    }
    if (message.moneyBox !== '') {
      obj.moneyBox = message.moneyBox;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClassCancelResponse>, I>>(
    base?: I,
  ): ClassCancelResponse {
    return ClassCancelResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClassCancelResponse>, I>>(
    object: I,
  ): ClassCancelResponse {
    const message = createBaseClassCancelResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.classState =
      object.classState !== undefined && object.classState !== null
        ? ClassState.fromPartial(object.classState)
        : undefined;
    message.excess = object.excess ?? '';
    message.balance = object.balance ?? '';
    message.moneyBox = object.moneyBox ?? '';
    return message;
  },
};

function createBaseClassContinuousRewardResponse(): ClassContinuousRewardResponse {
  return { success: false, errorMessage: '', month: 0, amount: '' };
}

export const ClassContinuousRewardResponse = {
  encode(
    message: ClassContinuousRewardResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.month !== 0) {
      writer.uint32(24).int32(message.month);
    }
    if (message.amount !== '') {
      writer.uint32(34).string(message.amount);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ClassContinuousRewardResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClassContinuousRewardResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.month = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.amount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClassContinuousRewardResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      month: isSet(object.month) ? globalThis.Number(object.month) : 0,
      amount: isSet(object.amount) ? globalThis.String(object.amount) : '',
    };
  },

  toJSON(message: ClassContinuousRewardResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.month !== 0) {
      obj.month = Math.round(message.month);
    }
    if (message.amount !== '') {
      obj.amount = message.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClassContinuousRewardResponse>, I>>(
    base?: I,
  ): ClassContinuousRewardResponse {
    return ClassContinuousRewardResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClassContinuousRewardResponse>, I>>(
    object: I,
  ): ClassContinuousRewardResponse {
    const message = createBaseClassContinuousRewardResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.month = object.month ?? 0;
    message.amount = object.amount ?? '';
    return message;
  },
};

export type InventoryServiceService = typeof InventoryServiceService;
export const InventoryServiceService = {
  getInventory: {
    path: '/item.InventoryService/GetInventory',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetInventoryRequest) =>
      Buffer.from(GetInventoryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetInventoryRequest.decode(value),
    responseSerialize: (value: InventoriesResponse) =>
      Buffer.from(InventoriesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => InventoriesResponse.decode(value),
  },
  getClassItem: {
    path: '/item.InventoryService/GetClassItem',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetInventoryRequest) =>
      Buffer.from(GetInventoryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetInventoryRequest.decode(value),
    responseSerialize: (value: InventoryResponse) =>
      Buffer.from(InventoryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => InventoryResponse.decode(value),
  },
  getClassItemByAccountIds: {
    path: '/item.InventoryService/GetClassItemByAccountIds',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetInvetoryRepeatRequest) =>
      Buffer.from(GetInvetoryRepeatRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      GetInvetoryRepeatRequest.decode(value),
    responseSerialize: (value: InventoriesResponse) =>
      Buffer.from(InventoriesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => InventoriesResponse.decode(value),
  },
  getItemByType: {
    path: '/item.InventoryService/GetItemByType',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetInventoryByRequest) =>
      Buffer.from(GetInventoryByRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetInventoryByRequest.decode(value),
    responseSerialize: (value: InventoriesResponse) =>
      Buffer.from(InventoriesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => InventoriesResponse.decode(value),
  },
  getItemByItemId: {
    path: '/item.InventoryService/GetItemByItemId',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetInventoryByRequest) =>
      Buffer.from(GetInventoryByRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetInventoryByRequest.decode(value),
    responseSerialize: (value: InventoriesResponse) =>
      Buffer.from(InventoriesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => InventoriesResponse.decode(value),
  },
  inputItem: {
    path: '/item.InventoryService/InputItem',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: InventoryItemRequest) =>
      Buffer.from(InventoryItemRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => InventoryItemRequest.decode(value),
    responseSerialize: (value: InventoryResponse) =>
      Buffer.from(InventoryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => InventoryResponse.decode(value),
  },
  useItem: {
    path: '/item.InventoryService/UseItem',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: InventoryItemRequest) =>
      Buffer.from(InventoryItemRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => InventoryItemRequest.decode(value),
    responseSerialize: (value: InventoryResponse) =>
      Buffer.from(InventoryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => InventoryResponse.decode(value),
  },
  effectOn: {
    path: '/item.InventoryService/EffectOn',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: InventoryItemRequest) =>
      Buffer.from(InventoryItemRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => InventoryItemRequest.decode(value),
    responseSerialize: (value: InventoryResponse) =>
      Buffer.from(InventoryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => InventoryResponse.decode(value),
  },
  effectOff: {
    path: '/item.InventoryService/EffectOff',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: InventoryItemRequest) =>
      Buffer.from(InventoryItemRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => InventoryItemRequest.decode(value),
    responseSerialize: (value: InventoryResponse) =>
      Buffer.from(InventoryResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => InventoryResponse.decode(value),
  },
  /** class item control */
  classValidate: {
    path: '/item.InventoryService/ClassValidate',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ClassValidateRequest) =>
      Buffer.from(ClassValidateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ClassValidateRequest.decode(value),
    responseSerialize: (value: ClassValidateResponse) =>
      Buffer.from(ClassValidateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ClassValidateResponse.decode(value),
  },
  classApply: {
    path: '/item.InventoryService/ClassApply',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ClassApplyRequest) =>
      Buffer.from(ClassApplyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ClassApplyRequest.decode(value),
    responseSerialize: (value: ClassStateResponse) =>
      Buffer.from(ClassStateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ClassStateResponse.decode(value),
  },
  classCancel: {
    path: '/item.InventoryService/ClassCancel',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ClassCancelRequest) =>
      Buffer.from(ClassCancelRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ClassCancelRequest.decode(value),
    responseSerialize: (value: ClassCancelResponse) =>
      Buffer.from(ClassCancelResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ClassCancelResponse.decode(value),
  },
  classContinuousAdd: {
    path: '/item.InventoryService/ClassContinuousAdd',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AccountIdRequest) =>
      Buffer.from(AccountIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AccountIdRequest.decode(value),
    responseSerialize: (value: ClassContinuousRewardResponse) =>
      Buffer.from(ClassContinuousRewardResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      ClassContinuousRewardResponse.decode(value),
  },
  classContinuousReward: {
    path: '/item.InventoryService/ClassContinuousReward',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AccountIdRequest) =>
      Buffer.from(AccountIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AccountIdRequest.decode(value),
    responseSerialize: (value: ClassContinuousRewardResponse) =>
      Buffer.from(ClassContinuousRewardResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      ClassContinuousRewardResponse.decode(value),
  },
} as const;

export interface InventoryServiceServer extends UntypedServiceImplementation {
  getInventory: handleUnaryCall<GetInventoryRequest, InventoriesResponse>;
  getClassItem: handleUnaryCall<GetInventoryRequest, InventoryResponse>;
  getClassItemByAccountIds: handleUnaryCall<
    GetInvetoryRepeatRequest,
    InventoriesResponse
  >;
  getItemByType: handleUnaryCall<GetInventoryByRequest, InventoriesResponse>;
  getItemByItemId: handleUnaryCall<GetInventoryByRequest, InventoriesResponse>;
  inputItem: handleUnaryCall<InventoryItemRequest, InventoryResponse>;
  useItem: handleUnaryCall<InventoryItemRequest, InventoryResponse>;
  effectOn: handleUnaryCall<InventoryItemRequest, InventoryResponse>;
  effectOff: handleUnaryCall<InventoryItemRequest, InventoryResponse>;
  /** class item control */
  classValidate: handleUnaryCall<ClassValidateRequest, ClassValidateResponse>;
  classApply: handleUnaryCall<ClassApplyRequest, ClassStateResponse>;
  classCancel: handleUnaryCall<ClassCancelRequest, ClassCancelResponse>;
  classContinuousAdd: handleUnaryCall<
    AccountIdRequest,
    ClassContinuousRewardResponse
  >;
  classContinuousReward: handleUnaryCall<
    AccountIdRequest,
    ClassContinuousRewardResponse
  >;
}

export interface InventoryServiceClient extends Client {
  getInventory(
    request: GetInventoryRequest,
    callback: (
      error: ServiceError | null,
      response: InventoriesResponse,
    ) => void,
  ): ClientUnaryCall;
  getInventory(
    request: GetInventoryRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: InventoriesResponse,
    ) => void,
  ): ClientUnaryCall;
  getInventory(
    request: GetInventoryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: InventoriesResponse,
    ) => void,
  ): ClientUnaryCall;
  getClassItem(
    request: GetInventoryRequest,
    callback: (error: ServiceError | null, response: InventoryResponse) => void,
  ): ClientUnaryCall;
  getClassItem(
    request: GetInventoryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: InventoryResponse) => void,
  ): ClientUnaryCall;
  getClassItem(
    request: GetInventoryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: InventoryResponse) => void,
  ): ClientUnaryCall;
  getClassItemByAccountIds(
    request: GetInvetoryRepeatRequest,
    callback: (
      error: ServiceError | null,
      response: InventoriesResponse,
    ) => void,
  ): ClientUnaryCall;
  getClassItemByAccountIds(
    request: GetInvetoryRepeatRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: InventoriesResponse,
    ) => void,
  ): ClientUnaryCall;
  getClassItemByAccountIds(
    request: GetInvetoryRepeatRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: InventoriesResponse,
    ) => void,
  ): ClientUnaryCall;
  getItemByType(
    request: GetInventoryByRequest,
    callback: (
      error: ServiceError | null,
      response: InventoriesResponse,
    ) => void,
  ): ClientUnaryCall;
  getItemByType(
    request: GetInventoryByRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: InventoriesResponse,
    ) => void,
  ): ClientUnaryCall;
  getItemByType(
    request: GetInventoryByRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: InventoriesResponse,
    ) => void,
  ): ClientUnaryCall;
  getItemByItemId(
    request: GetInventoryByRequest,
    callback: (
      error: ServiceError | null,
      response: InventoriesResponse,
    ) => void,
  ): ClientUnaryCall;
  getItemByItemId(
    request: GetInventoryByRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: InventoriesResponse,
    ) => void,
  ): ClientUnaryCall;
  getItemByItemId(
    request: GetInventoryByRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: InventoriesResponse,
    ) => void,
  ): ClientUnaryCall;
  inputItem(
    request: InventoryItemRequest,
    callback: (error: ServiceError | null, response: InventoryResponse) => void,
  ): ClientUnaryCall;
  inputItem(
    request: InventoryItemRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: InventoryResponse) => void,
  ): ClientUnaryCall;
  inputItem(
    request: InventoryItemRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: InventoryResponse) => void,
  ): ClientUnaryCall;
  useItem(
    request: InventoryItemRequest,
    callback: (error: ServiceError | null, response: InventoryResponse) => void,
  ): ClientUnaryCall;
  useItem(
    request: InventoryItemRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: InventoryResponse) => void,
  ): ClientUnaryCall;
  useItem(
    request: InventoryItemRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: InventoryResponse) => void,
  ): ClientUnaryCall;
  effectOn(
    request: InventoryItemRequest,
    callback: (error: ServiceError | null, response: InventoryResponse) => void,
  ): ClientUnaryCall;
  effectOn(
    request: InventoryItemRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: InventoryResponse) => void,
  ): ClientUnaryCall;
  effectOn(
    request: InventoryItemRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: InventoryResponse) => void,
  ): ClientUnaryCall;
  effectOff(
    request: InventoryItemRequest,
    callback: (error: ServiceError | null, response: InventoryResponse) => void,
  ): ClientUnaryCall;
  effectOff(
    request: InventoryItemRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: InventoryResponse) => void,
  ): ClientUnaryCall;
  effectOff(
    request: InventoryItemRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: InventoryResponse) => void,
  ): ClientUnaryCall;
  /** class item control */
  classValidate(
    request: ClassValidateRequest,
    callback: (
      error: ServiceError | null,
      response: ClassValidateResponse,
    ) => void,
  ): ClientUnaryCall;
  classValidate(
    request: ClassValidateRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: ClassValidateResponse,
    ) => void,
  ): ClientUnaryCall;
  classValidate(
    request: ClassValidateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: ClassValidateResponse,
    ) => void,
  ): ClientUnaryCall;
  classApply(
    request: ClassApplyRequest,
    callback: (
      error: ServiceError | null,
      response: ClassStateResponse,
    ) => void,
  ): ClientUnaryCall;
  classApply(
    request: ClassApplyRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: ClassStateResponse,
    ) => void,
  ): ClientUnaryCall;
  classApply(
    request: ClassApplyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: ClassStateResponse,
    ) => void,
  ): ClientUnaryCall;
  classCancel(
    request: ClassCancelRequest,
    callback: (
      error: ServiceError | null,
      response: ClassCancelResponse,
    ) => void,
  ): ClientUnaryCall;
  classCancel(
    request: ClassCancelRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: ClassCancelResponse,
    ) => void,
  ): ClientUnaryCall;
  classCancel(
    request: ClassCancelRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: ClassCancelResponse,
    ) => void,
  ): ClientUnaryCall;
  classContinuousAdd(
    request: AccountIdRequest,
    callback: (
      error: ServiceError | null,
      response: ClassContinuousRewardResponse,
    ) => void,
  ): ClientUnaryCall;
  classContinuousAdd(
    request: AccountIdRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: ClassContinuousRewardResponse,
    ) => void,
  ): ClientUnaryCall;
  classContinuousAdd(
    request: AccountIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: ClassContinuousRewardResponse,
    ) => void,
  ): ClientUnaryCall;
  classContinuousReward(
    request: AccountIdRequest,
    callback: (
      error: ServiceError | null,
      response: ClassContinuousRewardResponse,
    ) => void,
  ): ClientUnaryCall;
  classContinuousReward(
    request: AccountIdRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: ClassContinuousRewardResponse,
    ) => void,
  ): ClientUnaryCall;
  classContinuousReward(
    request: AccountIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: ClassContinuousRewardResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const InventoryServiceClient = makeGenericClientConstructor(
  InventoryServiceService,
  'item.InventoryService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): InventoryServiceClient;
  service: typeof InventoryServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
