// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: point.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';

export const protobufPackage = 'item';

export enum PointType {
  PTX_NONE = 0,
  PTX_ACHIEVEMENTS = 1,
  PTX_BOOST = 2,
  PTX_CLASS = 3,
  PTX_CLASS_B = 4,
  PTX_CLASS_A = 5,
  PTX_CLASS_S = 6,
  PTX_LUCKY_BOX = 7,
  PTX_GUILD = 8,
  UNRECOGNIZED = -1,
}

export function pointTypeFromJSON(object: any): PointType {
  switch (object) {
    case 0:
    case 'PTX_NONE':
      return PointType.PTX_NONE;
    case 1:
    case 'PTX_ACHIEVEMENTS':
      return PointType.PTX_ACHIEVEMENTS;
    case 2:
    case 'PTX_BOOST':
      return PointType.PTX_BOOST;
    case 3:
    case 'PTX_CLASS':
      return PointType.PTX_CLASS;
    case 4:
    case 'PTX_CLASS_B':
      return PointType.PTX_CLASS_B;
    case 5:
    case 'PTX_CLASS_A':
      return PointType.PTX_CLASS_A;
    case 6:
    case 'PTX_CLASS_S':
      return PointType.PTX_CLASS_S;
    case 7:
    case 'PTX_LUCKY_BOX':
      return PointType.PTX_LUCKY_BOX;
    case 8:
    case 'PTX_GUILD':
      return PointType.PTX_GUILD;
    case -1:
    case 'UNRECOGNIZED':
    default:
      return PointType.UNRECOGNIZED;
  }
}

export function pointTypeToJSON(object: PointType): string {
  switch (object) {
    case PointType.PTX_NONE:
      return 'PTX_NONE';
    case PointType.PTX_ACHIEVEMENTS:
      return 'PTX_ACHIEVEMENTS';
    case PointType.PTX_BOOST:
      return 'PTX_BOOST';
    case PointType.PTX_CLASS:
      return 'PTX_CLASS';
    case PointType.PTX_CLASS_B:
      return 'PTX_CLASS_B';
    case PointType.PTX_CLASS_A:
      return 'PTX_CLASS_A';
    case PointType.PTX_CLASS_S:
      return 'PTX_CLASS_S';
    case PointType.PTX_LUCKY_BOX:
      return 'PTX_LUCKY_BOX';
    case PointType.PTX_GUILD:
      return 'PTX_GUILD';
    case PointType.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED';
  }
}

export enum RewardType {
  PRT_NONE = 0,
  PRT_BOOST_6 = 1,
  PRT_BOOST_17 = 2,
  PRT_BOOST_39 = 3,
  PRT_BOOST_67 = 4,
  PRT_BOOST_100 = 5,
  /** PRT_ACHIEVEMENTS_05M - 50만 포인트 업적 보상 */
  PRT_ACHIEVEMENTS_05M = 6,
  /** PRT_ACHIEVEMENTS_5M - 500만 포인트 업적 보상 */
  PRT_ACHIEVEMENTS_5M = 7,
  /** PRT_ACHIEVEMENTS_50M - 5000만 포인트 업적 보상 */
  PRT_ACHIEVEMENTS_50M = 8,
  /** PRT_ACHIEVEMENTS_05B - 5억 포인트 업적 보상 */
  PRT_ACHIEVEMENTS_05B = 9,
  /** PRT_CLASS_B_1 - 클래스 B 업적 보상 800 : 140만 */
  PRT_CLASS_B_1 = 10,
  /** PRT_CLASS_B_2 - 클래스 B 업적 보상 2500 : 200만 */
  PRT_CLASS_B_2 = 11,
  /** PRT_CLASS_B_3 - 클래스 B 업적 보상 5000 : 300만 */
  PRT_CLASS_B_3 = 12,
  /** PRT_CLASS_A_1 - 클래스 A 업적 보상 6000 : 400만 */
  PRT_CLASS_A_1 = 13,
  /** PRT_CLASS_A_2 - 클래스 A 업적 보상 14000 : 600만 */
  PRT_CLASS_A_2 = 14,
  /** PRT_CLASS_A_3 - 클래스 A 업적 보상 25000 : 1000만 */
  PRT_CLASS_A_3 = 15,
  /** PRT_CLASS_S_1 - 클래스 S 업적 보상 20000 : 1000만 */
  PRT_CLASS_S_1 = 16,
  /** PRT_CLASS_S_2 - 클래스 S 업적 보상 65000 : 1500만 */
  PRT_CLASS_S_2 = 17,
  /** PRT_CLASS_S_3 - 클래스 S 업적 보상 100000 : 5000만 */
  PRT_CLASS_S_3 = 18,
  UNRECOGNIZED = -1,
}

export function rewardTypeFromJSON(object: any): RewardType {
  switch (object) {
    case 0:
    case 'PRT_NONE':
      return RewardType.PRT_NONE;
    case 1:
    case 'PRT_BOOST_6':
      return RewardType.PRT_BOOST_6;
    case 2:
    case 'PRT_BOOST_17':
      return RewardType.PRT_BOOST_17;
    case 3:
    case 'PRT_BOOST_39':
      return RewardType.PRT_BOOST_39;
    case 4:
    case 'PRT_BOOST_67':
      return RewardType.PRT_BOOST_67;
    case 5:
    case 'PRT_BOOST_100':
      return RewardType.PRT_BOOST_100;
    case 6:
    case 'PRT_ACHIEVEMENTS_05M':
      return RewardType.PRT_ACHIEVEMENTS_05M;
    case 7:
    case 'PRT_ACHIEVEMENTS_5M':
      return RewardType.PRT_ACHIEVEMENTS_5M;
    case 8:
    case 'PRT_ACHIEVEMENTS_50M':
      return RewardType.PRT_ACHIEVEMENTS_50M;
    case 9:
    case 'PRT_ACHIEVEMENTS_05B':
      return RewardType.PRT_ACHIEVEMENTS_05B;
    case 10:
    case 'PRT_CLASS_B_1':
      return RewardType.PRT_CLASS_B_1;
    case 11:
    case 'PRT_CLASS_B_2':
      return RewardType.PRT_CLASS_B_2;
    case 12:
    case 'PRT_CLASS_B_3':
      return RewardType.PRT_CLASS_B_3;
    case 13:
    case 'PRT_CLASS_A_1':
      return RewardType.PRT_CLASS_A_1;
    case 14:
    case 'PRT_CLASS_A_2':
      return RewardType.PRT_CLASS_A_2;
    case 15:
    case 'PRT_CLASS_A_3':
      return RewardType.PRT_CLASS_A_3;
    case 16:
    case 'PRT_CLASS_S_1':
      return RewardType.PRT_CLASS_S_1;
    case 17:
    case 'PRT_CLASS_S_2':
      return RewardType.PRT_CLASS_S_2;
    case 18:
    case 'PRT_CLASS_S_3':
      return RewardType.PRT_CLASS_S_3;
    case -1:
    case 'UNRECOGNIZED':
    default:
      return RewardType.UNRECOGNIZED;
  }
}

export function rewardTypeToJSON(object: RewardType): string {
  switch (object) {
    case RewardType.PRT_NONE:
      return 'PRT_NONE';
    case RewardType.PRT_BOOST_6:
      return 'PRT_BOOST_6';
    case RewardType.PRT_BOOST_17:
      return 'PRT_BOOST_17';
    case RewardType.PRT_BOOST_39:
      return 'PRT_BOOST_39';
    case RewardType.PRT_BOOST_67:
      return 'PRT_BOOST_67';
    case RewardType.PRT_BOOST_100:
      return 'PRT_BOOST_100';
    case RewardType.PRT_ACHIEVEMENTS_05M:
      return 'PRT_ACHIEVEMENTS_05M';
    case RewardType.PRT_ACHIEVEMENTS_5M:
      return 'PRT_ACHIEVEMENTS_5M';
    case RewardType.PRT_ACHIEVEMENTS_50M:
      return 'PRT_ACHIEVEMENTS_50M';
    case RewardType.PRT_ACHIEVEMENTS_05B:
      return 'PRT_ACHIEVEMENTS_05B';
    case RewardType.PRT_CLASS_B_1:
      return 'PRT_CLASS_B_1';
    case RewardType.PRT_CLASS_B_2:
      return 'PRT_CLASS_B_2';
    case RewardType.PRT_CLASS_B_3:
      return 'PRT_CLASS_B_3';
    case RewardType.PRT_CLASS_A_1:
      return 'PRT_CLASS_A_1';
    case RewardType.PRT_CLASS_A_2:
      return 'PRT_CLASS_A_2';
    case RewardType.PRT_CLASS_A_3:
      return 'PRT_CLASS_A_3';
    case RewardType.PRT_CLASS_S_1:
      return 'PRT_CLASS_S_1';
    case RewardType.PRT_CLASS_S_2:
      return 'PRT_CLASS_S_2';
    case RewardType.PRT_CLASS_S_3:
      return 'PRT_CLASS_S_3';
    case RewardType.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED';
  }
}

export interface Point {
  accountId: string;
  total: string;
  achievements: string;
  boost: number;
  class: number;
  luckyBox: number;
  guild: number;
  addableAchievements: boolean;
  addableBoost: boolean;
  addableClass: boolean;
  addableLuckyBox: boolean;
  addableGuild: boolean;
  weeklyLuckyBox: number;
  achievementsRewards: string[];
  boostRewards: string[];
  classRewards: string[];
}

export interface PointRequest {
  accountId: string;
  amount: string;
}

export interface GetPointByAccountIdsRequest {
  accountIds: string[];
}

export interface ResetByTypeRequest {
  accountId: string;
  type: PointType;
}

export interface PointResponse {
  success: boolean;
  errorMessage: string;
  point?: Point | undefined;
}

export interface PointsResponse {
  success: boolean;
  errorMessage: string;
  point: Point[];
}

export interface RewardOnPointRequest {
  accountId: string;
  rewardType: RewardType;
}

function createBasePoint(): Point {
  return {
    accountId: '',
    total: '',
    achievements: '',
    boost: 0,
    class: 0,
    luckyBox: 0,
    guild: 0,
    addableAchievements: false,
    addableBoost: false,
    addableClass: false,
    addableLuckyBox: false,
    addableGuild: false,
    weeklyLuckyBox: 0,
    achievementsRewards: [],
    boostRewards: [],
    classRewards: [],
  };
}

export const Point = {
  encode(
    message: Point,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.total !== '') {
      writer.uint32(18).string(message.total);
    }
    if (message.achievements !== '') {
      writer.uint32(26).string(message.achievements);
    }
    if (message.boost !== 0) {
      writer.uint32(32).int32(message.boost);
    }
    if (message.class !== 0) {
      writer.uint32(40).int32(message.class);
    }
    if (message.luckyBox !== 0) {
      writer.uint32(48).int32(message.luckyBox);
    }
    if (message.guild !== 0) {
      writer.uint32(56).int32(message.guild);
    }
    if (message.addableAchievements !== false) {
      writer.uint32(64).bool(message.addableAchievements);
    }
    if (message.addableBoost !== false) {
      writer.uint32(72).bool(message.addableBoost);
    }
    if (message.addableClass !== false) {
      writer.uint32(80).bool(message.addableClass);
    }
    if (message.addableLuckyBox !== false) {
      writer.uint32(88).bool(message.addableLuckyBox);
    }
    if (message.addableGuild !== false) {
      writer.uint32(96).bool(message.addableGuild);
    }
    if (message.weeklyLuckyBox !== 0) {
      writer.uint32(104).int32(message.weeklyLuckyBox);
    }
    for (const v of message.achievementsRewards) {
      writer.uint32(114).string(v!);
    }
    for (const v of message.boostRewards) {
      writer.uint32(122).string(v!);
    }
    for (const v of message.classRewards) {
      writer.uint32(130).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Point {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.total = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.achievements = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.boost = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.class = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.luckyBox = reader.int32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.guild = reader.int32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.addableAchievements = reader.bool();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.addableBoost = reader.bool();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.addableClass = reader.bool();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.addableLuckyBox = reader.bool();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.addableGuild = reader.bool();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.weeklyLuckyBox = reader.int32();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.achievementsRewards.push(reader.string());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.boostRewards.push(reader.string());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.classRewards.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Point {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      total: isSet(object.total) ? globalThis.String(object.total) : '',
      achievements: isSet(object.achievements)
        ? globalThis.String(object.achievements)
        : '',
      boost: isSet(object.boost) ? globalThis.Number(object.boost) : 0,
      class: isSet(object.class) ? globalThis.Number(object.class) : 0,
      luckyBox: isSet(object.luckyBox) ? globalThis.Number(object.luckyBox) : 0,
      guild: isSet(object.guild) ? globalThis.Number(object.guild) : 0,
      addableAchievements: isSet(object.addableAchievements)
        ? globalThis.Boolean(object.addableAchievements)
        : false,
      addableBoost: isSet(object.addableBoost)
        ? globalThis.Boolean(object.addableBoost)
        : false,
      addableClass: isSet(object.addableClass)
        ? globalThis.Boolean(object.addableClass)
        : false,
      addableLuckyBox: isSet(object.addableLuckyBox)
        ? globalThis.Boolean(object.addableLuckyBox)
        : false,
      addableGuild: isSet(object.addableGuild)
        ? globalThis.Boolean(object.addableGuild)
        : false,
      weeklyLuckyBox: isSet(object.weeklyLuckyBox)
        ? globalThis.Number(object.weeklyLuckyBox)
        : 0,
      achievementsRewards: globalThis.Array.isArray(object?.achievementsRewards)
        ? object.achievementsRewards.map((e: any) => globalThis.String(e))
        : [],
      boostRewards: globalThis.Array.isArray(object?.boostRewards)
        ? object.boostRewards.map((e: any) => globalThis.String(e))
        : [],
      classRewards: globalThis.Array.isArray(object?.classRewards)
        ? object.classRewards.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: Point): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.total !== '') {
      obj.total = message.total;
    }
    if (message.achievements !== '') {
      obj.achievements = message.achievements;
    }
    if (message.boost !== 0) {
      obj.boost = Math.round(message.boost);
    }
    if (message.class !== 0) {
      obj.class = Math.round(message.class);
    }
    if (message.luckyBox !== 0) {
      obj.luckyBox = Math.round(message.luckyBox);
    }
    if (message.guild !== 0) {
      obj.guild = Math.round(message.guild);
    }
    if (message.addableAchievements !== false) {
      obj.addableAchievements = message.addableAchievements;
    }
    if (message.addableBoost !== false) {
      obj.addableBoost = message.addableBoost;
    }
    if (message.addableClass !== false) {
      obj.addableClass = message.addableClass;
    }
    if (message.addableLuckyBox !== false) {
      obj.addableLuckyBox = message.addableLuckyBox;
    }
    if (message.addableGuild !== false) {
      obj.addableGuild = message.addableGuild;
    }
    if (message.weeklyLuckyBox !== 0) {
      obj.weeklyLuckyBox = Math.round(message.weeklyLuckyBox);
    }
    if (message.achievementsRewards?.length) {
      obj.achievementsRewards = message.achievementsRewards;
    }
    if (message.boostRewards?.length) {
      obj.boostRewards = message.boostRewards;
    }
    if (message.classRewards?.length) {
      obj.classRewards = message.classRewards;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Point>, I>>(base?: I): Point {
    return Point.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Point>, I>>(object: I): Point {
    const message = createBasePoint();
    message.accountId = object.accountId ?? '';
    message.total = object.total ?? '';
    message.achievements = object.achievements ?? '';
    message.boost = object.boost ?? 0;
    message.class = object.class ?? 0;
    message.luckyBox = object.luckyBox ?? 0;
    message.guild = object.guild ?? 0;
    message.addableAchievements = object.addableAchievements ?? false;
    message.addableBoost = object.addableBoost ?? false;
    message.addableClass = object.addableClass ?? false;
    message.addableLuckyBox = object.addableLuckyBox ?? false;
    message.addableGuild = object.addableGuild ?? false;
    message.weeklyLuckyBox = object.weeklyLuckyBox ?? 0;
    message.achievementsRewards = object.achievementsRewards?.map(e => e) || [];
    message.boostRewards = object.boostRewards?.map(e => e) || [];
    message.classRewards = object.classRewards?.map(e => e) || [];
    return message;
  },
};

function createBasePointRequest(): PointRequest {
  return { accountId: '', amount: '' };
}

export const PointRequest = {
  encode(
    message: PointRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.amount !== '') {
      writer.uint32(18).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PointRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePointRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.amount = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PointRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      amount: isSet(object.amount) ? globalThis.String(object.amount) : '',
    };
  },

  toJSON(message: PointRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.amount !== '') {
      obj.amount = message.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PointRequest>, I>>(
    base?: I,
  ): PointRequest {
    return PointRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PointRequest>, I>>(
    object: I,
  ): PointRequest {
    const message = createBasePointRequest();
    message.accountId = object.accountId ?? '';
    message.amount = object.amount ?? '';
    return message;
  },
};

function createBaseGetPointByAccountIdsRequest(): GetPointByAccountIdsRequest {
  return { accountIds: [] };
}

export const GetPointByAccountIdsRequest = {
  encode(
    message: GetPointByAccountIdsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.accountIds) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetPointByAccountIdsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPointByAccountIdsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPointByAccountIdsRequest {
    return {
      accountIds: globalThis.Array.isArray(object?.accountIds)
        ? object.accountIds.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GetPointByAccountIdsRequest): unknown {
    const obj: any = {};
    if (message.accountIds?.length) {
      obj.accountIds = message.accountIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPointByAccountIdsRequest>, I>>(
    base?: I,
  ): GetPointByAccountIdsRequest {
    return GetPointByAccountIdsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPointByAccountIdsRequest>, I>>(
    object: I,
  ): GetPointByAccountIdsRequest {
    const message = createBaseGetPointByAccountIdsRequest();
    message.accountIds = object.accountIds?.map(e => e) || [];
    return message;
  },
};

function createBaseResetByTypeRequest(): ResetByTypeRequest {
  return { accountId: '', type: 0 };
}

export const ResetByTypeRequest = {
  encode(
    message: ResetByTypeRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ResetByTypeRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetByTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResetByTypeRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      type: isSet(object.type) ? pointTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: ResetByTypeRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.type !== 0) {
      obj.type = pointTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResetByTypeRequest>, I>>(
    base?: I,
  ): ResetByTypeRequest {
    return ResetByTypeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResetByTypeRequest>, I>>(
    object: I,
  ): ResetByTypeRequest {
    const message = createBaseResetByTypeRequest();
    message.accountId = object.accountId ?? '';
    message.type = object.type ?? 0;
    return message;
  },
};

function createBasePointResponse(): PointResponse {
  return { success: false, errorMessage: '', point: undefined };
}

export const PointResponse = {
  encode(
    message: PointResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.point !== undefined) {
      Point.encode(message.point, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PointResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePointResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.point = Point.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PointResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      point: isSet(object.point) ? Point.fromJSON(object.point) : undefined,
    };
  },

  toJSON(message: PointResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.point !== undefined) {
      obj.point = Point.toJSON(message.point);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PointResponse>, I>>(
    base?: I,
  ): PointResponse {
    return PointResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PointResponse>, I>>(
    object: I,
  ): PointResponse {
    const message = createBasePointResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.point =
      object.point !== undefined && object.point !== null
        ? Point.fromPartial(object.point)
        : undefined;
    return message;
  },
};

function createBasePointsResponse(): PointsResponse {
  return { success: false, errorMessage: '', point: [] };
}

export const PointsResponse = {
  encode(
    message: PointsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.point) {
      Point.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PointsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePointsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.point.push(Point.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PointsResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      point: globalThis.Array.isArray(object?.point)
        ? object.point.map((e: any) => Point.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PointsResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.point?.length) {
      obj.point = message.point.map(e => Point.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PointsResponse>, I>>(
    base?: I,
  ): PointsResponse {
    return PointsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PointsResponse>, I>>(
    object: I,
  ): PointsResponse {
    const message = createBasePointsResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.point = object.point?.map(e => Point.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRewardOnPointRequest(): RewardOnPointRequest {
  return { accountId: '', rewardType: 0 };
}

export const RewardOnPointRequest = {
  encode(
    message: RewardOnPointRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.rewardType !== 0) {
      writer.uint32(16).int32(message.rewardType);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): RewardOnPointRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRewardOnPointRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.rewardType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RewardOnPointRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      rewardType: isSet(object.rewardType)
        ? rewardTypeFromJSON(object.rewardType)
        : 0,
    };
  },

  toJSON(message: RewardOnPointRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.rewardType !== 0) {
      obj.rewardType = rewardTypeToJSON(message.rewardType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RewardOnPointRequest>, I>>(
    base?: I,
  ): RewardOnPointRequest {
    return RewardOnPointRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RewardOnPointRequest>, I>>(
    object: I,
  ): RewardOnPointRequest {
    const message = createBaseRewardOnPointRequest();
    message.accountId = object.accountId ?? '';
    message.rewardType = object.rewardType ?? 0;
    return message;
  },
};

export type PointServiceService = typeof PointServiceService;
export const PointServiceService = {
  addPoint: {
    path: '/item.PointService/AddPoint',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PointRequest) =>
      Buffer.from(PointRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => PointRequest.decode(value),
    responseSerialize: (value: PointResponse) =>
      Buffer.from(PointResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PointResponse.decode(value),
  },
  getPoint: {
    path: '/item.PointService/GetPoint',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PointRequest) =>
      Buffer.from(PointRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => PointRequest.decode(value),
    responseSerialize: (value: PointResponse) =>
      Buffer.from(PointResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PointResponse.decode(value),
  },
  getPointByAccountIds: {
    path: '/item.PointService/GetPointByAccountIds',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetPointByAccountIdsRequest) =>
      Buffer.from(GetPointByAccountIdsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      GetPointByAccountIdsRequest.decode(value),
    responseSerialize: (value: PointsResponse) =>
      Buffer.from(PointsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PointsResponse.decode(value),
  },
  rewardOnPoint: {
    path: '/item.PointService/RewardOnPoint',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RewardOnPointRequest) =>
      Buffer.from(RewardOnPointRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RewardOnPointRequest.decode(value),
    responseSerialize: (value: PointResponse) =>
      Buffer.from(PointResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PointResponse.decode(value),
  },
  useLuckyBoxPoint: {
    path: '/item.PointService/UseLuckyBoxPoint',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PointRequest) =>
      Buffer.from(PointRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => PointRequest.decode(value),
    responseSerialize: (value: PointResponse) =>
      Buffer.from(PointResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PointResponse.decode(value),
  },
  resetByType: {
    path: '/item.PointService/ResetByType',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ResetByTypeRequest) =>
      Buffer.from(ResetByTypeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ResetByTypeRequest.decode(value),
    responseSerialize: (value: PointResponse) =>
      Buffer.from(PointResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PointResponse.decode(value),
  },
} as const;

export interface PointServiceServer extends UntypedServiceImplementation {
  addPoint: handleUnaryCall<PointRequest, PointResponse>;
  getPoint: handleUnaryCall<PointRequest, PointResponse>;
  getPointByAccountIds: handleUnaryCall<
    GetPointByAccountIdsRequest,
    PointsResponse
  >;
  rewardOnPoint: handleUnaryCall<RewardOnPointRequest, PointResponse>;
  useLuckyBoxPoint: handleUnaryCall<PointRequest, PointResponse>;
  resetByType: handleUnaryCall<ResetByTypeRequest, PointResponse>;
}

export interface PointServiceClient extends Client {
  addPoint(
    request: PointRequest,
    callback: (error: ServiceError | null, response: PointResponse) => void,
  ): ClientUnaryCall;
  addPoint(
    request: PointRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PointResponse) => void,
  ): ClientUnaryCall;
  addPoint(
    request: PointRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PointResponse) => void,
  ): ClientUnaryCall;
  getPoint(
    request: PointRequest,
    callback: (error: ServiceError | null, response: PointResponse) => void,
  ): ClientUnaryCall;
  getPoint(
    request: PointRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PointResponse) => void,
  ): ClientUnaryCall;
  getPoint(
    request: PointRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PointResponse) => void,
  ): ClientUnaryCall;
  getPointByAccountIds(
    request: GetPointByAccountIdsRequest,
    callback: (error: ServiceError | null, response: PointsResponse) => void,
  ): ClientUnaryCall;
  getPointByAccountIds(
    request: GetPointByAccountIdsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PointsResponse) => void,
  ): ClientUnaryCall;
  getPointByAccountIds(
    request: GetPointByAccountIdsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PointsResponse) => void,
  ): ClientUnaryCall;
  rewardOnPoint(
    request: RewardOnPointRequest,
    callback: (error: ServiceError | null, response: PointResponse) => void,
  ): ClientUnaryCall;
  rewardOnPoint(
    request: RewardOnPointRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PointResponse) => void,
  ): ClientUnaryCall;
  rewardOnPoint(
    request: RewardOnPointRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PointResponse) => void,
  ): ClientUnaryCall;
  useLuckyBoxPoint(
    request: PointRequest,
    callback: (error: ServiceError | null, response: PointResponse) => void,
  ): ClientUnaryCall;
  useLuckyBoxPoint(
    request: PointRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PointResponse) => void,
  ): ClientUnaryCall;
  useLuckyBoxPoint(
    request: PointRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PointResponse) => void,
  ): ClientUnaryCall;
  resetByType(
    request: ResetByTypeRequest,
    callback: (error: ServiceError | null, response: PointResponse) => void,
  ): ClientUnaryCall;
  resetByType(
    request: ResetByTypeRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PointResponse) => void,
  ): ClientUnaryCall;
  resetByType(
    request: ResetByTypeRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PointResponse) => void,
  ): ClientUnaryCall;
}

export const PointServiceClient = makeGenericClientConstructor(
  PointServiceService,
  'item.PointService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): PointServiceClient;
  service: typeof PointServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
