// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: deck.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';

export const protobufPackage = 'prng';

export interface DeckRequest {
  deckId: string;
  cards: string[];
}

export interface DeckResponse {
  success: boolean;
  errorMessage: string;
  deckId: string;
  /** Cards in the deck */
  cards: string[];
  /** Discarded cards */
  discarded: string[];
}

export interface DrawCardRequest {
  deckId: string;
}

export interface DrawCardResponse {
  success: boolean;
  errorMessage: string;
  card: string;
  /** Remaining cards in the deck */
  remaining: number;
  /** Whether the deck was refilled */
  refill: boolean;
}

export interface DiscardRequest {
  deckId: string;
  cards: string[];
}

export interface DiscardResponse {
  success: boolean;
  errorMessage: string;
}

function createBaseDeckRequest(): DeckRequest {
  return { deckId: '', cards: [] };
}

export const DeckRequest = {
  encode(
    message: DeckRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.deckId !== '') {
      writer.uint32(10).string(message.deckId);
    }
    for (const v of message.cards) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeckRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeckRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deckId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cards.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeckRequest {
    return {
      deckId: isSet(object.deckId) ? globalThis.String(object.deckId) : '',
      cards: globalThis.Array.isArray(object?.cards)
        ? object.cards.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: DeckRequest): unknown {
    const obj: any = {};
    if (message.deckId !== '') {
      obj.deckId = message.deckId;
    }
    if (message.cards?.length) {
      obj.cards = message.cards;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeckRequest>, I>>(base?: I): DeckRequest {
    return DeckRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeckRequest>, I>>(
    object: I,
  ): DeckRequest {
    const message = createBaseDeckRequest();
    message.deckId = object.deckId ?? '';
    message.cards = object.cards?.map(e => e) || [];
    return message;
  },
};

function createBaseDeckResponse(): DeckResponse {
  return {
    success: false,
    errorMessage: '',
    deckId: '',
    cards: [],
    discarded: [],
  };
}

export const DeckResponse = {
  encode(
    message: DeckResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.deckId !== '') {
      writer.uint32(26).string(message.deckId);
    }
    for (const v of message.cards) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.discarded) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeckResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeckResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.deckId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.cards.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.discarded.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeckResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      deckId: isSet(object.deckId) ? globalThis.String(object.deckId) : '',
      cards: globalThis.Array.isArray(object?.cards)
        ? object.cards.map((e: any) => globalThis.String(e))
        : [],
      discarded: globalThis.Array.isArray(object?.discarded)
        ? object.discarded.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: DeckResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.deckId !== '') {
      obj.deckId = message.deckId;
    }
    if (message.cards?.length) {
      obj.cards = message.cards;
    }
    if (message.discarded?.length) {
      obj.discarded = message.discarded;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeckResponse>, I>>(
    base?: I,
  ): DeckResponse {
    return DeckResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeckResponse>, I>>(
    object: I,
  ): DeckResponse {
    const message = createBaseDeckResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.deckId = object.deckId ?? '';
    message.cards = object.cards?.map(e => e) || [];
    message.discarded = object.discarded?.map(e => e) || [];
    return message;
  },
};

function createBaseDrawCardRequest(): DrawCardRequest {
  return { deckId: '' };
}

export const DrawCardRequest = {
  encode(
    message: DrawCardRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.deckId !== '') {
      writer.uint32(10).string(message.deckId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DrawCardRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDrawCardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deckId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DrawCardRequest {
    return {
      deckId: isSet(object.deckId) ? globalThis.String(object.deckId) : '',
    };
  },

  toJSON(message: DrawCardRequest): unknown {
    const obj: any = {};
    if (message.deckId !== '') {
      obj.deckId = message.deckId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DrawCardRequest>, I>>(
    base?: I,
  ): DrawCardRequest {
    return DrawCardRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DrawCardRequest>, I>>(
    object: I,
  ): DrawCardRequest {
    const message = createBaseDrawCardRequest();
    message.deckId = object.deckId ?? '';
    return message;
  },
};

function createBaseDrawCardResponse(): DrawCardResponse {
  return {
    success: false,
    errorMessage: '',
    card: '',
    remaining: 0,
    refill: false,
  };
}

export const DrawCardResponse = {
  encode(
    message: DrawCardResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.card !== '') {
      writer.uint32(26).string(message.card);
    }
    if (message.remaining !== 0) {
      writer.uint32(32).int32(message.remaining);
    }
    if (message.refill !== false) {
      writer.uint32(40).bool(message.refill);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DrawCardResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDrawCardResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.card = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.remaining = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.refill = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DrawCardResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      card: isSet(object.card) ? globalThis.String(object.card) : '',
      remaining: isSet(object.remaining)
        ? globalThis.Number(object.remaining)
        : 0,
      refill: isSet(object.refill) ? globalThis.Boolean(object.refill) : false,
    };
  },

  toJSON(message: DrawCardResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.card !== '') {
      obj.card = message.card;
    }
    if (message.remaining !== 0) {
      obj.remaining = Math.round(message.remaining);
    }
    if (message.refill !== false) {
      obj.refill = message.refill;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DrawCardResponse>, I>>(
    base?: I,
  ): DrawCardResponse {
    return DrawCardResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DrawCardResponse>, I>>(
    object: I,
  ): DrawCardResponse {
    const message = createBaseDrawCardResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.card = object.card ?? '';
    message.remaining = object.remaining ?? 0;
    message.refill = object.refill ?? false;
    return message;
  },
};

function createBaseDiscardRequest(): DiscardRequest {
  return { deckId: '', cards: [] };
}

export const DiscardRequest = {
  encode(
    message: DiscardRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.deckId !== '') {
      writer.uint32(10).string(message.deckId);
    }
    for (const v of message.cards) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiscardRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiscardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.deckId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cards.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiscardRequest {
    return {
      deckId: isSet(object.deckId) ? globalThis.String(object.deckId) : '',
      cards: globalThis.Array.isArray(object?.cards)
        ? object.cards.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: DiscardRequest): unknown {
    const obj: any = {};
    if (message.deckId !== '') {
      obj.deckId = message.deckId;
    }
    if (message.cards?.length) {
      obj.cards = message.cards;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DiscardRequest>, I>>(
    base?: I,
  ): DiscardRequest {
    return DiscardRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DiscardRequest>, I>>(
    object: I,
  ): DiscardRequest {
    const message = createBaseDiscardRequest();
    message.deckId = object.deckId ?? '';
    message.cards = object.cards?.map(e => e) || [];
    return message;
  },
};

function createBaseDiscardResponse(): DiscardResponse {
  return { success: false, errorMessage: '' };
}

export const DiscardResponse = {
  encode(
    message: DiscardResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiscardResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiscardResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiscardResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
    };
  },

  toJSON(message: DiscardResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DiscardResponse>, I>>(
    base?: I,
  ): DiscardResponse {
    return DiscardResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DiscardResponse>, I>>(
    object: I,
  ): DiscardResponse {
    const message = createBaseDiscardResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    return message;
  },
};

export type DeckServiceService = typeof DeckServiceService;
export const DeckServiceService = {
  createDeck: {
    path: '/prng.DeckService/CreateDeck',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeckRequest) =>
      Buffer.from(DeckRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeckRequest.decode(value),
    responseSerialize: (value: DeckResponse) =>
      Buffer.from(DeckResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeckResponse.decode(value),
  },
  createCustomDeck: {
    path: '/prng.DeckService/CreateCustomDeck',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeckRequest) =>
      Buffer.from(DeckRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeckRequest.decode(value),
    responseSerialize: (value: DeckResponse) =>
      Buffer.from(DeckResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeckResponse.decode(value),
  },
  getDeck: {
    path: '/prng.DeckService/GetDeck',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeckRequest) =>
      Buffer.from(DeckRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeckRequest.decode(value),
    responseSerialize: (value: DeckResponse) =>
      Buffer.from(DeckResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeckResponse.decode(value),
  },
  drawCard: {
    path: '/prng.DeckService/DrawCard',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DrawCardRequest) =>
      Buffer.from(DrawCardRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DrawCardRequest.decode(value),
    responseSerialize: (value: DrawCardResponse) =>
      Buffer.from(DrawCardResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DrawCardResponse.decode(value),
  },
  discard: {
    path: '/prng.DeckService/Discard',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DiscardRequest) =>
      Buffer.from(DiscardRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DiscardRequest.decode(value),
    responseSerialize: (value: DiscardResponse) =>
      Buffer.from(DiscardResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DiscardResponse.decode(value),
  },
} as const;

export interface DeckServiceServer extends UntypedServiceImplementation {
  createDeck: handleUnaryCall<DeckRequest, DeckResponse>;
  createCustomDeck: handleUnaryCall<DeckRequest, DeckResponse>;
  getDeck: handleUnaryCall<DeckRequest, DeckResponse>;
  drawCard: handleUnaryCall<DrawCardRequest, DrawCardResponse>;
  discard: handleUnaryCall<DiscardRequest, DiscardResponse>;
}

export interface DeckServiceClient extends Client {
  createDeck(
    request: DeckRequest,
    callback: (error: ServiceError | null, response: DeckResponse) => void,
  ): ClientUnaryCall;
  createDeck(
    request: DeckRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeckResponse) => void,
  ): ClientUnaryCall;
  createDeck(
    request: DeckRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeckResponse) => void,
  ): ClientUnaryCall;
  createCustomDeck(
    request: DeckRequest,
    callback: (error: ServiceError | null, response: DeckResponse) => void,
  ): ClientUnaryCall;
  createCustomDeck(
    request: DeckRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeckResponse) => void,
  ): ClientUnaryCall;
  createCustomDeck(
    request: DeckRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeckResponse) => void,
  ): ClientUnaryCall;
  getDeck(
    request: DeckRequest,
    callback: (error: ServiceError | null, response: DeckResponse) => void,
  ): ClientUnaryCall;
  getDeck(
    request: DeckRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeckResponse) => void,
  ): ClientUnaryCall;
  getDeck(
    request: DeckRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeckResponse) => void,
  ): ClientUnaryCall;
  drawCard(
    request: DrawCardRequest,
    callback: (error: ServiceError | null, response: DrawCardResponse) => void,
  ): ClientUnaryCall;
  drawCard(
    request: DrawCardRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DrawCardResponse) => void,
  ): ClientUnaryCall;
  drawCard(
    request: DrawCardRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DrawCardResponse) => void,
  ): ClientUnaryCall;
  discard(
    request: DiscardRequest,
    callback: (error: ServiceError | null, response: DiscardResponse) => void,
  ): ClientUnaryCall;
  discard(
    request: DiscardRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DiscardResponse) => void,
  ): ClientUnaryCall;
  discard(
    request: DiscardRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DiscardResponse) => void,
  ): ClientUnaryCall;
}

export const DeckServiceClient = makeGenericClientConstructor(
  DeckServiceService,
  'prng.DeckService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): DeckServiceClient;
  service: typeof DeckServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
