// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: shuffle.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  ClientReadableStream,
  type ClientUnaryCall,
  handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';

export const protobufPackage = 'api.shuffle';

export interface ShuffleRequest {
  /** Optional: if provided, the shuffled result is stored in DynamoDB with this id. */
  id: string;
  /** List of cards to shuffle. */
  cards: string[];
}

export interface ShuffleResponse {
  /** Returns the id that was used (or empty string if none provided). */
  id: string;
  /** Shuffled card list. */
  shuffledCards: string[];
}

export interface LargeRandomRequest {
  count: number;
  chunkSize: number;
}

export interface RandomNumberChunk {
  numbers: number[];
}

function createBaseShuffleRequest(): ShuffleRequest {
  return { id: '', cards: [] };
}

export const ShuffleRequest = {
  encode(
    message: ShuffleRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.cards) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShuffleRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShuffleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cards.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShuffleRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      cards: globalThis.Array.isArray(object?.cards)
        ? object.cards.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ShuffleRequest): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.cards?.length) {
      obj.cards = message.cards;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShuffleRequest>, I>>(
    base?: I,
  ): ShuffleRequest {
    return ShuffleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShuffleRequest>, I>>(
    object: I,
  ): ShuffleRequest {
    const message = createBaseShuffleRequest();
    message.id = object.id ?? '';
    message.cards = object.cards?.map(e => e) || [];
    return message;
  },
};

function createBaseShuffleResponse(): ShuffleResponse {
  return { id: '', shuffledCards: [] };
}

export const ShuffleResponse = {
  encode(
    message: ShuffleResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== '') {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.shuffledCards) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShuffleResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShuffleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.shuffledCards.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShuffleResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : '',
      shuffledCards: globalThis.Array.isArray(object?.shuffledCards)
        ? object.shuffledCards.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ShuffleResponse): unknown {
    const obj: any = {};
    if (message.id !== '') {
      obj.id = message.id;
    }
    if (message.shuffledCards?.length) {
      obj.shuffledCards = message.shuffledCards;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShuffleResponse>, I>>(
    base?: I,
  ): ShuffleResponse {
    return ShuffleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShuffleResponse>, I>>(
    object: I,
  ): ShuffleResponse {
    const message = createBaseShuffleResponse();
    message.id = object.id ?? '';
    message.shuffledCards = object.shuffledCards?.map(e => e) || [];
    return message;
  },
};

function createBaseLargeRandomRequest(): LargeRandomRequest {
  return { count: 0, chunkSize: 0 };
}

export const LargeRandomRequest = {
  encode(
    message: LargeRandomRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.count !== 0) {
      writer.uint32(8).uint64(message.count);
    }
    if (message.chunkSize !== 0) {
      writer.uint32(16).uint64(message.chunkSize);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): LargeRandomRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLargeRandomRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.count = longToNumber(reader.uint64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.chunkSize = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LargeRandomRequest {
    return {
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      chunkSize: isSet(object.chunkSize)
        ? globalThis.Number(object.chunkSize)
        : 0,
    };
  },

  toJSON(message: LargeRandomRequest): unknown {
    const obj: any = {};
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.chunkSize !== 0) {
      obj.chunkSize = Math.round(message.chunkSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LargeRandomRequest>, I>>(
    base?: I,
  ): LargeRandomRequest {
    return LargeRandomRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LargeRandomRequest>, I>>(
    object: I,
  ): LargeRandomRequest {
    const message = createBaseLargeRandomRequest();
    message.count = object.count ?? 0;
    message.chunkSize = object.chunkSize ?? 0;
    return message;
  },
};

function createBaseRandomNumberChunk(): RandomNumberChunk {
  return { numbers: [] };
}

export const RandomNumberChunk = {
  encode(
    message: RandomNumberChunk,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.numbers) {
      writer.uint32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RandomNumberChunk {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRandomNumberChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.numbers.push(reader.uint32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.numbers.push(reader.uint32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RandomNumberChunk {
    return {
      numbers: globalThis.Array.isArray(object?.numbers)
        ? object.numbers.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: RandomNumberChunk): unknown {
    const obj: any = {};
    if (message.numbers?.length) {
      obj.numbers = message.numbers.map(e => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RandomNumberChunk>, I>>(
    base?: I,
  ): RandomNumberChunk {
    return RandomNumberChunk.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RandomNumberChunk>, I>>(
    object: I,
  ): RandomNumberChunk {
    const message = createBaseRandomNumberChunk();
    message.numbers = object.numbers?.map(e => e) || [];
    return message;
  },
};

export type ShuffleServiceService = typeof ShuffleServiceService;
export const ShuffleServiceService = {
  /** ShuffleCards: if an 'id' is provided, store the shuffled result to DynamoDB. */
  shuffleCards: {
    path: '/api.shuffle.ShuffleService/ShuffleCards',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ShuffleRequest) =>
      Buffer.from(ShuffleRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ShuffleRequest.decode(value),
    responseSerialize: (value: ShuffleResponse) =>
      Buffer.from(ShuffleResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ShuffleResponse.decode(value),
  },
  /** GenerateLargeRandomStream: server streaming of large amounts of 32-bit random numbers. */
  generateLargeRandomStream: {
    path: '/api.shuffle.ShuffleService/GenerateLargeRandomStream',
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: LargeRandomRequest) =>
      Buffer.from(LargeRandomRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => LargeRandomRequest.decode(value),
    responseSerialize: (value: RandomNumberChunk) =>
      Buffer.from(RandomNumberChunk.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RandomNumberChunk.decode(value),
  },
} as const;

export interface ShuffleServiceServer extends UntypedServiceImplementation {
  /** ShuffleCards: if an 'id' is provided, store the shuffled result to DynamoDB. */
  shuffleCards: handleUnaryCall<ShuffleRequest, ShuffleResponse>;
  /** GenerateLargeRandomStream: server streaming of large amounts of 32-bit random numbers. */
  generateLargeRandomStream: handleServerStreamingCall<
    LargeRandomRequest,
    RandomNumberChunk
  >;
}

export interface ShuffleServiceClient extends Client {
  /** ShuffleCards: if an 'id' is provided, store the shuffled result to DynamoDB. */
  shuffleCards(
    request: ShuffleRequest,
    callback: (error: ServiceError | null, response: ShuffleResponse) => void,
  ): ClientUnaryCall;
  shuffleCards(
    request: ShuffleRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ShuffleResponse) => void,
  ): ClientUnaryCall;
  shuffleCards(
    request: ShuffleRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ShuffleResponse) => void,
  ): ClientUnaryCall;
  /** GenerateLargeRandomStream: server streaming of large amounts of 32-bit random numbers. */
  generateLargeRandomStream(
    request: LargeRandomRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<RandomNumberChunk>;
  generateLargeRandomStream(
    request: LargeRandomRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<RandomNumberChunk>;
}

export const ShuffleServiceClient = makeGenericClientConstructor(
  ShuffleServiceService,
  'api.shuffle.ShuffleService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): ShuffleServiceClient;
  service: typeof ShuffleServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error('Value is larger than Number.MAX_SAFE_INTEGER');
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error('Value is smaller than Number.MIN_SAFE_INTEGER');
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
