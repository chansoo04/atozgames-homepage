// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: account.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';
import {
  Account,
  AccountLogs,
  AccountType,
  accountTypeFromJSON,
  accountTypeToJSON,
  DefaultResponse,
} from './user-common';

export const protobufPackage = 'user';

export enum WordSearchMode {
  WORD_SEARCH_MODE_NONE = 0,
  WORD_SEARCH_MODE_QUERY = 1,
  WORD_SEARCH_MODE_AHO_CORASICK = 2,
  WORD_SEARCH_MODE_AHO_CORASICK_WITH_ALLOW = 3,
  WORD_SEARCH_MODE_AHO_CORASICK_STRICT = 4,
  UNRECOGNIZED = -1,
}

export function wordSearchModeFromJSON(object: any): WordSearchMode {
  switch (object) {
    case 0:
    case 'WORD_SEARCH_MODE_NONE':
      return WordSearchMode.WORD_SEARCH_MODE_NONE;
    case 1:
    case 'WORD_SEARCH_MODE_QUERY':
      return WordSearchMode.WORD_SEARCH_MODE_QUERY;
    case 2:
    case 'WORD_SEARCH_MODE_AHO_CORASICK':
      return WordSearchMode.WORD_SEARCH_MODE_AHO_CORASICK;
    case 3:
    case 'WORD_SEARCH_MODE_AHO_CORASICK_WITH_ALLOW':
      return WordSearchMode.WORD_SEARCH_MODE_AHO_CORASICK_WITH_ALLOW;
    case 4:
    case 'WORD_SEARCH_MODE_AHO_CORASICK_STRICT':
      return WordSearchMode.WORD_SEARCH_MODE_AHO_CORASICK_STRICT;
    case -1:
    case 'UNRECOGNIZED':
    default:
      return WordSearchMode.UNRECOGNIZED;
  }
}

export function wordSearchModeToJSON(object: WordSearchMode): string {
  switch (object) {
    case WordSearchMode.WORD_SEARCH_MODE_NONE:
      return 'WORD_SEARCH_MODE_NONE';
    case WordSearchMode.WORD_SEARCH_MODE_QUERY:
      return 'WORD_SEARCH_MODE_QUERY';
    case WordSearchMode.WORD_SEARCH_MODE_AHO_CORASICK:
      return 'WORD_SEARCH_MODE_AHO_CORASICK';
    case WordSearchMode.WORD_SEARCH_MODE_AHO_CORASICK_WITH_ALLOW:
      return 'WORD_SEARCH_MODE_AHO_CORASICK_WITH_ALLOW';
    case WordSearchMode.WORD_SEARCH_MODE_AHO_CORASICK_STRICT:
      return 'WORD_SEARCH_MODE_AHO_CORASICK_STRICT';
    case WordSearchMode.UNRECOGNIZED:
    default:
      return 'UNRECOGNIZED';
  }
}

export interface ReportAccountRequest {
  reporterAccountId: string;
  reportedAccountId: string;
  reportedReason: string;
}

export interface AccountIdParam {
  accountId: string;
}

export interface IsExistEmailRequest {
  email: string;
}

export interface IsExistAccountRequest {
  firebaseUid: string;
}

export interface IsExistAccountResponse {
  success: boolean;
  errorMessage: string;
  isExist: boolean;
  userId: string;
  accountId: string;
  isActive: boolean;
  isPublic: boolean;
  isDormant: boolean;
  isDisable: boolean;
  isWithdrawal: boolean;
  isPause: boolean;
}

export interface SignUpRequest {
  userId: string;
  firebaseUid: string;
  accountType: AccountType;
  /** 계정명 */
  accountName: string;
}

export interface SignInRequest {
  firebaseUid: string;
}

export interface SignResponse {
  success: boolean;
  errorMessage: string;
  accountId: string;
}

export interface WebSignResponse {
  success: boolean;
  errorMessage: string;
  name: string;
  telCode: string;
  tel: string;
  /** Firebase Auth UID */
  uid: string;
  accountId: string;
  accountType: string;
  /** 계정명 */
  accountName: string;
  /** 닉네임 */
  nickname: string;
}

export interface SignOutRequest {
  firebaseUid: string;
}

export interface GetAccountResponse {
  success: boolean;
  errorMessage: string;
  account?: Account | undefined;
}

export interface GetAccountByUserIdRequest {
  userId: string;
}

export interface GetAccountByUserIdResponse {
  success: boolean;
  errorMessage: string;
  account: Account[];
}

export interface UpdateAccountRequest {
  accountId: string;
  /** 계정명 */
  accountName: string;
  /** 닉네임 */
  nickname: string;
  pushToken: string;
}

export interface WordRequest {
  word: string;
  searchMode: WordSearchMode;
}

export interface WordBanCheckResult {
  start: number;
  end: number;
  word: string;
  length: number;
}

export interface WordResponse {
  success: boolean;
  errorMessage: string;
  banList: WordBanCheckResult[];
}

export interface NickNameRequest {
  accountId: string;
  /** 변경할 닉네임 */
  nickname: string;
  /** 아이템 ID (닉네임 변경 아이템) */
  itemId: string;
}

export interface GetNickByFirebaseUidRequest {
  /** Firebase UID 목록 */
  firebaseUid: string[];
}

export interface GetNickByFirebaseUidResponse {
  success: boolean;
  errorMessage: string;
  account: Account[];
}

export interface AccountStateRequest {
  accountId: string;
  datetime: string;
  /** true: 탈퇴, 휴면 | false: 탈퇴 취소, 휴면 해제 */
  state: boolean;
  reasonType: number;
  reasonText: string;
}

export interface GetAccountLogsResponse {
  success: boolean;
  errorMessage: string;
  accountLogs: AccountLogs[];
}

export interface AdminGetAllAccountRequest {
  page: number;
  countPerPage: number;
}

export interface AdminGetAllAccountResponse {
  success: boolean;
  errorMessage: string;
  account: Account[];
}

function createBaseReportAccountRequest(): ReportAccountRequest {
  return { reporterAccountId: '', reportedAccountId: '', reportedReason: '' };
}

export const ReportAccountRequest = {
  encode(
    message: ReportAccountRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.reporterAccountId !== '') {
      writer.uint32(10).string(message.reporterAccountId);
    }
    if (message.reportedAccountId !== '') {
      writer.uint32(18).string(message.reportedAccountId);
    }
    if (message.reportedReason !== '') {
      writer.uint32(26).string(message.reportedReason);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ReportAccountRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reporterAccountId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.reportedAccountId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.reportedReason = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportAccountRequest {
    return {
      reporterAccountId: isSet(object.reporterAccountId)
        ? globalThis.String(object.reporterAccountId)
        : '',
      reportedAccountId: isSet(object.reportedAccountId)
        ? globalThis.String(object.reportedAccountId)
        : '',
      reportedReason: isSet(object.reportedReason)
        ? globalThis.String(object.reportedReason)
        : '',
    };
  },

  toJSON(message: ReportAccountRequest): unknown {
    const obj: any = {};
    if (message.reporterAccountId !== '') {
      obj.reporterAccountId = message.reporterAccountId;
    }
    if (message.reportedAccountId !== '') {
      obj.reportedAccountId = message.reportedAccountId;
    }
    if (message.reportedReason !== '') {
      obj.reportedReason = message.reportedReason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReportAccountRequest>, I>>(
    base?: I,
  ): ReportAccountRequest {
    return ReportAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReportAccountRequest>, I>>(
    object: I,
  ): ReportAccountRequest {
    const message = createBaseReportAccountRequest();
    message.reporterAccountId = object.reporterAccountId ?? '';
    message.reportedAccountId = object.reportedAccountId ?? '';
    message.reportedReason = object.reportedReason ?? '';
    return message;
  },
};

function createBaseAccountIdParam(): AccountIdParam {
  return { accountId: '' };
}

export const AccountIdParam = {
  encode(
    message: AccountIdParam,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccountIdParam {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountIdParam();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccountIdParam {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
    };
  },

  toJSON(message: AccountIdParam): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccountIdParam>, I>>(
    base?: I,
  ): AccountIdParam {
    return AccountIdParam.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccountIdParam>, I>>(
    object: I,
  ): AccountIdParam {
    const message = createBaseAccountIdParam();
    message.accountId = object.accountId ?? '';
    return message;
  },
};

function createBaseIsExistEmailRequest(): IsExistEmailRequest {
  return { email: '' };
}

export const IsExistEmailRequest = {
  encode(
    message: IsExistEmailRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.email !== '') {
      writer.uint32(10).string(message.email);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): IsExistEmailRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsExistEmailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IsExistEmailRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : '',
    };
  },

  toJSON(message: IsExistEmailRequest): unknown {
    const obj: any = {};
    if (message.email !== '') {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IsExistEmailRequest>, I>>(
    base?: I,
  ): IsExistEmailRequest {
    return IsExistEmailRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IsExistEmailRequest>, I>>(
    object: I,
  ): IsExistEmailRequest {
    const message = createBaseIsExistEmailRequest();
    message.email = object.email ?? '';
    return message;
  },
};

function createBaseIsExistAccountRequest(): IsExistAccountRequest {
  return { firebaseUid: '' };
}

export const IsExistAccountRequest = {
  encode(
    message: IsExistAccountRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.firebaseUid !== '') {
      writer.uint32(10).string(message.firebaseUid);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): IsExistAccountRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsExistAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.firebaseUid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IsExistAccountRequest {
    return {
      firebaseUid: isSet(object.firebaseUid)
        ? globalThis.String(object.firebaseUid)
        : '',
    };
  },

  toJSON(message: IsExistAccountRequest): unknown {
    const obj: any = {};
    if (message.firebaseUid !== '') {
      obj.firebaseUid = message.firebaseUid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IsExistAccountRequest>, I>>(
    base?: I,
  ): IsExistAccountRequest {
    return IsExistAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IsExistAccountRequest>, I>>(
    object: I,
  ): IsExistAccountRequest {
    const message = createBaseIsExistAccountRequest();
    message.firebaseUid = object.firebaseUid ?? '';
    return message;
  },
};

function createBaseIsExistAccountResponse(): IsExistAccountResponse {
  return {
    success: false,
    errorMessage: '',
    isExist: false,
    userId: '',
    accountId: '',
    isActive: false,
    isPublic: false,
    isDormant: false,
    isDisable: false,
    isWithdrawal: false,
    isPause: false,
  };
}

export const IsExistAccountResponse = {
  encode(
    message: IsExistAccountResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.isExist !== false) {
      writer.uint32(24).bool(message.isExist);
    }
    if (message.userId !== '') {
      writer.uint32(34).string(message.userId);
    }
    if (message.accountId !== '') {
      writer.uint32(42).string(message.accountId);
    }
    if (message.isActive !== false) {
      writer.uint32(48).bool(message.isActive);
    }
    if (message.isPublic !== false) {
      writer.uint32(56).bool(message.isPublic);
    }
    if (message.isDormant !== false) {
      writer.uint32(64).bool(message.isDormant);
    }
    if (message.isDisable !== false) {
      writer.uint32(72).bool(message.isDisable);
    }
    if (message.isWithdrawal !== false) {
      writer.uint32(80).bool(message.isWithdrawal);
    }
    if (message.isPause !== false) {
      writer.uint32(88).bool(message.isPause);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): IsExistAccountResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsExistAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isExist = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.isPublic = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.isDormant = reader.bool();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.isDisable = reader.bool();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.isWithdrawal = reader.bool();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.isPause = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IsExistAccountResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      isExist: isSet(object.isExist)
        ? globalThis.Boolean(object.isExist)
        : false,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : '',
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      isActive: isSet(object.isActive)
        ? globalThis.Boolean(object.isActive)
        : false,
      isPublic: isSet(object.isPublic)
        ? globalThis.Boolean(object.isPublic)
        : false,
      isDormant: isSet(object.isDormant)
        ? globalThis.Boolean(object.isDormant)
        : false,
      isDisable: isSet(object.isDisable)
        ? globalThis.Boolean(object.isDisable)
        : false,
      isWithdrawal: isSet(object.isWithdrawal)
        ? globalThis.Boolean(object.isWithdrawal)
        : false,
      isPause: isSet(object.isPause)
        ? globalThis.Boolean(object.isPause)
        : false,
    };
  },

  toJSON(message: IsExistAccountResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.isExist !== false) {
      obj.isExist = message.isExist;
    }
    if (message.userId !== '') {
      obj.userId = message.userId;
    }
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.isPublic !== false) {
      obj.isPublic = message.isPublic;
    }
    if (message.isDormant !== false) {
      obj.isDormant = message.isDormant;
    }
    if (message.isDisable !== false) {
      obj.isDisable = message.isDisable;
    }
    if (message.isWithdrawal !== false) {
      obj.isWithdrawal = message.isWithdrawal;
    }
    if (message.isPause !== false) {
      obj.isPause = message.isPause;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IsExistAccountResponse>, I>>(
    base?: I,
  ): IsExistAccountResponse {
    return IsExistAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IsExistAccountResponse>, I>>(
    object: I,
  ): IsExistAccountResponse {
    const message = createBaseIsExistAccountResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.isExist = object.isExist ?? false;
    message.userId = object.userId ?? '';
    message.accountId = object.accountId ?? '';
    message.isActive = object.isActive ?? false;
    message.isPublic = object.isPublic ?? false;
    message.isDormant = object.isDormant ?? false;
    message.isDisable = object.isDisable ?? false;
    message.isWithdrawal = object.isWithdrawal ?? false;
    message.isPause = object.isPause ?? false;
    return message;
  },
};

function createBaseSignUpRequest(): SignUpRequest {
  return { userId: '', firebaseUid: '', accountType: 0, accountName: '' };
}

export const SignUpRequest = {
  encode(
    message: SignUpRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userId !== '') {
      writer.uint32(10).string(message.userId);
    }
    if (message.firebaseUid !== '') {
      writer.uint32(18).string(message.firebaseUid);
    }
    if (message.accountType !== 0) {
      writer.uint32(24).int32(message.accountType);
    }
    if (message.accountName !== '') {
      writer.uint32(34).string(message.accountName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignUpRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignUpRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.firebaseUid = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.accountType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.accountName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignUpRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : '',
      firebaseUid: isSet(object.firebaseUid)
        ? globalThis.String(object.firebaseUid)
        : '',
      accountType: isSet(object.accountType)
        ? accountTypeFromJSON(object.accountType)
        : 0,
      accountName: isSet(object.accountName)
        ? globalThis.String(object.accountName)
        : '',
    };
  },

  toJSON(message: SignUpRequest): unknown {
    const obj: any = {};
    if (message.userId !== '') {
      obj.userId = message.userId;
    }
    if (message.firebaseUid !== '') {
      obj.firebaseUid = message.firebaseUid;
    }
    if (message.accountType !== 0) {
      obj.accountType = accountTypeToJSON(message.accountType);
    }
    if (message.accountName !== '') {
      obj.accountName = message.accountName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignUpRequest>, I>>(
    base?: I,
  ): SignUpRequest {
    return SignUpRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignUpRequest>, I>>(
    object: I,
  ): SignUpRequest {
    const message = createBaseSignUpRequest();
    message.userId = object.userId ?? '';
    message.firebaseUid = object.firebaseUid ?? '';
    message.accountType = object.accountType ?? 0;
    message.accountName = object.accountName ?? '';
    return message;
  },
};

function createBaseSignInRequest(): SignInRequest {
  return { firebaseUid: '' };
}

export const SignInRequest = {
  encode(
    message: SignInRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.firebaseUid !== '') {
      writer.uint32(10).string(message.firebaseUid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignInRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignInRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.firebaseUid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignInRequest {
    return {
      firebaseUid: isSet(object.firebaseUid)
        ? globalThis.String(object.firebaseUid)
        : '',
    };
  },

  toJSON(message: SignInRequest): unknown {
    const obj: any = {};
    if (message.firebaseUid !== '') {
      obj.firebaseUid = message.firebaseUid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignInRequest>, I>>(
    base?: I,
  ): SignInRequest {
    return SignInRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignInRequest>, I>>(
    object: I,
  ): SignInRequest {
    const message = createBaseSignInRequest();
    message.firebaseUid = object.firebaseUid ?? '';
    return message;
  },
};

function createBaseSignResponse(): SignResponse {
  return { success: false, errorMessage: '', accountId: '' };
}

export const SignResponse = {
  encode(
    message: SignResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.accountId !== '') {
      writer.uint32(26).string(message.accountId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.accountId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
    };
  },

  toJSON(message: SignResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignResponse>, I>>(
    base?: I,
  ): SignResponse {
    return SignResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignResponse>, I>>(
    object: I,
  ): SignResponse {
    const message = createBaseSignResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.accountId = object.accountId ?? '';
    return message;
  },
};

function createBaseWebSignResponse(): WebSignResponse {
  return {
    success: false,
    errorMessage: '',
    name: '',
    telCode: '',
    tel: '',
    uid: '',
    accountId: '',
    accountType: '',
    accountName: '',
    nickname: '',
  };
}

export const WebSignResponse = {
  encode(
    message: WebSignResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.name !== '') {
      writer.uint32(26).string(message.name);
    }
    if (message.telCode !== '') {
      writer.uint32(34).string(message.telCode);
    }
    if (message.tel !== '') {
      writer.uint32(42).string(message.tel);
    }
    if (message.uid !== '') {
      writer.uint32(50).string(message.uid);
    }
    if (message.accountId !== '') {
      writer.uint32(58).string(message.accountId);
    }
    if (message.accountType !== '') {
      writer.uint32(66).string(message.accountType);
    }
    if (message.accountName !== '') {
      writer.uint32(74).string(message.accountName);
    }
    if (message.nickname !== '') {
      writer.uint32(82).string(message.nickname);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebSignResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebSignResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.telCode = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tel = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.uid = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.accountType = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.accountName = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.nickname = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebSignResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      name: isSet(object.name) ? globalThis.String(object.name) : '',
      telCode: isSet(object.telCode) ? globalThis.String(object.telCode) : '',
      tel: isSet(object.tel) ? globalThis.String(object.tel) : '',
      uid: isSet(object.uid) ? globalThis.String(object.uid) : '',
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      accountType: isSet(object.accountType)
        ? globalThis.String(object.accountType)
        : '',
      accountName: isSet(object.accountName)
        ? globalThis.String(object.accountName)
        : '',
      nickname: isSet(object.nickname)
        ? globalThis.String(object.nickname)
        : '',
    };
  },

  toJSON(message: WebSignResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.name !== '') {
      obj.name = message.name;
    }
    if (message.telCode !== '') {
      obj.telCode = message.telCode;
    }
    if (message.tel !== '') {
      obj.tel = message.tel;
    }
    if (message.uid !== '') {
      obj.uid = message.uid;
    }
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.accountType !== '') {
      obj.accountType = message.accountType;
    }
    if (message.accountName !== '') {
      obj.accountName = message.accountName;
    }
    if (message.nickname !== '') {
      obj.nickname = message.nickname;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebSignResponse>, I>>(
    base?: I,
  ): WebSignResponse {
    return WebSignResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebSignResponse>, I>>(
    object: I,
  ): WebSignResponse {
    const message = createBaseWebSignResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.name = object.name ?? '';
    message.telCode = object.telCode ?? '';
    message.tel = object.tel ?? '';
    message.uid = object.uid ?? '';
    message.accountId = object.accountId ?? '';
    message.accountType = object.accountType ?? '';
    message.accountName = object.accountName ?? '';
    message.nickname = object.nickname ?? '';
    return message;
  },
};

function createBaseSignOutRequest(): SignOutRequest {
  return { firebaseUid: '' };
}

export const SignOutRequest = {
  encode(
    message: SignOutRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.firebaseUid !== '') {
      writer.uint32(10).string(message.firebaseUid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignOutRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignOutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.firebaseUid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignOutRequest {
    return {
      firebaseUid: isSet(object.firebaseUid)
        ? globalThis.String(object.firebaseUid)
        : '',
    };
  },

  toJSON(message: SignOutRequest): unknown {
    const obj: any = {};
    if (message.firebaseUid !== '') {
      obj.firebaseUid = message.firebaseUid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignOutRequest>, I>>(
    base?: I,
  ): SignOutRequest {
    return SignOutRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignOutRequest>, I>>(
    object: I,
  ): SignOutRequest {
    const message = createBaseSignOutRequest();
    message.firebaseUid = object.firebaseUid ?? '';
    return message;
  },
};

function createBaseGetAccountResponse(): GetAccountResponse {
  return { success: false, errorMessage: '', account: undefined };
}

export const GetAccountResponse = {
  encode(
    message: GetAccountResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.account !== undefined) {
      Account.encode(message.account, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetAccountResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.account = Account.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAccountResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      account: isSet(object.account)
        ? Account.fromJSON(object.account)
        : undefined,
    };
  },

  toJSON(message: GetAccountResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.account !== undefined) {
      obj.account = Account.toJSON(message.account);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAccountResponse>, I>>(
    base?: I,
  ): GetAccountResponse {
    return GetAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAccountResponse>, I>>(
    object: I,
  ): GetAccountResponse {
    const message = createBaseGetAccountResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.account =
      object.account !== undefined && object.account !== null
        ? Account.fromPartial(object.account)
        : undefined;
    return message;
  },
};

function createBaseGetAccountByUserIdRequest(): GetAccountByUserIdRequest {
  return { userId: '' };
}

export const GetAccountByUserIdRequest = {
  encode(
    message: GetAccountByUserIdRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.userId !== '') {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetAccountByUserIdRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAccountByUserIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAccountByUserIdRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : '',
    };
  },

  toJSON(message: GetAccountByUserIdRequest): unknown {
    const obj: any = {};
    if (message.userId !== '') {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAccountByUserIdRequest>, I>>(
    base?: I,
  ): GetAccountByUserIdRequest {
    return GetAccountByUserIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAccountByUserIdRequest>, I>>(
    object: I,
  ): GetAccountByUserIdRequest {
    const message = createBaseGetAccountByUserIdRequest();
    message.userId = object.userId ?? '';
    return message;
  },
};

function createBaseGetAccountByUserIdResponse(): GetAccountByUserIdResponse {
  return { success: false, errorMessage: '', account: [] };
}

export const GetAccountByUserIdResponse = {
  encode(
    message: GetAccountByUserIdResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.account) {
      Account.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetAccountByUserIdResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAccountByUserIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.account.push(Account.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAccountByUserIdResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      account: globalThis.Array.isArray(object?.account)
        ? object.account.map((e: any) => Account.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetAccountByUserIdResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.account?.length) {
      obj.account = message.account.map(e => Account.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAccountByUserIdResponse>, I>>(
    base?: I,
  ): GetAccountByUserIdResponse {
    return GetAccountByUserIdResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAccountByUserIdResponse>, I>>(
    object: I,
  ): GetAccountByUserIdResponse {
    const message = createBaseGetAccountByUserIdResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.account = object.account?.map(e => Account.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateAccountRequest(): UpdateAccountRequest {
  return { accountId: '', accountName: '', nickname: '', pushToken: '' };
}

export const UpdateAccountRequest = {
  encode(
    message: UpdateAccountRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.accountName !== '') {
      writer.uint32(18).string(message.accountName);
    }
    if (message.nickname !== '') {
      writer.uint32(26).string(message.nickname);
    }
    if (message.pushToken !== '') {
      writer.uint32(34).string(message.pushToken);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): UpdateAccountRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.accountName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nickname = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pushToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAccountRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      accountName: isSet(object.accountName)
        ? globalThis.String(object.accountName)
        : '',
      nickname: isSet(object.nickname)
        ? globalThis.String(object.nickname)
        : '',
      pushToken: isSet(object.pushToken)
        ? globalThis.String(object.pushToken)
        : '',
    };
  },

  toJSON(message: UpdateAccountRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.accountName !== '') {
      obj.accountName = message.accountName;
    }
    if (message.nickname !== '') {
      obj.nickname = message.nickname;
    }
    if (message.pushToken !== '') {
      obj.pushToken = message.pushToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateAccountRequest>, I>>(
    base?: I,
  ): UpdateAccountRequest {
    return UpdateAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateAccountRequest>, I>>(
    object: I,
  ): UpdateAccountRequest {
    const message = createBaseUpdateAccountRequest();
    message.accountId = object.accountId ?? '';
    message.accountName = object.accountName ?? '';
    message.nickname = object.nickname ?? '';
    message.pushToken = object.pushToken ?? '';
    return message;
  },
};

function createBaseWordRequest(): WordRequest {
  return { word: '', searchMode: 0 };
}

export const WordRequest = {
  encode(
    message: WordRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.word !== '') {
      writer.uint32(10).string(message.word);
    }
    if (message.searchMode !== 0) {
      writer.uint32(16).int32(message.searchMode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WordRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.word = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.searchMode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WordRequest {
    return {
      word: isSet(object.word) ? globalThis.String(object.word) : '',
      searchMode: isSet(object.searchMode)
        ? wordSearchModeFromJSON(object.searchMode)
        : 0,
    };
  },

  toJSON(message: WordRequest): unknown {
    const obj: any = {};
    if (message.word !== '') {
      obj.word = message.word;
    }
    if (message.searchMode !== 0) {
      obj.searchMode = wordSearchModeToJSON(message.searchMode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WordRequest>, I>>(base?: I): WordRequest {
    return WordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WordRequest>, I>>(
    object: I,
  ): WordRequest {
    const message = createBaseWordRequest();
    message.word = object.word ?? '';
    message.searchMode = object.searchMode ?? 0;
    return message;
  },
};

function createBaseWordBanCheckResult(): WordBanCheckResult {
  return { start: 0, end: 0, word: '', length: 0 };
}

export const WordBanCheckResult = {
  encode(
    message: WordBanCheckResult,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.start !== 0) {
      writer.uint32(8).int32(message.start);
    }
    if (message.end !== 0) {
      writer.uint32(16).int32(message.end);
    }
    if (message.word !== '') {
      writer.uint32(26).string(message.word);
    }
    if (message.length !== 0) {
      writer.uint32(32).int32(message.length);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WordBanCheckResult {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWordBanCheckResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.start = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.end = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.word = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.length = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WordBanCheckResult {
    return {
      start: isSet(object.start) ? globalThis.Number(object.start) : 0,
      end: isSet(object.end) ? globalThis.Number(object.end) : 0,
      word: isSet(object.word) ? globalThis.String(object.word) : '',
      length: isSet(object.length) ? globalThis.Number(object.length) : 0,
    };
  },

  toJSON(message: WordBanCheckResult): unknown {
    const obj: any = {};
    if (message.start !== 0) {
      obj.start = Math.round(message.start);
    }
    if (message.end !== 0) {
      obj.end = Math.round(message.end);
    }
    if (message.word !== '') {
      obj.word = message.word;
    }
    if (message.length !== 0) {
      obj.length = Math.round(message.length);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WordBanCheckResult>, I>>(
    base?: I,
  ): WordBanCheckResult {
    return WordBanCheckResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WordBanCheckResult>, I>>(
    object: I,
  ): WordBanCheckResult {
    const message = createBaseWordBanCheckResult();
    message.start = object.start ?? 0;
    message.end = object.end ?? 0;
    message.word = object.word ?? '';
    message.length = object.length ?? 0;
    return message;
  },
};

function createBaseWordResponse(): WordResponse {
  return { success: false, errorMessage: '', banList: [] };
}

export const WordResponse = {
  encode(
    message: WordResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.banList) {
      WordBanCheckResult.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WordResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.banList.push(
            WordBanCheckResult.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WordResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      banList: globalThis.Array.isArray(object?.banList)
        ? object.banList.map((e: any) => WordBanCheckResult.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WordResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.banList?.length) {
      obj.banList = message.banList.map(e => WordBanCheckResult.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WordResponse>, I>>(
    base?: I,
  ): WordResponse {
    return WordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WordResponse>, I>>(
    object: I,
  ): WordResponse {
    const message = createBaseWordResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.banList =
      object.banList?.map(e => WordBanCheckResult.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNickNameRequest(): NickNameRequest {
  return { accountId: '', nickname: '', itemId: '' };
}

export const NickNameRequest = {
  encode(
    message: NickNameRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.nickname !== '') {
      writer.uint32(18).string(message.nickname);
    }
    if (message.itemId !== '') {
      writer.uint32(26).string(message.itemId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NickNameRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNickNameRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nickname = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.itemId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NickNameRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      nickname: isSet(object.nickname)
        ? globalThis.String(object.nickname)
        : '',
      itemId: isSet(object.itemId) ? globalThis.String(object.itemId) : '',
    };
  },

  toJSON(message: NickNameRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.nickname !== '') {
      obj.nickname = message.nickname;
    }
    if (message.itemId !== '') {
      obj.itemId = message.itemId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NickNameRequest>, I>>(
    base?: I,
  ): NickNameRequest {
    return NickNameRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NickNameRequest>, I>>(
    object: I,
  ): NickNameRequest {
    const message = createBaseNickNameRequest();
    message.accountId = object.accountId ?? '';
    message.nickname = object.nickname ?? '';
    message.itemId = object.itemId ?? '';
    return message;
  },
};

function createBaseGetNickByFirebaseUidRequest(): GetNickByFirebaseUidRequest {
  return { firebaseUid: [] };
}

export const GetNickByFirebaseUidRequest = {
  encode(
    message: GetNickByFirebaseUidRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.firebaseUid) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetNickByFirebaseUidRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNickByFirebaseUidRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.firebaseUid.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNickByFirebaseUidRequest {
    return {
      firebaseUid: globalThis.Array.isArray(object?.firebaseUid)
        ? object.firebaseUid.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GetNickByFirebaseUidRequest): unknown {
    const obj: any = {};
    if (message.firebaseUid?.length) {
      obj.firebaseUid = message.firebaseUid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetNickByFirebaseUidRequest>, I>>(
    base?: I,
  ): GetNickByFirebaseUidRequest {
    return GetNickByFirebaseUidRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetNickByFirebaseUidRequest>, I>>(
    object: I,
  ): GetNickByFirebaseUidRequest {
    const message = createBaseGetNickByFirebaseUidRequest();
    message.firebaseUid = object.firebaseUid?.map(e => e) || [];
    return message;
  },
};

function createBaseGetNickByFirebaseUidResponse(): GetNickByFirebaseUidResponse {
  return { success: false, errorMessage: '', account: [] };
}

export const GetNickByFirebaseUidResponse = {
  encode(
    message: GetNickByFirebaseUidResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.account) {
      Account.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetNickByFirebaseUidResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNickByFirebaseUidResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.account.push(Account.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetNickByFirebaseUidResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      account: globalThis.Array.isArray(object?.account)
        ? object.account.map((e: any) => Account.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetNickByFirebaseUidResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.account?.length) {
      obj.account = message.account.map(e => Account.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetNickByFirebaseUidResponse>, I>>(
    base?: I,
  ): GetNickByFirebaseUidResponse {
    return GetNickByFirebaseUidResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetNickByFirebaseUidResponse>, I>>(
    object: I,
  ): GetNickByFirebaseUidResponse {
    const message = createBaseGetNickByFirebaseUidResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.account = object.account?.map(e => Account.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAccountStateRequest(): AccountStateRequest {
  return {
    accountId: '',
    datetime: '',
    state: false,
    reasonType: 0,
    reasonText: '',
  };
}

export const AccountStateRequest = {
  encode(
    message: AccountStateRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.datetime !== '') {
      writer.uint32(18).string(message.datetime);
    }
    if (message.state !== false) {
      writer.uint32(24).bool(message.state);
    }
    if (message.reasonType !== 0) {
      writer.uint32(32).int32(message.reasonType);
    }
    if (message.reasonText !== '') {
      writer.uint32(42).string(message.reasonText);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AccountStateRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.datetime = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.state = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.reasonType = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.reasonText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccountStateRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      datetime: isSet(object.datetime)
        ? globalThis.String(object.datetime)
        : '',
      state: isSet(object.state) ? globalThis.Boolean(object.state) : false,
      reasonType: isSet(object.reasonType)
        ? globalThis.Number(object.reasonType)
        : 0,
      reasonText: isSet(object.reasonText)
        ? globalThis.String(object.reasonText)
        : '',
    };
  },

  toJSON(message: AccountStateRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.datetime !== '') {
      obj.datetime = message.datetime;
    }
    if (message.state !== false) {
      obj.state = message.state;
    }
    if (message.reasonType !== 0) {
      obj.reasonType = Math.round(message.reasonType);
    }
    if (message.reasonText !== '') {
      obj.reasonText = message.reasonText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AccountStateRequest>, I>>(
    base?: I,
  ): AccountStateRequest {
    return AccountStateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AccountStateRequest>, I>>(
    object: I,
  ): AccountStateRequest {
    const message = createBaseAccountStateRequest();
    message.accountId = object.accountId ?? '';
    message.datetime = object.datetime ?? '';
    message.state = object.state ?? false;
    message.reasonType = object.reasonType ?? 0;
    message.reasonText = object.reasonText ?? '';
    return message;
  },
};

function createBaseGetAccountLogsResponse(): GetAccountLogsResponse {
  return { success: false, errorMessage: '', accountLogs: [] };
}

export const GetAccountLogsResponse = {
  encode(
    message: GetAccountLogsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.accountLogs) {
      AccountLogs.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetAccountLogsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAccountLogsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.accountLogs.push(AccountLogs.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAccountLogsResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      accountLogs: globalThis.Array.isArray(object?.accountLogs)
        ? object.accountLogs.map((e: any) => AccountLogs.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetAccountLogsResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.accountLogs?.length) {
      obj.accountLogs = message.accountLogs.map(e => AccountLogs.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAccountLogsResponse>, I>>(
    base?: I,
  ): GetAccountLogsResponse {
    return GetAccountLogsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAccountLogsResponse>, I>>(
    object: I,
  ): GetAccountLogsResponse {
    const message = createBaseGetAccountLogsResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.accountLogs =
      object.accountLogs?.map(e => AccountLogs.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAdminGetAllAccountRequest(): AdminGetAllAccountRequest {
  return { page: 0, countPerPage: 0 };
}

export const AdminGetAllAccountRequest = {
  encode(
    message: AdminGetAllAccountRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.countPerPage !== 0) {
      writer.uint32(16).int32(message.countPerPage);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AdminGetAllAccountRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdminGetAllAccountRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.countPerPage = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdminGetAllAccountRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      countPerPage: isSet(object.countPerPage)
        ? globalThis.Number(object.countPerPage)
        : 0,
    };
  },

  toJSON(message: AdminGetAllAccountRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.countPerPage !== 0) {
      obj.countPerPage = Math.round(message.countPerPage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AdminGetAllAccountRequest>, I>>(
    base?: I,
  ): AdminGetAllAccountRequest {
    return AdminGetAllAccountRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AdminGetAllAccountRequest>, I>>(
    object: I,
  ): AdminGetAllAccountRequest {
    const message = createBaseAdminGetAllAccountRequest();
    message.page = object.page ?? 0;
    message.countPerPage = object.countPerPage ?? 0;
    return message;
  },
};

function createBaseAdminGetAllAccountResponse(): AdminGetAllAccountResponse {
  return { success: false, errorMessage: '', account: [] };
}

export const AdminGetAllAccountResponse = {
  encode(
    message: AdminGetAllAccountResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.account) {
      Account.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AdminGetAllAccountResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdminGetAllAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.account.push(Account.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdminGetAllAccountResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      account: globalThis.Array.isArray(object?.account)
        ? object.account.map((e: any) => Account.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AdminGetAllAccountResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.account?.length) {
      obj.account = message.account.map(e => Account.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AdminGetAllAccountResponse>, I>>(
    base?: I,
  ): AdminGetAllAccountResponse {
    return AdminGetAllAccountResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AdminGetAllAccountResponse>, I>>(
    object: I,
  ): AdminGetAllAccountResponse {
    const message = createBaseAdminGetAllAccountResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.account = object.account?.map(e => Account.fromPartial(e)) || [];
    return message;
  },
};

export type AccountServiceService = typeof AccountServiceService;
export const AccountServiceService = {
  isExistEmail: {
    path: '/user.AccountService/isExistEmail',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: IsExistEmailRequest) =>
      Buffer.from(IsExistEmailRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => IsExistEmailRequest.decode(value),
    responseSerialize: (value: IsExistAccountResponse) =>
      Buffer.from(IsExistAccountResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      IsExistAccountResponse.decode(value),
  },
  isExistAccount: {
    path: '/user.AccountService/isExistAccount',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: IsExistAccountRequest) =>
      Buffer.from(IsExistAccountRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => IsExistAccountRequest.decode(value),
    responseSerialize: (value: IsExistAccountResponse) =>
      Buffer.from(IsExistAccountResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      IsExistAccountResponse.decode(value),
  },
  signUp: {
    path: '/user.AccountService/SignUp',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SignUpRequest) =>
      Buffer.from(SignUpRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SignUpRequest.decode(value),
    responseSerialize: (value: SignResponse) =>
      Buffer.from(SignResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SignResponse.decode(value),
  },
  signIn: {
    path: '/user.AccountService/SignIn',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SignInRequest) =>
      Buffer.from(SignInRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SignInRequest.decode(value),
    responseSerialize: (value: SignResponse) =>
      Buffer.from(SignResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SignResponse.decode(value),
  },
  signOut: {
    path: '/user.AccountService/SignOut',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SignOutRequest) =>
      Buffer.from(SignOutRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SignOutRequest.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
  webSignIn: {
    path: '/user.AccountService/WebSignIn',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SignInRequest) =>
      Buffer.from(SignInRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SignInRequest.decode(value),
    responseSerialize: (value: WebSignResponse) =>
      Buffer.from(WebSignResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => WebSignResponse.decode(value),
  },
  webSignOut: {
    path: '/user.AccountService/WebSignOut',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SignOutRequest) =>
      Buffer.from(SignOutRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SignOutRequest.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
  getAccount: {
    path: '/user.AccountService/GetAccount',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AccountIdParam) =>
      Buffer.from(AccountIdParam.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AccountIdParam.decode(value),
    responseSerialize: (value: GetAccountResponse) =>
      Buffer.from(GetAccountResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAccountResponse.decode(value),
  },
  getAccountByUserId: {
    path: '/user.AccountService/GetAccountByUserId',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAccountByUserIdRequest) =>
      Buffer.from(GetAccountByUserIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      GetAccountByUserIdRequest.decode(value),
    responseSerialize: (value: GetAccountByUserIdResponse) =>
      Buffer.from(GetAccountByUserIdResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetAccountByUserIdResponse.decode(value),
  },
  updateAccount: {
    path: '/user.AccountService/UpdateAccount',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateAccountRequest) =>
      Buffer.from(UpdateAccountRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateAccountRequest.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
  checkNickname: {
    path: '/user.AccountService/CheckNickname',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: WordRequest) =>
      Buffer.from(WordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => WordRequest.decode(value),
    responseSerialize: (value: WordResponse) =>
      Buffer.from(WordResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => WordResponse.decode(value),
  },
  /** 닉네임 변경 */
  updateNickname: {
    path: '/user.AccountService/UpdateNickname',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: NickNameRequest) =>
      Buffer.from(NickNameRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => NickNameRequest.decode(value),
    responseSerialize: (value: WordResponse) =>
      Buffer.from(WordResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => WordResponse.decode(value),
  },
  /** Firebase UID로 닉네임 조회 */
  getNickByFirebaseUid: {
    path: '/user.AccountService/GetNickByFirebaseUid',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetNickByFirebaseUidRequest) =>
      Buffer.from(GetNickByFirebaseUidRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      GetNickByFirebaseUidRequest.decode(value),
    responseSerialize: (value: GetNickByFirebaseUidResponse) =>
      Buffer.from(GetNickByFirebaseUidResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetNickByFirebaseUidResponse.decode(value),
  },
  /** Account management */
  withdrawal: {
    path: '/user.AccountService/Withdrawal',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AccountStateRequest) =>
      Buffer.from(AccountStateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AccountStateRequest.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
  /** 계정탈퇴취소 */
  withdrawalRevoke: {
    path: '/user.AccountService/WithdrawalRevoke',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AccountIdParam) =>
      Buffer.from(AccountIdParam.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AccountIdParam.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
  /** 휴면계정 */
  dormant: {
    path: '/user.AccountService/Dormant',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AccountStateRequest) =>
      Buffer.from(AccountStateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AccountStateRequest.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
  /** 계정비활성화 */
  disable: {
    path: '/user.AccountService/Disable',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AccountStateRequest) =>
      Buffer.from(AccountStateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AccountStateRequest.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
  /** 계정신고 */
  reportAccount: {
    path: '/user.AccountService/ReportAccount',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ReportAccountRequest) =>
      Buffer.from(ReportAccountRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ReportAccountRequest.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
  getAccountLogs: {
    path: '/user.AccountService/GetAccountLogs',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AccountIdParam) =>
      Buffer.from(AccountIdParam.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AccountIdParam.decode(value),
    responseSerialize: (value: GetAccountLogsResponse) =>
      Buffer.from(GetAccountLogsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      GetAccountLogsResponse.decode(value),
  },
  /** admin */
  adminGetAllAccount: {
    path: '/user.AccountService/AdminGetAllAccount',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AdminGetAllAccountRequest) =>
      Buffer.from(AdminGetAllAccountRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      AdminGetAllAccountRequest.decode(value),
    responseSerialize: (value: AdminGetAllAccountResponse) =>
      Buffer.from(AdminGetAllAccountResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      AdminGetAllAccountResponse.decode(value),
  },
} as const;

export interface AccountServiceServer extends UntypedServiceImplementation {
  isExistEmail: handleUnaryCall<IsExistEmailRequest, IsExistAccountResponse>;
  isExistAccount: handleUnaryCall<
    IsExistAccountRequest,
    IsExistAccountResponse
  >;
  signUp: handleUnaryCall<SignUpRequest, SignResponse>;
  signIn: handleUnaryCall<SignInRequest, SignResponse>;
  signOut: handleUnaryCall<SignOutRequest, DefaultResponse>;
  webSignIn: handleUnaryCall<SignInRequest, WebSignResponse>;
  webSignOut: handleUnaryCall<SignOutRequest, DefaultResponse>;
  getAccount: handleUnaryCall<AccountIdParam, GetAccountResponse>;
  getAccountByUserId: handleUnaryCall<
    GetAccountByUserIdRequest,
    GetAccountByUserIdResponse
  >;
  updateAccount: handleUnaryCall<UpdateAccountRequest, DefaultResponse>;
  checkNickname: handleUnaryCall<WordRequest, WordResponse>;
  /** 닉네임 변경 */
  updateNickname: handleUnaryCall<NickNameRequest, WordResponse>;
  /** Firebase UID로 닉네임 조회 */
  getNickByFirebaseUid: handleUnaryCall<
    GetNickByFirebaseUidRequest,
    GetNickByFirebaseUidResponse
  >;
  /** Account management */
  withdrawal: handleUnaryCall<AccountStateRequest, DefaultResponse>;
  /** 계정탈퇴취소 */
  withdrawalRevoke: handleUnaryCall<AccountIdParam, DefaultResponse>;
  /** 휴면계정 */
  dormant: handleUnaryCall<AccountStateRequest, DefaultResponse>;
  /** 계정비활성화 */
  disable: handleUnaryCall<AccountStateRequest, DefaultResponse>;
  /** 계정신고 */
  reportAccount: handleUnaryCall<ReportAccountRequest, DefaultResponse>;
  getAccountLogs: handleUnaryCall<AccountIdParam, GetAccountLogsResponse>;
  /** admin */
  adminGetAllAccount: handleUnaryCall<
    AdminGetAllAccountRequest,
    AdminGetAllAccountResponse
  >;
}

export interface AccountServiceClient extends Client {
  isExistEmail(
    request: IsExistEmailRequest,
    callback: (
      error: ServiceError | null,
      response: IsExistAccountResponse,
    ) => void,
  ): ClientUnaryCall;
  isExistEmail(
    request: IsExistEmailRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: IsExistAccountResponse,
    ) => void,
  ): ClientUnaryCall;
  isExistEmail(
    request: IsExistEmailRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: IsExistAccountResponse,
    ) => void,
  ): ClientUnaryCall;
  isExistAccount(
    request: IsExistAccountRequest,
    callback: (
      error: ServiceError | null,
      response: IsExistAccountResponse,
    ) => void,
  ): ClientUnaryCall;
  isExistAccount(
    request: IsExistAccountRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: IsExistAccountResponse,
    ) => void,
  ): ClientUnaryCall;
  isExistAccount(
    request: IsExistAccountRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: IsExistAccountResponse,
    ) => void,
  ): ClientUnaryCall;
  signUp(
    request: SignUpRequest,
    callback: (error: ServiceError | null, response: SignResponse) => void,
  ): ClientUnaryCall;
  signUp(
    request: SignUpRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SignResponse) => void,
  ): ClientUnaryCall;
  signUp(
    request: SignUpRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SignResponse) => void,
  ): ClientUnaryCall;
  signIn(
    request: SignInRequest,
    callback: (error: ServiceError | null, response: SignResponse) => void,
  ): ClientUnaryCall;
  signIn(
    request: SignInRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SignResponse) => void,
  ): ClientUnaryCall;
  signIn(
    request: SignInRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SignResponse) => void,
  ): ClientUnaryCall;
  signOut(
    request: SignOutRequest,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  signOut(
    request: SignOutRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  signOut(
    request: SignOutRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  webSignIn(
    request: SignInRequest,
    callback: (error: ServiceError | null, response: WebSignResponse) => void,
  ): ClientUnaryCall;
  webSignIn(
    request: SignInRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: WebSignResponse) => void,
  ): ClientUnaryCall;
  webSignIn(
    request: SignInRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: WebSignResponse) => void,
  ): ClientUnaryCall;
  webSignOut(
    request: SignOutRequest,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  webSignOut(
    request: SignOutRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  webSignOut(
    request: SignOutRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  getAccount(
    request: AccountIdParam,
    callback: (
      error: ServiceError | null,
      response: GetAccountResponse,
    ) => void,
  ): ClientUnaryCall;
  getAccount(
    request: AccountIdParam,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetAccountResponse,
    ) => void,
  ): ClientUnaryCall;
  getAccount(
    request: AccountIdParam,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetAccountResponse,
    ) => void,
  ): ClientUnaryCall;
  getAccountByUserId(
    request: GetAccountByUserIdRequest,
    callback: (
      error: ServiceError | null,
      response: GetAccountByUserIdResponse,
    ) => void,
  ): ClientUnaryCall;
  getAccountByUserId(
    request: GetAccountByUserIdRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetAccountByUserIdResponse,
    ) => void,
  ): ClientUnaryCall;
  getAccountByUserId(
    request: GetAccountByUserIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetAccountByUserIdResponse,
    ) => void,
  ): ClientUnaryCall;
  updateAccount(
    request: UpdateAccountRequest,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  updateAccount(
    request: UpdateAccountRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  updateAccount(
    request: UpdateAccountRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  checkNickname(
    request: WordRequest,
    callback: (error: ServiceError | null, response: WordResponse) => void,
  ): ClientUnaryCall;
  checkNickname(
    request: WordRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: WordResponse) => void,
  ): ClientUnaryCall;
  checkNickname(
    request: WordRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: WordResponse) => void,
  ): ClientUnaryCall;
  /** 닉네임 변경 */
  updateNickname(
    request: NickNameRequest,
    callback: (error: ServiceError | null, response: WordResponse) => void,
  ): ClientUnaryCall;
  updateNickname(
    request: NickNameRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: WordResponse) => void,
  ): ClientUnaryCall;
  updateNickname(
    request: NickNameRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: WordResponse) => void,
  ): ClientUnaryCall;
  /** Firebase UID로 닉네임 조회 */
  getNickByFirebaseUid(
    request: GetNickByFirebaseUidRequest,
    callback: (
      error: ServiceError | null,
      response: GetNickByFirebaseUidResponse,
    ) => void,
  ): ClientUnaryCall;
  getNickByFirebaseUid(
    request: GetNickByFirebaseUidRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetNickByFirebaseUidResponse,
    ) => void,
  ): ClientUnaryCall;
  getNickByFirebaseUid(
    request: GetNickByFirebaseUidRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetNickByFirebaseUidResponse,
    ) => void,
  ): ClientUnaryCall;
  /** Account management */
  withdrawal(
    request: AccountStateRequest,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  withdrawal(
    request: AccountStateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  withdrawal(
    request: AccountStateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  /** 계정탈퇴취소 */
  withdrawalRevoke(
    request: AccountIdParam,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  withdrawalRevoke(
    request: AccountIdParam,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  withdrawalRevoke(
    request: AccountIdParam,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  /** 휴면계정 */
  dormant(
    request: AccountStateRequest,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  dormant(
    request: AccountStateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  dormant(
    request: AccountStateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  /** 계정비활성화 */
  disable(
    request: AccountStateRequest,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  disable(
    request: AccountStateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  disable(
    request: AccountStateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  /** 계정신고 */
  reportAccount(
    request: ReportAccountRequest,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  reportAccount(
    request: ReportAccountRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  reportAccount(
    request: ReportAccountRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  getAccountLogs(
    request: AccountIdParam,
    callback: (
      error: ServiceError | null,
      response: GetAccountLogsResponse,
    ) => void,
  ): ClientUnaryCall;
  getAccountLogs(
    request: AccountIdParam,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: GetAccountLogsResponse,
    ) => void,
  ): ClientUnaryCall;
  getAccountLogs(
    request: AccountIdParam,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: GetAccountLogsResponse,
    ) => void,
  ): ClientUnaryCall;
  /** admin */
  adminGetAllAccount(
    request: AdminGetAllAccountRequest,
    callback: (
      error: ServiceError | null,
      response: AdminGetAllAccountResponse,
    ) => void,
  ): ClientUnaryCall;
  adminGetAllAccount(
    request: AdminGetAllAccountRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: AdminGetAllAccountResponse,
    ) => void,
  ): ClientUnaryCall;
  adminGetAllAccount(
    request: AdminGetAllAccountRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: AdminGetAllAccountResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const AccountServiceClient = makeGenericClientConstructor(
  AccountServiceService,
  'user.AccountService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): AccountServiceClient;
  service: typeof AccountServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
