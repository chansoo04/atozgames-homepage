// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.29.3
// source: friend.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from '@grpc/grpc-js';
import { Block, DefaultResponse, Friend, FriendRequest } from './user-common';

export const protobufPackage = 'user';

export interface RefreshMyProfileRequest {
  /** 요청하는 사람 */
  accountId: string;
  /** 내 프로필 정보 */
  profile?: Friend | undefined;
}

export interface SendReqRequest {
  /** 요청하는 사람 */
  accountId: string;
  /** 요청받는 사람 */
  friendId: string;
  /** 요청 메시지 */
  message: string;
}

export interface FriendReqResponse {
  /** 성공 여부 */
  success: boolean;
  /** 에러 메시지 */
  errorMessage: string;
  /** 친구 요청 ID */
  friendReqId: string;
  /** 친구 ID */
  friendShipId: string;
}

export interface FriendReqRequest {
  /** 친구 요청 ID */
  friendReqId: string;
}

export interface FriendShipRequest {
  /** 친구 관계 ID */
  friendShipId: string;
}

export interface FriendShipResponse {
  /** 성공 여부 */
  success: boolean;
  /** 에러 메시지 */
  errorMessage: string;
  friendShipId: string;
}

export interface ListRequest {
  accountId: string;
}

export interface FriendRequestListResponse {
  /** 성공 여부 */
  success: boolean;
  /** 에러 메시지 */
  errorMessage: string;
  /** 요청 리스트 */
  friendRequest: FriendRequest[];
}

export interface FindFriendRequest {
  /** 요청하는 사람 */
  accountId: string;
  /** 검색 키워드 */
  keyword: string;
}

export interface FriendListResponse {
  /** 성공 여부 */
  success: boolean;
  /** 에러 메시지 */
  errorMessage: string;
  /** 친구 리스트 */
  friend: Friend[];
}

export interface BlockRequest {
  /** 차단 ID */
  blockId: string;
  /** 요청하는 사람 */
  accountId: string;
  /** 차단할 사람 */
  blockAccountId: string;
}

export interface BlockListResponse {
  /** 성공 여부 */
  success: boolean;
  /** 에러 메시지 */
  errorMessage: string;
  /** 차단 리스트 */
  block: Block[];
}

export interface JoinFriendRequest {
  /** 요청하는 사람 */
  accountId: string;
  /** 친구 코드 */
  code: string;
}

export interface JoinFriendListResponse {
  /** 성공 여부 */
  success: boolean;
  /** 에러 메시지 */
  errorMessage: string;
  /** 초대로 추가된 친구 수 */
  count: number;
  /** 친구 리스트 */
  friend: Friend[];
}

function createBaseRefreshMyProfileRequest(): RefreshMyProfileRequest {
  return { accountId: '', profile: undefined };
}

export const RefreshMyProfileRequest = {
  encode(
    message: RefreshMyProfileRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.profile !== undefined) {
      Friend.encode(message.profile, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): RefreshMyProfileRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRefreshMyProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.profile = Friend.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RefreshMyProfileRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      profile: isSet(object.profile)
        ? Friend.fromJSON(object.profile)
        : undefined,
    };
  },

  toJSON(message: RefreshMyProfileRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.profile !== undefined) {
      obj.profile = Friend.toJSON(message.profile);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RefreshMyProfileRequest>, I>>(
    base?: I,
  ): RefreshMyProfileRequest {
    return RefreshMyProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RefreshMyProfileRequest>, I>>(
    object: I,
  ): RefreshMyProfileRequest {
    const message = createBaseRefreshMyProfileRequest();
    message.accountId = object.accountId ?? '';
    message.profile =
      object.profile !== undefined && object.profile !== null
        ? Friend.fromPartial(object.profile)
        : undefined;
    return message;
  },
};

function createBaseSendReqRequest(): SendReqRequest {
  return { accountId: '', friendId: '', message: '' };
}

export const SendReqRequest = {
  encode(
    message: SendReqRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.friendId !== '') {
      writer.uint32(18).string(message.friendId);
    }
    if (message.message !== '') {
      writer.uint32(26).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendReqRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendReqRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.friendId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendReqRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      friendId: isSet(object.friendId)
        ? globalThis.String(object.friendId)
        : '',
      message: isSet(object.message) ? globalThis.String(object.message) : '',
    };
  },

  toJSON(message: SendReqRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.friendId !== '') {
      obj.friendId = message.friendId;
    }
    if (message.message !== '') {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendReqRequest>, I>>(
    base?: I,
  ): SendReqRequest {
    return SendReqRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendReqRequest>, I>>(
    object: I,
  ): SendReqRequest {
    const message = createBaseSendReqRequest();
    message.accountId = object.accountId ?? '';
    message.friendId = object.friendId ?? '';
    message.message = object.message ?? '';
    return message;
  },
};

function createBaseFriendReqResponse(): FriendReqResponse {
  return {
    success: false,
    errorMessage: '',
    friendReqId: '',
    friendShipId: '',
  };
}

export const FriendReqResponse = {
  encode(
    message: FriendReqResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.friendReqId !== '') {
      writer.uint32(26).string(message.friendReqId);
    }
    if (message.friendShipId !== '') {
      writer.uint32(34).string(message.friendShipId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FriendReqResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFriendReqResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.friendReqId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.friendShipId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FriendReqResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      friendReqId: isSet(object.friendReqId)
        ? globalThis.String(object.friendReqId)
        : '',
      friendShipId: isSet(object.friendShipId)
        ? globalThis.String(object.friendShipId)
        : '',
    };
  },

  toJSON(message: FriendReqResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.friendReqId !== '') {
      obj.friendReqId = message.friendReqId;
    }
    if (message.friendShipId !== '') {
      obj.friendShipId = message.friendShipId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FriendReqResponse>, I>>(
    base?: I,
  ): FriendReqResponse {
    return FriendReqResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FriendReqResponse>, I>>(
    object: I,
  ): FriendReqResponse {
    const message = createBaseFriendReqResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.friendReqId = object.friendReqId ?? '';
    message.friendShipId = object.friendShipId ?? '';
    return message;
  },
};

function createBaseFriendReqRequest(): FriendReqRequest {
  return { friendReqId: '' };
}

export const FriendReqRequest = {
  encode(
    message: FriendReqRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.friendReqId !== '') {
      writer.uint32(10).string(message.friendReqId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FriendReqRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFriendReqRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.friendReqId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FriendReqRequest {
    return {
      friendReqId: isSet(object.friendReqId)
        ? globalThis.String(object.friendReqId)
        : '',
    };
  },

  toJSON(message: FriendReqRequest): unknown {
    const obj: any = {};
    if (message.friendReqId !== '') {
      obj.friendReqId = message.friendReqId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FriendReqRequest>, I>>(
    base?: I,
  ): FriendReqRequest {
    return FriendReqRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FriendReqRequest>, I>>(
    object: I,
  ): FriendReqRequest {
    const message = createBaseFriendReqRequest();
    message.friendReqId = object.friendReqId ?? '';
    return message;
  },
};

function createBaseFriendShipRequest(): FriendShipRequest {
  return { friendShipId: '' };
}

export const FriendShipRequest = {
  encode(
    message: FriendShipRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.friendShipId !== '') {
      writer.uint32(10).string(message.friendShipId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FriendShipRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFriendShipRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.friendShipId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FriendShipRequest {
    return {
      friendShipId: isSet(object.friendShipId)
        ? globalThis.String(object.friendShipId)
        : '',
    };
  },

  toJSON(message: FriendShipRequest): unknown {
    const obj: any = {};
    if (message.friendShipId !== '') {
      obj.friendShipId = message.friendShipId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FriendShipRequest>, I>>(
    base?: I,
  ): FriendShipRequest {
    return FriendShipRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FriendShipRequest>, I>>(
    object: I,
  ): FriendShipRequest {
    const message = createBaseFriendShipRequest();
    message.friendShipId = object.friendShipId ?? '';
    return message;
  },
};

function createBaseFriendShipResponse(): FriendShipResponse {
  return { success: false, errorMessage: '', friendShipId: '' };
}

export const FriendShipResponse = {
  encode(
    message: FriendShipResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.friendShipId !== '') {
      writer.uint32(26).string(message.friendShipId);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): FriendShipResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFriendShipResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.friendShipId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FriendShipResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      friendShipId: isSet(object.friendShipId)
        ? globalThis.String(object.friendShipId)
        : '',
    };
  },

  toJSON(message: FriendShipResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.friendShipId !== '') {
      obj.friendShipId = message.friendShipId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FriendShipResponse>, I>>(
    base?: I,
  ): FriendShipResponse {
    return FriendShipResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FriendShipResponse>, I>>(
    object: I,
  ): FriendShipResponse {
    const message = createBaseFriendShipResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.friendShipId = object.friendShipId ?? '';
    return message;
  },
};

function createBaseListRequest(): ListRequest {
  return { accountId: '' };
}

export const ListRequest = {
  encode(
    message: ListRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
    };
  },

  toJSON(message: ListRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListRequest>, I>>(base?: I): ListRequest {
    return ListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListRequest>, I>>(
    object: I,
  ): ListRequest {
    const message = createBaseListRequest();
    message.accountId = object.accountId ?? '';
    return message;
  },
};

function createBaseFriendRequestListResponse(): FriendRequestListResponse {
  return { success: false, errorMessage: '', friendRequest: [] };
}

export const FriendRequestListResponse = {
  encode(
    message: FriendRequestListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.friendRequest) {
      FriendRequest.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): FriendRequestListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFriendRequestListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.friendRequest.push(
            FriendRequest.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FriendRequestListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      friendRequest: globalThis.Array.isArray(object?.friendRequest)
        ? object.friendRequest.map((e: any) => FriendRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: FriendRequestListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.friendRequest?.length) {
      obj.friendRequest = message.friendRequest.map(e =>
        FriendRequest.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FriendRequestListResponse>, I>>(
    base?: I,
  ): FriendRequestListResponse {
    return FriendRequestListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FriendRequestListResponse>, I>>(
    object: I,
  ): FriendRequestListResponse {
    const message = createBaseFriendRequestListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.friendRequest =
      object.friendRequest?.map(e => FriendRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFindFriendRequest(): FindFriendRequest {
  return { accountId: '', keyword: '' };
}

export const FindFriendRequest = {
  encode(
    message: FindFriendRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.keyword !== '') {
      writer.uint32(18).string(message.keyword);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindFriendRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindFriendRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.keyword = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindFriendRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      keyword: isSet(object.keyword) ? globalThis.String(object.keyword) : '',
    };
  },

  toJSON(message: FindFriendRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.keyword !== '') {
      obj.keyword = message.keyword;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindFriendRequest>, I>>(
    base?: I,
  ): FindFriendRequest {
    return FindFriendRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindFriendRequest>, I>>(
    object: I,
  ): FindFriendRequest {
    const message = createBaseFindFriendRequest();
    message.accountId = object.accountId ?? '';
    message.keyword = object.keyword ?? '';
    return message;
  },
};

function createBaseFriendListResponse(): FriendListResponse {
  return { success: false, errorMessage: '', friend: [] };
}

export const FriendListResponse = {
  encode(
    message: FriendListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.friend) {
      Friend.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): FriendListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFriendListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.friend.push(Friend.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FriendListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      friend: globalThis.Array.isArray(object?.friend)
        ? object.friend.map((e: any) => Friend.fromJSON(e))
        : [],
    };
  },

  toJSON(message: FriendListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.friend?.length) {
      obj.friend = message.friend.map(e => Friend.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FriendListResponse>, I>>(
    base?: I,
  ): FriendListResponse {
    return FriendListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FriendListResponse>, I>>(
    object: I,
  ): FriendListResponse {
    const message = createBaseFriendListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.friend = object.friend?.map(e => Friend.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBlockRequest(): BlockRequest {
  return { blockId: '', accountId: '', blockAccountId: '' };
}

export const BlockRequest = {
  encode(
    message: BlockRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.blockId !== '') {
      writer.uint32(10).string(message.blockId);
    }
    if (message.accountId !== '') {
      writer.uint32(18).string(message.accountId);
    }
    if (message.blockAccountId !== '') {
      writer.uint32(26).string(message.blockAccountId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.blockId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.blockAccountId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockRequest {
    return {
      blockId: isSet(object.blockId) ? globalThis.String(object.blockId) : '',
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      blockAccountId: isSet(object.blockAccountId)
        ? globalThis.String(object.blockAccountId)
        : '',
    };
  },

  toJSON(message: BlockRequest): unknown {
    const obj: any = {};
    if (message.blockId !== '') {
      obj.blockId = message.blockId;
    }
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.blockAccountId !== '') {
      obj.blockAccountId = message.blockAccountId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockRequest>, I>>(
    base?: I,
  ): BlockRequest {
    return BlockRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockRequest>, I>>(
    object: I,
  ): BlockRequest {
    const message = createBaseBlockRequest();
    message.blockId = object.blockId ?? '';
    message.accountId = object.accountId ?? '';
    message.blockAccountId = object.blockAccountId ?? '';
    return message;
  },
};

function createBaseBlockListResponse(): BlockListResponse {
  return { success: false, errorMessage: '', block: [] };
}

export const BlockListResponse = {
  encode(
    message: BlockListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    for (const v of message.block) {
      Block.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BlockListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.block.push(Block.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      block: globalThis.Array.isArray(object?.block)
        ? object.block.map((e: any) => Block.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BlockListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.block?.length) {
      obj.block = message.block.map(e => Block.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockListResponse>, I>>(
    base?: I,
  ): BlockListResponse {
    return BlockListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockListResponse>, I>>(
    object: I,
  ): BlockListResponse {
    const message = createBaseBlockListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.block = object.block?.map(e => Block.fromPartial(e)) || [];
    return message;
  },
};

function createBaseJoinFriendRequest(): JoinFriendRequest {
  return { accountId: '', code: '' };
}

export const JoinFriendRequest = {
  encode(
    message: JoinFriendRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.accountId !== '') {
      writer.uint32(10).string(message.accountId);
    }
    if (message.code !== '') {
      writer.uint32(18).string(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinFriendRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinFriendRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accountId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinFriendRequest {
    return {
      accountId: isSet(object.accountId)
        ? globalThis.String(object.accountId)
        : '',
      code: isSet(object.code) ? globalThis.String(object.code) : '',
    };
  },

  toJSON(message: JoinFriendRequest): unknown {
    const obj: any = {};
    if (message.accountId !== '') {
      obj.accountId = message.accountId;
    }
    if (message.code !== '') {
      obj.code = message.code;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinFriendRequest>, I>>(
    base?: I,
  ): JoinFriendRequest {
    return JoinFriendRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinFriendRequest>, I>>(
    object: I,
  ): JoinFriendRequest {
    const message = createBaseJoinFriendRequest();
    message.accountId = object.accountId ?? '';
    message.code = object.code ?? '';
    return message;
  },
};

function createBaseJoinFriendListResponse(): JoinFriendListResponse {
  return { success: false, errorMessage: '', count: 0, friend: [] };
}

export const JoinFriendListResponse = {
  encode(
    message: JoinFriendListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== '') {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.count !== 0) {
      writer.uint32(24).int32(message.count);
    }
    for (const v of message.friend) {
      Friend.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): JoinFriendListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinFriendListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.count = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.friend.push(Friend.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinFriendListResponse {
    return {
      success: isSet(object.success)
        ? globalThis.Boolean(object.success)
        : false,
      errorMessage: isSet(object.errorMessage)
        ? globalThis.String(object.errorMessage)
        : '',
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
      friend: globalThis.Array.isArray(object?.friend)
        ? object.friend.map((e: any) => Friend.fromJSON(e))
        : [],
    };
  },

  toJSON(message: JoinFriendListResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== '') {
      obj.errorMessage = message.errorMessage;
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    if (message.friend?.length) {
      obj.friend = message.friend.map(e => Friend.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinFriendListResponse>, I>>(
    base?: I,
  ): JoinFriendListResponse {
    return JoinFriendListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinFriendListResponse>, I>>(
    object: I,
  ): JoinFriendListResponse {
    const message = createBaseJoinFriendListResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? '';
    message.count = object.count ?? 0;
    message.friend = object.friend?.map(e => Friend.fromPartial(e)) || [];
    return message;
  },
};

export type FriendServiceService = typeof FriendServiceService;
export const FriendServiceService = {
  /** 내 프로필 새로고침 */
  refreshMyProfile: {
    path: '/user.FriendService/RefreshMyProfile',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RefreshMyProfileRequest) =>
      Buffer.from(RefreshMyProfileRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      RefreshMyProfileRequest.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
  /** 친구요청 */
  sendRequest: {
    path: '/user.FriendService/SendRequest',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SendReqRequest) =>
      Buffer.from(SendReqRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SendReqRequest.decode(value),
    responseSerialize: (value: FriendReqResponse) =>
      Buffer.from(FriendReqResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FriendReqResponse.decode(value),
  },
  /** 친구요청 취소 */
  cancelRequest: {
    path: '/user.FriendService/CancelRequest',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FriendReqRequest) =>
      Buffer.from(FriendReqRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FriendReqRequest.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
  /** 친구요청 거절 */
  rejectRequest: {
    path: '/user.FriendService/RejectRequest',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FriendReqRequest) =>
      Buffer.from(FriendReqRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FriendReqRequest.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
  /** 친구요청 수락 */
  acceptRequest: {
    path: '/user.FriendService/AcceptRequest',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FriendReqRequest) =>
      Buffer.from(FriendReqRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FriendReqRequest.decode(value),
    responseSerialize: (value: FriendShipResponse) =>
      Buffer.from(FriendShipResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FriendShipResponse.decode(value),
  },
  /** 친구 삭제 */
  removeFriend: {
    path: '/user.FriendService/RemoveFriend',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FriendShipRequest) =>
      Buffer.from(FriendShipRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FriendShipRequest.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
  /** 보낸 친구 요청 리스트 */
  sendRequestList: {
    path: '/user.FriendService/SendRequestList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListRequest) =>
      Buffer.from(ListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListRequest.decode(value),
    responseSerialize: (value: FriendRequestListResponse) =>
      Buffer.from(FriendRequestListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      FriendRequestListResponse.decode(value),
  },
  /** 받은 친구 요청 리스트 */
  receiveRequestList: {
    path: '/user.FriendService/ReceiveRequestList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListRequest) =>
      Buffer.from(ListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListRequest.decode(value),
    responseSerialize: (value: FriendRequestListResponse) =>
      Buffer.from(FriendRequestListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      FriendRequestListResponse.decode(value),
  },
  /** 친구 리스트 */
  friendList: {
    path: '/user.FriendService/FriendList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListRequest) =>
      Buffer.from(ListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListRequest.decode(value),
    responseSerialize: (value: FriendListResponse) =>
      Buffer.from(FriendListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FriendListResponse.decode(value),
  },
  /** 친구 찾기 */
  findFriend: {
    path: '/user.FriendService/FindFriend',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindFriendRequest) =>
      Buffer.from(FindFriendRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FindFriendRequest.decode(value),
    responseSerialize: (value: FriendListResponse) =>
      Buffer.from(FriendListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FriendListResponse.decode(value),
  },
  /** 차단 리스트 */
  blockList: {
    path: '/user.FriendService/BlockList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListRequest) =>
      Buffer.from(ListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListRequest.decode(value),
    responseSerialize: (value: BlockListResponse) =>
      Buffer.from(BlockListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => BlockListResponse.decode(value),
  },
  /** 차단 */
  block: {
    path: '/user.FriendService/Block',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: BlockRequest) =>
      Buffer.from(BlockRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => BlockRequest.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
  /** 차단 해제 */
  unblock: {
    path: '/user.FriendService/Unblock',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: BlockRequest) =>
      Buffer.from(BlockRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => BlockRequest.decode(value),
    responseSerialize: (value: DefaultResponse) =>
      Buffer.from(DefaultResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DefaultResponse.decode(value),
  },
  /** 초대한 친구 추가 */
  joinedFriend: {
    path: '/user.FriendService/JoinedFriend',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: JoinFriendRequest) =>
      Buffer.from(JoinFriendRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => JoinFriendRequest.decode(value),
    responseSerialize: (value: FriendShipResponse) =>
      Buffer.from(FriendShipResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FriendShipResponse.decode(value),
  },
  /** 초대로 추가된 친구 리스트 */
  joinedFriendList: {
    path: '/user.FriendService/JoinedFriendList',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListRequest) =>
      Buffer.from(ListRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListRequest.decode(value),
    responseSerialize: (value: JoinFriendListResponse) =>
      Buffer.from(JoinFriendListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) =>
      JoinFriendListResponse.decode(value),
  },
} as const;

export interface FriendServiceServer extends UntypedServiceImplementation {
  /** 내 프로필 새로고침 */
  refreshMyProfile: handleUnaryCall<RefreshMyProfileRequest, DefaultResponse>;
  /** 친구요청 */
  sendRequest: handleUnaryCall<SendReqRequest, FriendReqResponse>;
  /** 친구요청 취소 */
  cancelRequest: handleUnaryCall<FriendReqRequest, DefaultResponse>;
  /** 친구요청 거절 */
  rejectRequest: handleUnaryCall<FriendReqRequest, DefaultResponse>;
  /** 친구요청 수락 */
  acceptRequest: handleUnaryCall<FriendReqRequest, FriendShipResponse>;
  /** 친구 삭제 */
  removeFriend: handleUnaryCall<FriendShipRequest, DefaultResponse>;
  /** 보낸 친구 요청 리스트 */
  sendRequestList: handleUnaryCall<ListRequest, FriendRequestListResponse>;
  /** 받은 친구 요청 리스트 */
  receiveRequestList: handleUnaryCall<ListRequest, FriendRequestListResponse>;
  /** 친구 리스트 */
  friendList: handleUnaryCall<ListRequest, FriendListResponse>;
  /** 친구 찾기 */
  findFriend: handleUnaryCall<FindFriendRequest, FriendListResponse>;
  /** 차단 리스트 */
  blockList: handleUnaryCall<ListRequest, BlockListResponse>;
  /** 차단 */
  block: handleUnaryCall<BlockRequest, DefaultResponse>;
  /** 차단 해제 */
  unblock: handleUnaryCall<BlockRequest, DefaultResponse>;
  /** 초대한 친구 추가 */
  joinedFriend: handleUnaryCall<JoinFriendRequest, FriendShipResponse>;
  /** 초대로 추가된 친구 리스트 */
  joinedFriendList: handleUnaryCall<ListRequest, JoinFriendListResponse>;
}

export interface FriendServiceClient extends Client {
  /** 내 프로필 새로고침 */
  refreshMyProfile(
    request: RefreshMyProfileRequest,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  refreshMyProfile(
    request: RefreshMyProfileRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  refreshMyProfile(
    request: RefreshMyProfileRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  /** 친구요청 */
  sendRequest(
    request: SendReqRequest,
    callback: (error: ServiceError | null, response: FriendReqResponse) => void,
  ): ClientUnaryCall;
  sendRequest(
    request: SendReqRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: FriendReqResponse) => void,
  ): ClientUnaryCall;
  sendRequest(
    request: SendReqRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: FriendReqResponse) => void,
  ): ClientUnaryCall;
  /** 친구요청 취소 */
  cancelRequest(
    request: FriendReqRequest,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  cancelRequest(
    request: FriendReqRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  cancelRequest(
    request: FriendReqRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  /** 친구요청 거절 */
  rejectRequest(
    request: FriendReqRequest,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  rejectRequest(
    request: FriendReqRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  rejectRequest(
    request: FriendReqRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  /** 친구요청 수락 */
  acceptRequest(
    request: FriendReqRequest,
    callback: (
      error: ServiceError | null,
      response: FriendShipResponse,
    ) => void,
  ): ClientUnaryCall;
  acceptRequest(
    request: FriendReqRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: FriendShipResponse,
    ) => void,
  ): ClientUnaryCall;
  acceptRequest(
    request: FriendReqRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: FriendShipResponse,
    ) => void,
  ): ClientUnaryCall;
  /** 친구 삭제 */
  removeFriend(
    request: FriendShipRequest,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  removeFriend(
    request: FriendShipRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  removeFriend(
    request: FriendShipRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  /** 보낸 친구 요청 리스트 */
  sendRequestList(
    request: ListRequest,
    callback: (
      error: ServiceError | null,
      response: FriendRequestListResponse,
    ) => void,
  ): ClientUnaryCall;
  sendRequestList(
    request: ListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: FriendRequestListResponse,
    ) => void,
  ): ClientUnaryCall;
  sendRequestList(
    request: ListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: FriendRequestListResponse,
    ) => void,
  ): ClientUnaryCall;
  /** 받은 친구 요청 리스트 */
  receiveRequestList(
    request: ListRequest,
    callback: (
      error: ServiceError | null,
      response: FriendRequestListResponse,
    ) => void,
  ): ClientUnaryCall;
  receiveRequestList(
    request: ListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: FriendRequestListResponse,
    ) => void,
  ): ClientUnaryCall;
  receiveRequestList(
    request: ListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: FriendRequestListResponse,
    ) => void,
  ): ClientUnaryCall;
  /** 친구 리스트 */
  friendList(
    request: ListRequest,
    callback: (
      error: ServiceError | null,
      response: FriendListResponse,
    ) => void,
  ): ClientUnaryCall;
  friendList(
    request: ListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: FriendListResponse,
    ) => void,
  ): ClientUnaryCall;
  friendList(
    request: ListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: FriendListResponse,
    ) => void,
  ): ClientUnaryCall;
  /** 친구 찾기 */
  findFriend(
    request: FindFriendRequest,
    callback: (
      error: ServiceError | null,
      response: FriendListResponse,
    ) => void,
  ): ClientUnaryCall;
  findFriend(
    request: FindFriendRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: FriendListResponse,
    ) => void,
  ): ClientUnaryCall;
  findFriend(
    request: FindFriendRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: FriendListResponse,
    ) => void,
  ): ClientUnaryCall;
  /** 차단 리스트 */
  blockList(
    request: ListRequest,
    callback: (error: ServiceError | null, response: BlockListResponse) => void,
  ): ClientUnaryCall;
  blockList(
    request: ListRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: BlockListResponse) => void,
  ): ClientUnaryCall;
  blockList(
    request: ListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: BlockListResponse) => void,
  ): ClientUnaryCall;
  /** 차단 */
  block(
    request: BlockRequest,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  block(
    request: BlockRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  block(
    request: BlockRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  /** 차단 해제 */
  unblock(
    request: BlockRequest,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  unblock(
    request: BlockRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  unblock(
    request: BlockRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DefaultResponse) => void,
  ): ClientUnaryCall;
  /** 초대한 친구 추가 */
  joinedFriend(
    request: JoinFriendRequest,
    callback: (
      error: ServiceError | null,
      response: FriendShipResponse,
    ) => void,
  ): ClientUnaryCall;
  joinedFriend(
    request: JoinFriendRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: FriendShipResponse,
    ) => void,
  ): ClientUnaryCall;
  joinedFriend(
    request: JoinFriendRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: FriendShipResponse,
    ) => void,
  ): ClientUnaryCall;
  /** 초대로 추가된 친구 리스트 */
  joinedFriendList(
    request: ListRequest,
    callback: (
      error: ServiceError | null,
      response: JoinFriendListResponse,
    ) => void,
  ): ClientUnaryCall;
  joinedFriendList(
    request: ListRequest,
    metadata: Metadata,
    callback: (
      error: ServiceError | null,
      response: JoinFriendListResponse,
    ) => void,
  ): ClientUnaryCall;
  joinedFriendList(
    request: ListRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (
      error: ServiceError | null,
      response: JoinFriendListResponse,
    ) => void,
  ): ClientUnaryCall;
}

export const FriendServiceClient = makeGenericClientConstructor(
  FriendServiceService,
  'user.FriendService',
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): FriendServiceClient;
  service: typeof FriendServiceService;
  serviceName: string;
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
