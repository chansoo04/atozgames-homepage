/**
 * @fileoverview gRPC-Web generated client stub for admin
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: groupPermission.proto

/* eslint-disable */
// @ts-nocheck

const grpc = {};
grpc.web = require('grpc-web');

var admin$common_pb = require('./admin-common_pb.js');
const proto = {};
proto.admin = require('./groupPermission_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.admin.AdminGroupPermissionServiceClient = function (
  hostname,
  credentials,
  options,
) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.admin.AdminGroupPermissionServicePromiseClient = function (
  hostname,
  credentials,
  options,
) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.GetGroupPermissionListRequest,
 *   !proto.admin.GetGroupPermissionListResponse>}
 */
const methodDescriptor_AdminGroupPermissionService_GetGroupPermissionList =
  new grpc.web.MethodDescriptor(
    '/admin.AdminGroupPermissionService/GetGroupPermissionList',
    grpc.web.MethodType.UNARY,
    proto.admin.GetGroupPermissionListRequest,
    proto.admin.GetGroupPermissionListResponse,
    /**
     * @param {!proto.admin.GetGroupPermissionListRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.GetGroupPermissionListResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.GetGroupPermissionListRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.GetGroupPermissionListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.GetGroupPermissionListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminGroupPermissionServiceClient.prototype.getGroupPermissionList =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/GetGroupPermissionList',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_GetGroupPermissionList,
      callback,
    );
  };

/**
 * @param {!proto.admin.GetGroupPermissionListRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.GetGroupPermissionListResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminGroupPermissionServicePromiseClient.prototype.getGroupPermissionList =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/GetGroupPermissionList',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_GetGroupPermissionList,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.GetGroupPermissionInfoRequest,
 *   !proto.admin.GetGroupPermissionInfoResponse>}
 */
const methodDescriptor_AdminGroupPermissionService_GetGroupPermissionInfo =
  new grpc.web.MethodDescriptor(
    '/admin.AdminGroupPermissionService/GetGroupPermissionInfo',
    grpc.web.MethodType.UNARY,
    proto.admin.GetGroupPermissionInfoRequest,
    proto.admin.GetGroupPermissionInfoResponse,
    /**
     * @param {!proto.admin.GetGroupPermissionInfoRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.GetGroupPermissionInfoResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.GetGroupPermissionInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.GetGroupPermissionInfoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.GetGroupPermissionInfoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminGroupPermissionServiceClient.prototype.getGroupPermissionInfo =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/GetGroupPermissionInfo',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_GetGroupPermissionInfo,
      callback,
    );
  };

/**
 * @param {!proto.admin.GetGroupPermissionInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.GetGroupPermissionInfoResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminGroupPermissionServicePromiseClient.prototype.getGroupPermissionInfo =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/GetGroupPermissionInfo',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_GetGroupPermissionInfo,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.CreateGroupPermissionRequest,
 *   !proto.admin.CreateGroupPermissionResponse>}
 */
const methodDescriptor_AdminGroupPermissionService_CreateGroupPermission =
  new grpc.web.MethodDescriptor(
    '/admin.AdminGroupPermissionService/CreateGroupPermission',
    grpc.web.MethodType.UNARY,
    proto.admin.CreateGroupPermissionRequest,
    proto.admin.CreateGroupPermissionResponse,
    /**
     * @param {!proto.admin.CreateGroupPermissionRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.CreateGroupPermissionResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.CreateGroupPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.CreateGroupPermissionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.CreateGroupPermissionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminGroupPermissionServiceClient.prototype.createGroupPermission =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/CreateGroupPermission',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_CreateGroupPermission,
      callback,
    );
  };

/**
 * @param {!proto.admin.CreateGroupPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.CreateGroupPermissionResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminGroupPermissionServicePromiseClient.prototype.createGroupPermission =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/CreateGroupPermission',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_CreateGroupPermission,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.UpdateGroupPermissionRequest,
 *   !proto.admin.UpdateGroupPermissionResponse>}
 */
const methodDescriptor_AdminGroupPermissionService_UpdateGroupPermission =
  new grpc.web.MethodDescriptor(
    '/admin.AdminGroupPermissionService/UpdateGroupPermission',
    grpc.web.MethodType.UNARY,
    proto.admin.UpdateGroupPermissionRequest,
    proto.admin.UpdateGroupPermissionResponse,
    /**
     * @param {!proto.admin.UpdateGroupPermissionRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.UpdateGroupPermissionResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.UpdateGroupPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.UpdateGroupPermissionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.UpdateGroupPermissionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminGroupPermissionServiceClient.prototype.updateGroupPermission =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/UpdateGroupPermission',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_UpdateGroupPermission,
      callback,
    );
  };

/**
 * @param {!proto.admin.UpdateGroupPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.UpdateGroupPermissionResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminGroupPermissionServicePromiseClient.prototype.updateGroupPermission =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/UpdateGroupPermission',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_UpdateGroupPermission,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.DeleteGroupPermissionRequest,
 *   !proto.admin.DeleteGroupPermissionResponse>}
 */
const methodDescriptor_AdminGroupPermissionService_DeleteGroupPermission =
  new grpc.web.MethodDescriptor(
    '/admin.AdminGroupPermissionService/DeleteGroupPermission',
    grpc.web.MethodType.UNARY,
    proto.admin.DeleteGroupPermissionRequest,
    proto.admin.DeleteGroupPermissionResponse,
    /**
     * @param {!proto.admin.DeleteGroupPermissionRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.DeleteGroupPermissionResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.DeleteGroupPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.DeleteGroupPermissionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.DeleteGroupPermissionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminGroupPermissionServiceClient.prototype.deleteGroupPermission =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/DeleteGroupPermission',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_DeleteGroupPermission,
      callback,
    );
  };

/**
 * @param {!proto.admin.DeleteGroupPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.DeleteGroupPermissionResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminGroupPermissionServicePromiseClient.prototype.deleteGroupPermission =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/DeleteGroupPermission',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_DeleteGroupPermission,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.SetMenuListOnGroupPermissionRequest,
 *   !proto.admin.SetMenuListOnGroupPermissionResponse>}
 */
const methodDescriptor_AdminGroupPermissionService_SetMenuListOnGroupPermission =
  new grpc.web.MethodDescriptor(
    '/admin.AdminGroupPermissionService/SetMenuListOnGroupPermission',
    grpc.web.MethodType.UNARY,
    proto.admin.SetMenuListOnGroupPermissionRequest,
    proto.admin.SetMenuListOnGroupPermissionResponse,
    /**
     * @param {!proto.admin.SetMenuListOnGroupPermissionRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.SetMenuListOnGroupPermissionResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.SetMenuListOnGroupPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.SetMenuListOnGroupPermissionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.SetMenuListOnGroupPermissionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminGroupPermissionServiceClient.prototype.setMenuListOnGroupPermission =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/SetMenuListOnGroupPermission',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_SetMenuListOnGroupPermission,
      callback,
    );
  };

/**
 * @param {!proto.admin.SetMenuListOnGroupPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.SetMenuListOnGroupPermissionResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminGroupPermissionServicePromiseClient.prototype.setMenuListOnGroupPermission =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/SetMenuListOnGroupPermission',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_SetMenuListOnGroupPermission,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.GetMenuListOnGroupPermissionRequest,
 *   !proto.admin.GetMenuListOnGroupPermissionResponse>}
 */
const methodDescriptor_AdminGroupPermissionService_GetMenuListOnGroupPermission =
  new grpc.web.MethodDescriptor(
    '/admin.AdminGroupPermissionService/GetMenuListOnGroupPermission',
    grpc.web.MethodType.UNARY,
    proto.admin.GetMenuListOnGroupPermissionRequest,
    proto.admin.GetMenuListOnGroupPermissionResponse,
    /**
     * @param {!proto.admin.GetMenuListOnGroupPermissionRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.GetMenuListOnGroupPermissionResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.GetMenuListOnGroupPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.GetMenuListOnGroupPermissionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.GetMenuListOnGroupPermissionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminGroupPermissionServiceClient.prototype.getMenuListOnGroupPermission =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/GetMenuListOnGroupPermission',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_GetMenuListOnGroupPermission,
      callback,
    );
  };

/**
 * @param {!proto.admin.GetMenuListOnGroupPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.GetMenuListOnGroupPermissionResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminGroupPermissionServicePromiseClient.prototype.getMenuListOnGroupPermission =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/GetMenuListOnGroupPermission',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_GetMenuListOnGroupPermission,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.SetGroupPermissionsOnUserRequest,
 *   !proto.admin.SetGroupPermissionsOnUserResponse>}
 */
const methodDescriptor_AdminGroupPermissionService_SetGroupPermissionsOnUser =
  new grpc.web.MethodDescriptor(
    '/admin.AdminGroupPermissionService/SetGroupPermissionsOnUser',
    grpc.web.MethodType.UNARY,
    proto.admin.SetGroupPermissionsOnUserRequest,
    proto.admin.SetGroupPermissionsOnUserResponse,
    /**
     * @param {!proto.admin.SetGroupPermissionsOnUserRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.SetGroupPermissionsOnUserResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.SetGroupPermissionsOnUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.SetGroupPermissionsOnUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.SetGroupPermissionsOnUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminGroupPermissionServiceClient.prototype.setGroupPermissionsOnUser =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/SetGroupPermissionsOnUser',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_SetGroupPermissionsOnUser,
      callback,
    );
  };

/**
 * @param {!proto.admin.SetGroupPermissionsOnUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.SetGroupPermissionsOnUserResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminGroupPermissionServicePromiseClient.prototype.setGroupPermissionsOnUser =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/SetGroupPermissionsOnUser',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_SetGroupPermissionsOnUser,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.SetUserListOnGroupPermissionRequest,
 *   !proto.admin.SetUserListOnGroupPermissionResponse>}
 */
const methodDescriptor_AdminGroupPermissionService_SetUserListOnGroupPermission =
  new grpc.web.MethodDescriptor(
    '/admin.AdminGroupPermissionService/SetUserListOnGroupPermission',
    grpc.web.MethodType.UNARY,
    proto.admin.SetUserListOnGroupPermissionRequest,
    proto.admin.SetUserListOnGroupPermissionResponse,
    /**
     * @param {!proto.admin.SetUserListOnGroupPermissionRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.SetUserListOnGroupPermissionResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.SetUserListOnGroupPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.SetUserListOnGroupPermissionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.SetUserListOnGroupPermissionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminGroupPermissionServiceClient.prototype.setUserListOnGroupPermission =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/SetUserListOnGroupPermission',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_SetUserListOnGroupPermission,
      callback,
    );
  };

/**
 * @param {!proto.admin.SetUserListOnGroupPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.SetUserListOnGroupPermissionResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminGroupPermissionServicePromiseClient.prototype.setUserListOnGroupPermission =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/SetUserListOnGroupPermission',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_SetUserListOnGroupPermission,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.InsertGroupPermissionToUserListRequest,
 *   !proto.admin.InsertGroupPermissionToUserListResponse>}
 */
const methodDescriptor_AdminGroupPermissionService_InsertGroupPermissionToUserList =
  new grpc.web.MethodDescriptor(
    '/admin.AdminGroupPermissionService/InsertGroupPermissionToUserList',
    grpc.web.MethodType.UNARY,
    proto.admin.InsertGroupPermissionToUserListRequest,
    proto.admin.InsertGroupPermissionToUserListResponse,
    /**
     * @param {!proto.admin.InsertGroupPermissionToUserListRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.InsertGroupPermissionToUserListResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.InsertGroupPermissionToUserListRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.InsertGroupPermissionToUserListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.InsertGroupPermissionToUserListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminGroupPermissionServiceClient.prototype.insertGroupPermissionToUserList =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/InsertGroupPermissionToUserList',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_InsertGroupPermissionToUserList,
      callback,
    );
  };

/**
 * @param {!proto.admin.InsertGroupPermissionToUserListRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.InsertGroupPermissionToUserListResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminGroupPermissionServicePromiseClient.prototype.insertGroupPermissionToUserList =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/InsertGroupPermissionToUserList',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_InsertGroupPermissionToUserList,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.DeleteGroupPermissionOfUserListRequest,
 *   !proto.admin.DeleteGroupPermissionOfUserListResponse>}
 */
const methodDescriptor_AdminGroupPermissionService_DeleteGroupPermissionOfUserList =
  new grpc.web.MethodDescriptor(
    '/admin.AdminGroupPermissionService/DeleteGroupPermissionOfUserList',
    grpc.web.MethodType.UNARY,
    proto.admin.DeleteGroupPermissionOfUserListRequest,
    proto.admin.DeleteGroupPermissionOfUserListResponse,
    /**
     * @param {!proto.admin.DeleteGroupPermissionOfUserListRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.DeleteGroupPermissionOfUserListResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.DeleteGroupPermissionOfUserListRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.DeleteGroupPermissionOfUserListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.DeleteGroupPermissionOfUserListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminGroupPermissionServiceClient.prototype.deleteGroupPermissionOfUserList =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/DeleteGroupPermissionOfUserList',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_DeleteGroupPermissionOfUserList,
      callback,
    );
  };

/**
 * @param {!proto.admin.DeleteGroupPermissionOfUserListRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.DeleteGroupPermissionOfUserListResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminGroupPermissionServicePromiseClient.prototype.deleteGroupPermissionOfUserList =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/DeleteGroupPermissionOfUserList',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_DeleteGroupPermissionOfUserList,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.GetGroupPermissionListOnUserRequest,
 *   !proto.admin.GetGroupPermissionListOnUserResponse>}
 */
const methodDescriptor_AdminGroupPermissionService_GetGroupPermissionListOnUser =
  new grpc.web.MethodDescriptor(
    '/admin.AdminGroupPermissionService/GetGroupPermissionListOnUser',
    grpc.web.MethodType.UNARY,
    proto.admin.GetGroupPermissionListOnUserRequest,
    proto.admin.GetGroupPermissionListOnUserResponse,
    /**
     * @param {!proto.admin.GetGroupPermissionListOnUserRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.GetGroupPermissionListOnUserResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.GetGroupPermissionListOnUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.GetGroupPermissionListOnUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.GetGroupPermissionListOnUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminGroupPermissionServiceClient.prototype.getGroupPermissionListOnUser =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/GetGroupPermissionListOnUser',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_GetGroupPermissionListOnUser,
      callback,
    );
  };

/**
 * @param {!proto.admin.GetGroupPermissionListOnUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.GetGroupPermissionListOnUserResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminGroupPermissionServicePromiseClient.prototype.getGroupPermissionListOnUser =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/GetGroupPermissionListOnUser',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_GetGroupPermissionListOnUser,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.GetUserListWithGroupPermissionRequest,
 *   !proto.admin.GetUserListWithGroupPermissionResponse>}
 */
const methodDescriptor_AdminGroupPermissionService_GetUserListWithGroupPermission =
  new grpc.web.MethodDescriptor(
    '/admin.AdminGroupPermissionService/GetUserListWithGroupPermission',
    grpc.web.MethodType.UNARY,
    proto.admin.GetUserListWithGroupPermissionRequest,
    proto.admin.GetUserListWithGroupPermissionResponse,
    /**
     * @param {!proto.admin.GetUserListWithGroupPermissionRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.GetUserListWithGroupPermissionResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.GetUserListWithGroupPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.GetUserListWithGroupPermissionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.GetUserListWithGroupPermissionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminGroupPermissionServiceClient.prototype.getUserListWithGroupPermission =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/GetUserListWithGroupPermission',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_GetUserListWithGroupPermission,
      callback,
    );
  };

/**
 * @param {!proto.admin.GetUserListWithGroupPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.GetUserListWithGroupPermissionResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminGroupPermissionServicePromiseClient.prototype.getUserListWithGroupPermission =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/GetUserListWithGroupPermission',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_GetUserListWithGroupPermission,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.GetUserListWithUserPermissionRequest,
 *   !proto.admin.GetUserListWithUserPermissionResponse>}
 */
const methodDescriptor_AdminGroupPermissionService_GetUserListWithUserPermission =
  new grpc.web.MethodDescriptor(
    '/admin.AdminGroupPermissionService/GetUserListWithUserPermission',
    grpc.web.MethodType.UNARY,
    proto.admin.GetUserListWithUserPermissionRequest,
    proto.admin.GetUserListWithUserPermissionResponse,
    /**
     * @param {!proto.admin.GetUserListWithUserPermissionRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.GetUserListWithUserPermissionResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.GetUserListWithUserPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.GetUserListWithUserPermissionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.GetUserListWithUserPermissionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminGroupPermissionServiceClient.prototype.getUserListWithUserPermission =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/GetUserListWithUserPermission',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_GetUserListWithUserPermission,
      callback,
    );
  };

/**
 * @param {!proto.admin.GetUserListWithUserPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.GetUserListWithUserPermissionResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminGroupPermissionServicePromiseClient.prototype.getUserListWithUserPermission =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/GetUserListWithUserPermission',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_GetUserListWithUserPermission,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.SetUserPermissionListOnUserRequest,
 *   !proto.admin.SetUserPermissionListOnUserResponse>}
 */
const methodDescriptor_AdminGroupPermissionService_SetUserPermissionListOnUser =
  new grpc.web.MethodDescriptor(
    '/admin.AdminGroupPermissionService/SetUserPermissionListOnUser',
    grpc.web.MethodType.UNARY,
    proto.admin.SetUserPermissionListOnUserRequest,
    proto.admin.SetUserPermissionListOnUserResponse,
    /**
     * @param {!proto.admin.SetUserPermissionListOnUserRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.SetUserPermissionListOnUserResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.SetUserPermissionListOnUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.SetUserPermissionListOnUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.SetUserPermissionListOnUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminGroupPermissionServiceClient.prototype.setUserPermissionListOnUser =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/SetUserPermissionListOnUser',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_SetUserPermissionListOnUser,
      callback,
    );
  };

/**
 * @param {!proto.admin.SetUserPermissionListOnUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.SetUserPermissionListOnUserResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminGroupPermissionServicePromiseClient.prototype.setUserPermissionListOnUser =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/SetUserPermissionListOnUser',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_SetUserPermissionListOnUser,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.GetUserListWithoutMenuPermissionRequest,
 *   !proto.admin.GetUserListWithoutMenuPermissionResponse>}
 */
const methodDescriptor_AdminGroupPermissionService_GetUserListWithoutMenuPermission =
  new grpc.web.MethodDescriptor(
    '/admin.AdminGroupPermissionService/GetUserListWithoutMenuPermission',
    grpc.web.MethodType.UNARY,
    proto.admin.GetUserListWithoutMenuPermissionRequest,
    proto.admin.GetUserListWithoutMenuPermissionResponse,
    /**
     * @param {!proto.admin.GetUserListWithoutMenuPermissionRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.GetUserListWithoutMenuPermissionResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.GetUserListWithoutMenuPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.GetUserListWithoutMenuPermissionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.GetUserListWithoutMenuPermissionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminGroupPermissionServiceClient.prototype.getUserListWithoutMenuPermission =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/GetUserListWithoutMenuPermission',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_GetUserListWithoutMenuPermission,
      callback,
    );
  };

/**
 * @param {!proto.admin.GetUserListWithoutMenuPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.GetUserListWithoutMenuPermissionResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminGroupPermissionServicePromiseClient.prototype.getUserListWithoutMenuPermission =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ +
        '/admin.AdminGroupPermissionService/GetUserListWithoutMenuPermission',
      request,
      metadata || {},
      methodDescriptor_AdminGroupPermissionService_GetUserListWithoutMenuPermission,
    );
  };

module.exports = proto.admin;
