/**
 * @fileoverview gRPC-Web generated client stub for admin
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: userPermission.proto

/* eslint-disable */
// @ts-nocheck

const grpc = {};
grpc.web = require('grpc-web');

var admin$common_pb = require('./admin-common_pb.js');
const proto = {};
proto.admin = require('./userPermission_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.admin.AdminUserPermissionServiceClient = function (
  hostname,
  credentials,
  options,
) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.admin.AdminUserPermissionServicePromiseClient = function (
  hostname,
  credentials,
  options,
) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.GetUserPermissionListInfoRequest,
 *   !proto.admin.GetUserPermissionListInfoResponse>}
 */
const methodDescriptor_AdminUserPermissionService_GetUserPermissionListInfo =
  new grpc.web.MethodDescriptor(
    '/admin.AdminUserPermissionService/GetUserPermissionListInfo',
    grpc.web.MethodType.UNARY,
    proto.admin.GetUserPermissionListInfoRequest,
    proto.admin.GetUserPermissionListInfoResponse,
    /**
     * @param {!proto.admin.GetUserPermissionListInfoRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.GetUserPermissionListInfoResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.GetUserPermissionListInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.GetUserPermissionListInfoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.GetUserPermissionListInfoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserPermissionServiceClient.prototype.getUserPermissionListInfo =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ +
        '/admin.AdminUserPermissionService/GetUserPermissionListInfo',
      request,
      metadata || {},
      methodDescriptor_AdminUserPermissionService_GetUserPermissionListInfo,
      callback,
    );
  };

/**
 * @param {!proto.admin.GetUserPermissionListInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.GetUserPermissionListInfoResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminUserPermissionServicePromiseClient.prototype.getUserPermissionListInfo =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ +
        '/admin.AdminUserPermissionService/GetUserPermissionListInfo',
      request,
      metadata || {},
      methodDescriptor_AdminUserPermissionService_GetUserPermissionListInfo,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.CreateUserPermissionRequest,
 *   !proto.admin.CreateUserPermissionResponse>}
 */
const methodDescriptor_AdminUserPermissionService_CreateUserPermission =
  new grpc.web.MethodDescriptor(
    '/admin.AdminUserPermissionService/CreateUserPermission',
    grpc.web.MethodType.UNARY,
    proto.admin.CreateUserPermissionRequest,
    proto.admin.CreateUserPermissionResponse,
    /**
     * @param {!proto.admin.CreateUserPermissionRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.CreateUserPermissionResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.CreateUserPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.CreateUserPermissionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.CreateUserPermissionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserPermissionServiceClient.prototype.createUserPermission =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ + '/admin.AdminUserPermissionService/CreateUserPermission',
      request,
      metadata || {},
      methodDescriptor_AdminUserPermissionService_CreateUserPermission,
      callback,
    );
  };

/**
 * @param {!proto.admin.CreateUserPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.CreateUserPermissionResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminUserPermissionServicePromiseClient.prototype.createUserPermission =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ + '/admin.AdminUserPermissionService/CreateUserPermission',
      request,
      metadata || {},
      methodDescriptor_AdminUserPermissionService_CreateUserPermission,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.DeleteUserPermissionRequest,
 *   !proto.admin.DeleteUserPermissionResponse>}
 */
const methodDescriptor_AdminUserPermissionService_DeleteUserPermission =
  new grpc.web.MethodDescriptor(
    '/admin.AdminUserPermissionService/DeleteUserPermission',
    grpc.web.MethodType.UNARY,
    proto.admin.DeleteUserPermissionRequest,
    proto.admin.DeleteUserPermissionResponse,
    /**
     * @param {!proto.admin.DeleteUserPermissionRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.DeleteUserPermissionResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.DeleteUserPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.DeleteUserPermissionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.DeleteUserPermissionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserPermissionServiceClient.prototype.deleteUserPermission =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ + '/admin.AdminUserPermissionService/DeleteUserPermission',
      request,
      metadata || {},
      methodDescriptor_AdminUserPermissionService_DeleteUserPermission,
      callback,
    );
  };

/**
 * @param {!proto.admin.DeleteUserPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.DeleteUserPermissionResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminUserPermissionServicePromiseClient.prototype.deleteUserPermission =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ + '/admin.AdminUserPermissionService/DeleteUserPermission',
      request,
      metadata || {},
      methodDescriptor_AdminUserPermissionService_DeleteUserPermission,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.GetUserListWithoutUserPermissionRequest,
 *   !proto.admin.GetUserListWithoutUserPermissionResponse>}
 */
const methodDescriptor_AdminUserPermissionService_GetUserListWithoutUserPermission =
  new grpc.web.MethodDescriptor(
    '/admin.AdminUserPermissionService/GetUserListWithoutUserPermission',
    grpc.web.MethodType.UNARY,
    proto.admin.GetUserListWithoutUserPermissionRequest,
    proto.admin.GetUserListWithoutUserPermissionResponse,
    /**
     * @param {!proto.admin.GetUserListWithoutUserPermissionRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.GetUserListWithoutUserPermissionResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.GetUserListWithoutUserPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.GetUserListWithoutUserPermissionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.GetUserListWithoutUserPermissionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserPermissionServiceClient.prototype.getUserListWithoutUserPermission =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ +
        '/admin.AdminUserPermissionService/GetUserListWithoutUserPermission',
      request,
      metadata || {},
      methodDescriptor_AdminUserPermissionService_GetUserListWithoutUserPermission,
      callback,
    );
  };

/**
 * @param {!proto.admin.GetUserListWithoutUserPermissionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.GetUserListWithoutUserPermissionResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminUserPermissionServicePromiseClient.prototype.getUserListWithoutUserPermission =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ +
        '/admin.AdminUserPermissionService/GetUserListWithoutUserPermission',
      request,
      metadata || {},
      methodDescriptor_AdminUserPermissionService_GetUserListWithoutUserPermission,
    );
  };

module.exports = proto.admin;
