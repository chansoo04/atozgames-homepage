/**
 * @fileoverview gRPC-Web generated client stub for admin
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: user.proto

/* eslint-disable */
// @ts-nocheck

const grpc = {};
grpc.web = require('grpc-web');

var admin$common_pb = require('./admin-common_pb.js');
const proto = {};
proto.admin = require('./user_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.admin.AdminUserServiceClient = function (hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.admin.AdminUserServicePromiseClient = function (
  hostname,
  credentials,
  options,
) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.SignUpRequest,
 *   !proto.admin.SignUpResponse>}
 */
const methodDescriptor_AdminUserService_SignUp = new grpc.web.MethodDescriptor(
  '/admin.AdminUserService/SignUp',
  grpc.web.MethodType.UNARY,
  proto.admin.SignUpRequest,
  proto.admin.SignUpResponse,
  /**
   * @param {!proto.admin.SignUpRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.admin.SignUpResponse.deserializeBinary,
);

/**
 * @param {!proto.admin.SignUpRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.SignUpResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.SignUpResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserServiceClient.prototype.signUp = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/admin.AdminUserService/SignUp',
    request,
    metadata || {},
    methodDescriptor_AdminUserService_SignUp,
    callback,
  );
};

/**
 * @param {!proto.admin.SignUpRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.SignUpResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminUserServicePromiseClient.prototype.signUp = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/admin.AdminUserService/SignUp',
    request,
    metadata || {},
    methodDescriptor_AdminUserService_SignUp,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.SignInRequest,
 *   !proto.admin.SignInResponse>}
 */
const methodDescriptor_AdminUserService_SignIn = new grpc.web.MethodDescriptor(
  '/admin.AdminUserService/SignIn',
  grpc.web.MethodType.UNARY,
  proto.admin.SignInRequest,
  proto.admin.SignInResponse,
  /**
   * @param {!proto.admin.SignInRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.admin.SignInResponse.deserializeBinary,
);

/**
 * @param {!proto.admin.SignInRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.SignInResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.SignInResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserServiceClient.prototype.signIn = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/admin.AdminUserService/SignIn',
    request,
    metadata || {},
    methodDescriptor_AdminUserService_SignIn,
    callback,
  );
};

/**
 * @param {!proto.admin.SignInRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.SignInResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminUserServicePromiseClient.prototype.signIn = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/admin.AdminUserService/SignIn',
    request,
    metadata || {},
    methodDescriptor_AdminUserService_SignIn,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.SendEmailAuthCodeRequest,
 *   !proto.admin.SendEmailAuthCodeResponse>}
 */
const methodDescriptor_AdminUserService_SendEmailAuthCode =
  new grpc.web.MethodDescriptor(
    '/admin.AdminUserService/SendEmailAuthCode',
    grpc.web.MethodType.UNARY,
    proto.admin.SendEmailAuthCodeRequest,
    proto.admin.SendEmailAuthCodeResponse,
    /**
     * @param {!proto.admin.SendEmailAuthCodeRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.SendEmailAuthCodeResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.SendEmailAuthCodeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.SendEmailAuthCodeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.SendEmailAuthCodeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserServiceClient.prototype.sendEmailAuthCode = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/admin.AdminUserService/SendEmailAuthCode',
    request,
    metadata || {},
    methodDescriptor_AdminUserService_SendEmailAuthCode,
    callback,
  );
};

/**
 * @param {!proto.admin.SendEmailAuthCodeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.SendEmailAuthCodeResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminUserServicePromiseClient.prototype.sendEmailAuthCode =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ + '/admin.AdminUserService/SendEmailAuthCode',
      request,
      metadata || {},
      methodDescriptor_AdminUserService_SendEmailAuthCode,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.IssueTemporaryUserPasswordRequest,
 *   !proto.admin.IssueTemporaryUserPasswordResponse>}
 */
const methodDescriptor_AdminUserService_IssueTemporaryUserPassword =
  new grpc.web.MethodDescriptor(
    '/admin.AdminUserService/IssueTemporaryUserPassword',
    grpc.web.MethodType.UNARY,
    proto.admin.IssueTemporaryUserPasswordRequest,
    proto.admin.IssueTemporaryUserPasswordResponse,
    /**
     * @param {!proto.admin.IssueTemporaryUserPasswordRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.IssueTemporaryUserPasswordResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.IssueTemporaryUserPasswordRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.IssueTemporaryUserPasswordResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.IssueTemporaryUserPasswordResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserServiceClient.prototype.issueTemporaryUserPassword =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ + '/admin.AdminUserService/IssueTemporaryUserPassword',
      request,
      metadata || {},
      methodDescriptor_AdminUserService_IssueTemporaryUserPassword,
      callback,
    );
  };

/**
 * @param {!proto.admin.IssueTemporaryUserPasswordRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.IssueTemporaryUserPasswordResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminUserServicePromiseClient.prototype.issueTemporaryUserPassword =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ + '/admin.AdminUserService/IssueTemporaryUserPassword',
      request,
      metadata || {},
      methodDescriptor_AdminUserService_IssueTemporaryUserPassword,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.UpdateUserPasswordRequest,
 *   !proto.admin.UpdateUserPasswordResponse>}
 */
const methodDescriptor_AdminUserService_UpdateUserPassword =
  new grpc.web.MethodDescriptor(
    '/admin.AdminUserService/UpdateUserPassword',
    grpc.web.MethodType.UNARY,
    proto.admin.UpdateUserPasswordRequest,
    proto.admin.UpdateUserPasswordResponse,
    /**
     * @param {!proto.admin.UpdateUserPasswordRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.UpdateUserPasswordResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.UpdateUserPasswordRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.UpdateUserPasswordResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.UpdateUserPasswordResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserServiceClient.prototype.updateUserPassword = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/admin.AdminUserService/UpdateUserPassword',
    request,
    metadata || {},
    methodDescriptor_AdminUserService_UpdateUserPassword,
    callback,
  );
};

/**
 * @param {!proto.admin.UpdateUserPasswordRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.UpdateUserPasswordResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminUserServicePromiseClient.prototype.updateUserPassword =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ + '/admin.AdminUserService/UpdateUserPassword',
      request,
      metadata || {},
      methodDescriptor_AdminUserService_UpdateUserPassword,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.GetUserInfoRequest,
 *   !proto.admin.GetUserInfoResponse>}
 */
const methodDescriptor_AdminUserService_GetUserInfo =
  new grpc.web.MethodDescriptor(
    '/admin.AdminUserService/GetUserInfo',
    grpc.web.MethodType.UNARY,
    proto.admin.GetUserInfoRequest,
    proto.admin.GetUserInfoResponse,
    /**
     * @param {!proto.admin.GetUserInfoRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.GetUserInfoResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.GetUserInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.GetUserInfoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.GetUserInfoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserServiceClient.prototype.getUserInfo = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/admin.AdminUserService/GetUserInfo',
    request,
    metadata || {},
    methodDescriptor_AdminUserService_GetUserInfo,
    callback,
  );
};

/**
 * @param {!proto.admin.GetUserInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.GetUserInfoResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminUserServicePromiseClient.prototype.getUserInfo = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/admin.AdminUserService/GetUserInfo',
    request,
    metadata || {},
    methodDescriptor_AdminUserService_GetUserInfo,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.GetUserInfoRequest,
 *   !proto.admin.GetUserMenusResponse>}
 */
const methodDescriptor_AdminUserService_GetUserMenus =
  new grpc.web.MethodDescriptor(
    '/admin.AdminUserService/GetUserMenus',
    grpc.web.MethodType.UNARY,
    proto.admin.GetUserInfoRequest,
    proto.admin.GetUserMenusResponse,
    /**
     * @param {!proto.admin.GetUserInfoRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.GetUserMenusResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.GetUserInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.GetUserMenusResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.GetUserMenusResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserServiceClient.prototype.getUserMenus = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/admin.AdminUserService/GetUserMenus',
    request,
    metadata || {},
    methodDescriptor_AdminUserService_GetUserMenus,
    callback,
  );
};

/**
 * @param {!proto.admin.GetUserInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.GetUserMenusResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminUserServicePromiseClient.prototype.getUserMenus = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/admin.AdminUserService/GetUserMenus',
    request,
    metadata || {},
    methodDescriptor_AdminUserService_GetUserMenus,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.CheckPasswordRequest,
 *   !proto.admin.CheckPasswordResponse>}
 */
const methodDescriptor_AdminUserService_CheckPassword =
  new grpc.web.MethodDescriptor(
    '/admin.AdminUserService/CheckPassword',
    grpc.web.MethodType.UNARY,
    proto.admin.CheckPasswordRequest,
    proto.admin.CheckPasswordResponse,
    /**
     * @param {!proto.admin.CheckPasswordRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.CheckPasswordResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.CheckPasswordRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.CheckPasswordResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.CheckPasswordResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserServiceClient.prototype.checkPassword = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/admin.AdminUserService/CheckPassword',
    request,
    metadata || {},
    methodDescriptor_AdminUserService_CheckPassword,
    callback,
  );
};

/**
 * @param {!proto.admin.CheckPasswordRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.CheckPasswordResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminUserServicePromiseClient.prototype.checkPassword = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/admin.AdminUserService/CheckPassword',
    request,
    metadata || {},
    methodDescriptor_AdminUserService_CheckPassword,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.GetUserListRequest,
 *   !proto.admin.GetUserListResponse>}
 */
const methodDescriptor_AdminUserService_GetUserList =
  new grpc.web.MethodDescriptor(
    '/admin.AdminUserService/GetUserList',
    grpc.web.MethodType.UNARY,
    proto.admin.GetUserListRequest,
    proto.admin.GetUserListResponse,
    /**
     * @param {!proto.admin.GetUserListRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.GetUserListResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.GetUserListRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.GetUserListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.GetUserListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserServiceClient.prototype.getUserList = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/admin.AdminUserService/GetUserList',
    request,
    metadata || {},
    methodDescriptor_AdminUserService_GetUserList,
    callback,
  );
};

/**
 * @param {!proto.admin.GetUserListRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.GetUserListResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminUserServicePromiseClient.prototype.getUserList = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/admin.AdminUserService/GetUserList',
    request,
    metadata || {},
    methodDescriptor_AdminUserService_GetUserList,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.admin.UpdateUserInfoRequest,
 *   !proto.admin.UpdateUserInfoResponse>}
 */
const methodDescriptor_AdminUserService_UpdateUserInfo =
  new grpc.web.MethodDescriptor(
    '/admin.AdminUserService/UpdateUserInfo',
    grpc.web.MethodType.UNARY,
    proto.admin.UpdateUserInfoRequest,
    proto.admin.UpdateUserInfoResponse,
    /**
     * @param {!proto.admin.UpdateUserInfoRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.admin.UpdateUserInfoResponse.deserializeBinary,
  );

/**
 * @param {!proto.admin.UpdateUserInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.admin.UpdateUserInfoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.admin.UpdateUserInfoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.admin.AdminUserServiceClient.prototype.updateUserInfo = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/admin.AdminUserService/UpdateUserInfo',
    request,
    metadata || {},
    methodDescriptor_AdminUserService_UpdateUserInfo,
    callback,
  );
};

/**
 * @param {!proto.admin.UpdateUserInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.admin.UpdateUserInfoResponse>}
 *     Promise that resolves to the response
 */
proto.admin.AdminUserServicePromiseClient.prototype.updateUserInfo = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/admin.AdminUserService/UpdateUserInfo',
    request,
    metadata || {},
    methodDescriptor_AdminUserService_UpdateUserInfo,
  );
};

module.exports = proto.admin;
