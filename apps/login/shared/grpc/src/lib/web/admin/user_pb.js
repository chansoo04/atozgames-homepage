// source: user.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

var admin$common_pb = require('./admin-common_pb.js');
goog.object.extend(proto, admin$common_pb);
goog.exportSymbol('proto.admin.CheckPasswordRequest', null, global);
goog.exportSymbol('proto.admin.CheckPasswordResponse', null, global);
goog.exportSymbol('proto.admin.GetUserInfoRequest', null, global);
goog.exportSymbol('proto.admin.GetUserInfoResponse', null, global);
goog.exportSymbol('proto.admin.GetUserListRequest', null, global);
goog.exportSymbol('proto.admin.GetUserListResponse', null, global);
goog.exportSymbol('proto.admin.GetUserMenusResponse', null, global);
goog.exportSymbol(
  'proto.admin.IssueTemporaryUserPasswordRequest',
  null,
  global,
);
goog.exportSymbol(
  'proto.admin.IssueTemporaryUserPasswordResponse',
  null,
  global,
);
goog.exportSymbol('proto.admin.SendEmailAuthCodeRequest', null, global);
goog.exportSymbol('proto.admin.SendEmailAuthCodeResponse', null, global);
goog.exportSymbol('proto.admin.SignInRequest', null, global);
goog.exportSymbol('proto.admin.SignInResponse', null, global);
goog.exportSymbol('proto.admin.SignUpRequest', null, global);
goog.exportSymbol('proto.admin.SignUpResponse', null, global);
goog.exportSymbol('proto.admin.UpdateUserInfoRequest', null, global);
goog.exportSymbol('proto.admin.UpdateUserInfoResponse', null, global);
goog.exportSymbol('proto.admin.UpdateUserPasswordRequest', null, global);
goog.exportSymbol('proto.admin.UpdateUserPasswordResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.SignUpRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.SignUpRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.SignUpRequest.displayName = 'proto.admin.SignUpRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.SignUpResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.SignUpResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.SignUpResponse.displayName = 'proto.admin.SignUpResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.SignInRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.SignInRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.SignInRequest.displayName = 'proto.admin.SignInRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.SignInResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.SignInResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.SignInResponse.displayName = 'proto.admin.SignInResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.SendEmailAuthCodeRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.SendEmailAuthCodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.SendEmailAuthCodeRequest.displayName =
    'proto.admin.SendEmailAuthCodeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.SendEmailAuthCodeResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.SendEmailAuthCodeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.SendEmailAuthCodeResponse.displayName =
    'proto.admin.SendEmailAuthCodeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.IssueTemporaryUserPasswordRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.IssueTemporaryUserPasswordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.IssueTemporaryUserPasswordRequest.displayName =
    'proto.admin.IssueTemporaryUserPasswordRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.IssueTemporaryUserPasswordResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.IssueTemporaryUserPasswordResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.IssueTemporaryUserPasswordResponse.displayName =
    'proto.admin.IssueTemporaryUserPasswordResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.UpdateUserPasswordRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.UpdateUserPasswordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.UpdateUserPasswordRequest.displayName =
    'proto.admin.UpdateUserPasswordRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.UpdateUserPasswordResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.UpdateUserPasswordResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.UpdateUserPasswordResponse.displayName =
    'proto.admin.UpdateUserPasswordResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.GetUserInfoRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.GetUserInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.GetUserInfoRequest.displayName = 'proto.admin.GetUserInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.GetUserInfoResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.GetUserInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.GetUserInfoResponse.displayName =
    'proto.admin.GetUserInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.GetUserMenusResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.admin.GetUserMenusResponse.repeatedFields_,
    null,
  );
};
goog.inherits(proto.admin.GetUserMenusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.GetUserMenusResponse.displayName =
    'proto.admin.GetUserMenusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.CheckPasswordRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.CheckPasswordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.CheckPasswordRequest.displayName =
    'proto.admin.CheckPasswordRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.CheckPasswordResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.CheckPasswordResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.CheckPasswordResponse.displayName =
    'proto.admin.CheckPasswordResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.GetUserListRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.GetUserListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.GetUserListRequest.displayName = 'proto.admin.GetUserListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.GetUserListResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.admin.GetUserListResponse.repeatedFields_,
    null,
  );
};
goog.inherits(proto.admin.GetUserListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.GetUserListResponse.displayName =
    'proto.admin.GetUserListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.UpdateUserInfoRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.UpdateUserInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.UpdateUserInfoRequest.displayName =
    'proto.admin.UpdateUserInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.UpdateUserInfoResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.UpdateUserInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.UpdateUserInfoResponse.displayName =
    'proto.admin.UpdateUserInfoResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.admin.SignUpRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.admin.SignUpRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.admin.SignUpRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.admin.SignUpRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        email: jspb.Message.getFieldWithDefault(msg, 1, ''),
        password: jspb.Message.getFieldWithDefault(msg, 2, ''),
        employeeNumber: jspb.Message.getFieldWithDefault(msg, 3, ''),
        name: jspb.Message.getFieldWithDefault(msg, 4, ''),
        departmentId: jspb.Message.getFieldWithDefault(msg, 5, 0),
        positionId: jspb.Message.getFieldWithDefault(msg, 6, 0),
        jobId: jspb.Message.getFieldWithDefault(msg, 7, 0),
        phoneNumber: jspb.Message.getFieldWithDefault(msg, 8, 0),
        extensionNumber: jspb.Message.getFieldWithDefault(msg, 9, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.SignUpRequest}
 */
proto.admin.SignUpRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.SignUpRequest();
  return proto.admin.SignUpRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.SignUpRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.SignUpRequest}
 */
proto.admin.SignUpRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setEmail(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPassword(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setEmployeeNumber(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setDepartmentId(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPositionId(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setJobId(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setPhoneNumber(value);
        break;
      case 9:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setExtensionNumber(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.SignUpRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.admin.SignUpRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.SignUpRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.SignUpRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getEmployeeNumber();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getDepartmentId();
  if (f !== 0) {
    writer.writeInt32(5, f);
  }
  f = message.getPositionId();
  if (f !== 0) {
    writer.writeInt32(6, f);
  }
  f = message.getJobId();
  if (f !== 0) {
    writer.writeInt32(7, f);
  }
  f = message.getPhoneNumber();
  if (f !== 0) {
    writer.writeInt64(8, f);
  }
  f = message.getExtensionNumber();
  if (f !== 0) {
    writer.writeInt32(9, f);
  }
};

/**
 * optional string email = 1;
 * @return {string}
 */
proto.admin.SignUpRequest.prototype.getEmail = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.SignUpRequest} returns this
 */
proto.admin.SignUpRequest.prototype.setEmail = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string password = 2;
 * @return {string}
 */
proto.admin.SignUpRequest.prototype.getPassword = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.SignUpRequest} returns this
 */
proto.admin.SignUpRequest.prototype.setPassword = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string employee_number = 3;
 * @return {string}
 */
proto.admin.SignUpRequest.prototype.getEmployeeNumber = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.SignUpRequest} returns this
 */
proto.admin.SignUpRequest.prototype.setEmployeeNumber = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string name = 4;
 * @return {string}
 */
proto.admin.SignUpRequest.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.SignUpRequest} returns this
 */
proto.admin.SignUpRequest.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional int32 department_id = 5;
 * @return {number}
 */
proto.admin.SignUpRequest.prototype.getDepartmentId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.admin.SignUpRequest} returns this
 */
proto.admin.SignUpRequest.prototype.setDepartmentId = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional int32 position_id = 6;
 * @return {number}
 */
proto.admin.SignUpRequest.prototype.getPositionId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.admin.SignUpRequest} returns this
 */
proto.admin.SignUpRequest.prototype.setPositionId = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional int32 job_id = 7;
 * @return {number}
 */
proto.admin.SignUpRequest.prototype.getJobId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/**
 * @param {number} value
 * @return {!proto.admin.SignUpRequest} returns this
 */
proto.admin.SignUpRequest.prototype.setJobId = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * optional int64 phone_number = 8;
 * @return {number}
 */
proto.admin.SignUpRequest.prototype.getPhoneNumber = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};

/**
 * @param {number} value
 * @return {!proto.admin.SignUpRequest} returns this
 */
proto.admin.SignUpRequest.prototype.setPhoneNumber = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional int32 extension_number = 9;
 * @return {number}
 */
proto.admin.SignUpRequest.prototype.getExtensionNumber = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};

/**
 * @param {number} value
 * @return {!proto.admin.SignUpRequest} returns this
 */
proto.admin.SignUpRequest.prototype.setExtensionNumber = function (value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.admin.SignUpResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.admin.SignUpResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.admin.SignUpResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.admin.SignUpResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.SignUpResponse}
 */
proto.admin.SignUpResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.SignUpResponse();
  return proto.admin.SignUpResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.SignUpResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.SignUpResponse}
 */
proto.admin.SignUpResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.SignUpResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.admin.SignUpResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.SignUpResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.SignUpResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.admin.SignUpResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.admin.SignUpResponse} returns this
 */
proto.admin.SignUpResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.admin.SignUpResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.SignUpResponse} returns this
 */
proto.admin.SignUpResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.admin.SignInRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.admin.SignInRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.admin.SignInRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.admin.SignInRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        email: jspb.Message.getFieldWithDefault(msg, 1, ''),
        password: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.SignInRequest}
 */
proto.admin.SignInRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.SignInRequest();
  return proto.admin.SignInRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.SignInRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.SignInRequest}
 */
proto.admin.SignInRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setEmail(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPassword(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.SignInRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.admin.SignInRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.SignInRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.SignInRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string email = 1;
 * @return {string}
 */
proto.admin.SignInRequest.prototype.getEmail = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.SignInRequest} returns this
 */
proto.admin.SignInRequest.prototype.setEmail = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string password = 2;
 * @return {string}
 */
proto.admin.SignInRequest.prototype.getPassword = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.SignInRequest} returns this
 */
proto.admin.SignInRequest.prototype.setPassword = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.admin.SignInResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.admin.SignInResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.admin.SignInResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.admin.SignInResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        userId: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.SignInResponse}
 */
proto.admin.SignInResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.SignInResponse();
  return proto.admin.SignInResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.SignInResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.SignInResponse}
 */
proto.admin.SignInResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.SignInResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.admin.SignInResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.SignInResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.SignInResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.admin.SignInResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.admin.SignInResponse} returns this
 */
proto.admin.SignInResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.admin.SignInResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.SignInResponse} returns this
 */
proto.admin.SignInResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string user_id = 3;
 * @return {string}
 */
proto.admin.SignInResponse.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.SignInResponse} returns this
 */
proto.admin.SignInResponse.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.admin.SendEmailAuthCodeRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.admin.SendEmailAuthCodeRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.admin.SendEmailAuthCodeRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.admin.SendEmailAuthCodeRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        email: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.SendEmailAuthCodeRequest}
 */
proto.admin.SendEmailAuthCodeRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.SendEmailAuthCodeRequest();
  return proto.admin.SendEmailAuthCodeRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.SendEmailAuthCodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.SendEmailAuthCodeRequest}
 */
proto.admin.SendEmailAuthCodeRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setEmail(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.SendEmailAuthCodeRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.admin.SendEmailAuthCodeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.SendEmailAuthCodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.SendEmailAuthCodeRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string email = 1;
 * @return {string}
 */
proto.admin.SendEmailAuthCodeRequest.prototype.getEmail = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.SendEmailAuthCodeRequest} returns this
 */
proto.admin.SendEmailAuthCodeRequest.prototype.setEmail = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.admin.SendEmailAuthCodeResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.admin.SendEmailAuthCodeResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.admin.SendEmailAuthCodeResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.admin.SendEmailAuthCodeResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        authCode: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.SendEmailAuthCodeResponse}
 */
proto.admin.SendEmailAuthCodeResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.SendEmailAuthCodeResponse();
  return proto.admin.SendEmailAuthCodeResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.SendEmailAuthCodeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.SendEmailAuthCodeResponse}
 */
proto.admin.SendEmailAuthCodeResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setAuthCode(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.SendEmailAuthCodeResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.admin.SendEmailAuthCodeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.SendEmailAuthCodeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.SendEmailAuthCodeResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getAuthCode();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.admin.SendEmailAuthCodeResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.admin.SendEmailAuthCodeResponse} returns this
 */
proto.admin.SendEmailAuthCodeResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.admin.SendEmailAuthCodeResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.SendEmailAuthCodeResponse} returns this
 */
proto.admin.SendEmailAuthCodeResponse.prototype.setErrorMessage = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string auth_code = 3;
 * @return {string}
 */
proto.admin.SendEmailAuthCodeResponse.prototype.getAuthCode = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.SendEmailAuthCodeResponse} returns this
 */
proto.admin.SendEmailAuthCodeResponse.prototype.setAuthCode = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.admin.IssueTemporaryUserPasswordRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.admin.IssueTemporaryUserPasswordRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.admin.IssueTemporaryUserPasswordRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.admin.IssueTemporaryUserPasswordRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        email: jspb.Message.getFieldWithDefault(msg, 1, ''),
        name: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.IssueTemporaryUserPasswordRequest}
 */
proto.admin.IssueTemporaryUserPasswordRequest.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.IssueTemporaryUserPasswordRequest();
  return proto.admin.IssueTemporaryUserPasswordRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.IssueTemporaryUserPasswordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.IssueTemporaryUserPasswordRequest}
 */
proto.admin.IssueTemporaryUserPasswordRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setEmail(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setName(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.IssueTemporaryUserPasswordRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.admin.IssueTemporaryUserPasswordRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.IssueTemporaryUserPasswordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.IssueTemporaryUserPasswordRequest.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getEmail();
    if (f.length > 0) {
      writer.writeString(1, f);
    }
    f = message.getName();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
  };

/**
 * optional string email = 1;
 * @return {string}
 */
proto.admin.IssueTemporaryUserPasswordRequest.prototype.getEmail = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.IssueTemporaryUserPasswordRequest} returns this
 */
proto.admin.IssueTemporaryUserPasswordRequest.prototype.setEmail = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string name = 2;
 * @return {string}
 */
proto.admin.IssueTemporaryUserPasswordRequest.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.IssueTemporaryUserPasswordRequest} returns this
 */
proto.admin.IssueTemporaryUserPasswordRequest.prototype.setName = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.admin.IssueTemporaryUserPasswordResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.admin.IssueTemporaryUserPasswordResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.admin.IssueTemporaryUserPasswordResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.admin.IssueTemporaryUserPasswordResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.IssueTemporaryUserPasswordResponse}
 */
proto.admin.IssueTemporaryUserPasswordResponse.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.IssueTemporaryUserPasswordResponse();
  return proto.admin.IssueTemporaryUserPasswordResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.IssueTemporaryUserPasswordResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.IssueTemporaryUserPasswordResponse}
 */
proto.admin.IssueTemporaryUserPasswordResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {boolean} */ (reader.readBool());
          msg.setSuccess(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setErrorMessage(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.IssueTemporaryUserPasswordResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.admin.IssueTemporaryUserPasswordResponse.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.IssueTemporaryUserPasswordResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.IssueTemporaryUserPasswordResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getSuccess();
    if (f) {
      writer.writeBool(1, f);
    }
    f = message.getErrorMessage();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
  };

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.admin.IssueTemporaryUserPasswordResponse.prototype.getSuccess =
  function () {
    return /** @type {boolean} */ (
      jspb.Message.getBooleanFieldWithDefault(this, 1, false)
    );
  };

/**
 * @param {boolean} value
 * @return {!proto.admin.IssueTemporaryUserPasswordResponse} returns this
 */
proto.admin.IssueTemporaryUserPasswordResponse.prototype.setSuccess = function (
  value,
) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.admin.IssueTemporaryUserPasswordResponse.prototype.getErrorMessage =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.admin.IssueTemporaryUserPasswordResponse} returns this
 */
proto.admin.IssueTemporaryUserPasswordResponse.prototype.setErrorMessage =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.admin.UpdateUserPasswordRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.admin.UpdateUserPasswordRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.admin.UpdateUserPasswordRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.admin.UpdateUserPasswordRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        email: jspb.Message.getFieldWithDefault(msg, 1, ''),
        password: jspb.Message.getFieldWithDefault(msg, 2, ''),
        newPassword: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.UpdateUserPasswordRequest}
 */
proto.admin.UpdateUserPasswordRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.UpdateUserPasswordRequest();
  return proto.admin.UpdateUserPasswordRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.UpdateUserPasswordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.UpdateUserPasswordRequest}
 */
proto.admin.UpdateUserPasswordRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setEmail(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPassword(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setNewPassword(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.UpdateUserPasswordRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.admin.UpdateUserPasswordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.UpdateUserPasswordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.UpdateUserPasswordRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getNewPassword();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string email = 1;
 * @return {string}
 */
proto.admin.UpdateUserPasswordRequest.prototype.getEmail = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.UpdateUserPasswordRequest} returns this
 */
proto.admin.UpdateUserPasswordRequest.prototype.setEmail = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string password = 2;
 * @return {string}
 */
proto.admin.UpdateUserPasswordRequest.prototype.getPassword = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.UpdateUserPasswordRequest} returns this
 */
proto.admin.UpdateUserPasswordRequest.prototype.setPassword = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string new_password = 3;
 * @return {string}
 */
proto.admin.UpdateUserPasswordRequest.prototype.getNewPassword = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.UpdateUserPasswordRequest} returns this
 */
proto.admin.UpdateUserPasswordRequest.prototype.setNewPassword = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.admin.UpdateUserPasswordResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.admin.UpdateUserPasswordResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.admin.UpdateUserPasswordResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.admin.UpdateUserPasswordResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.UpdateUserPasswordResponse}
 */
proto.admin.UpdateUserPasswordResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.UpdateUserPasswordResponse();
  return proto.admin.UpdateUserPasswordResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.UpdateUserPasswordResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.UpdateUserPasswordResponse}
 */
proto.admin.UpdateUserPasswordResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.UpdateUserPasswordResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.admin.UpdateUserPasswordResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.UpdateUserPasswordResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.UpdateUserPasswordResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.admin.UpdateUserPasswordResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.admin.UpdateUserPasswordResponse} returns this
 */
proto.admin.UpdateUserPasswordResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.admin.UpdateUserPasswordResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.UpdateUserPasswordResponse} returns this
 */
proto.admin.UpdateUserPasswordResponse.prototype.setErrorMessage = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.admin.GetUserInfoRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.admin.GetUserInfoRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.admin.GetUserInfoRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.admin.GetUserInfoRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.GetUserInfoRequest}
 */
proto.admin.GetUserInfoRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.GetUserInfoRequest();
  return proto.admin.GetUserInfoRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.GetUserInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.GetUserInfoRequest}
 */
proto.admin.GetUserInfoRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.GetUserInfoRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.admin.GetUserInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.GetUserInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.GetUserInfoRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.admin.GetUserInfoRequest.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.GetUserInfoRequest} returns this
 */
proto.admin.GetUserInfoRequest.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.admin.GetUserInfoResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.admin.GetUserInfoResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.admin.GetUserInfoResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.admin.GetUserInfoResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        info:
          (f = msg.getInfo()) &&
          admin$common_pb.UserInfo.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.GetUserInfoResponse}
 */
proto.admin.GetUserInfoResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.GetUserInfoResponse();
  return proto.admin.GetUserInfoResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.GetUserInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.GetUserInfoResponse}
 */
proto.admin.GetUserInfoResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = new admin$common_pb.UserInfo();
        reader.readMessage(
          value,
          admin$common_pb.UserInfo.deserializeBinaryFromReader,
        );
        msg.setInfo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.GetUserInfoResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.admin.GetUserInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.GetUserInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.GetUserInfoResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(3, f, admin$common_pb.UserInfo.serializeBinaryToWriter);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.admin.GetUserInfoResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.admin.GetUserInfoResponse} returns this
 */
proto.admin.GetUserInfoResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.admin.GetUserInfoResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.GetUserInfoResponse} returns this
 */
proto.admin.GetUserInfoResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional UserInfo info = 3;
 * @return {?proto.admin.UserInfo}
 */
proto.admin.GetUserInfoResponse.prototype.getInfo = function () {
  return /** @type{?proto.admin.UserInfo} */ (
    jspb.Message.getWrapperField(this, admin$common_pb.UserInfo, 3)
  );
};

/**
 * @param {?proto.admin.UserInfo|undefined} value
 * @return {!proto.admin.GetUserInfoResponse} returns this
 */
proto.admin.GetUserInfoResponse.prototype.setInfo = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.admin.GetUserInfoResponse} returns this
 */
proto.admin.GetUserInfoResponse.prototype.clearInfo = function () {
  return this.setInfo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.admin.GetUserInfoResponse.prototype.hasInfo = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.admin.GetUserMenusResponse.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.admin.GetUserMenusResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.admin.GetUserMenusResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.admin.GetUserMenusResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.admin.GetUserMenusResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage:
          (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
        menusList: jspb.Message.toObjectList(
          msg.getMenusList(),
          admin$common_pb.GlobalNavigationMenus.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.GetUserMenusResponse}
 */
proto.admin.GetUserMenusResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.GetUserMenusResponse();
  return proto.admin.GetUserMenusResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.GetUserMenusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.GetUserMenusResponse}
 */
proto.admin.GetUserMenusResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = new admin$common_pb.GlobalNavigationMenus();
        reader.readMessage(
          value,
          admin$common_pb.GlobalNavigationMenus.deserializeBinaryFromReader,
        );
        msg.addMenus(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.GetUserMenusResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.admin.GetUserMenusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.GetUserMenusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.GetUserMenusResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(2, f);
  }
  f = message.getMenusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      admin$common_pb.GlobalNavigationMenus.serializeBinaryToWriter,
    );
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.admin.GetUserMenusResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.admin.GetUserMenusResponse} returns this
 */
proto.admin.GetUserMenusResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.admin.GetUserMenusResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.GetUserMenusResponse} returns this
 */
proto.admin.GetUserMenusResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setField(this, 2, value);
};

/**
 * Clears the field making it undefined.
 * @return {!proto.admin.GetUserMenusResponse} returns this
 */
proto.admin.GetUserMenusResponse.prototype.clearErrorMessage = function () {
  return jspb.Message.setField(this, 2, undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.admin.GetUserMenusResponse.prototype.hasErrorMessage = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * repeated GlobalNavigationMenus menus = 3;
 * @return {!Array<!proto.admin.GlobalNavigationMenus>}
 */
proto.admin.GetUserMenusResponse.prototype.getMenusList = function () {
  return /** @type{!Array<!proto.admin.GlobalNavigationMenus>} */ (
    jspb.Message.getRepeatedWrapperField(
      this,
      admin$common_pb.GlobalNavigationMenus,
      3,
    )
  );
};

/**
 * @param {!Array<!proto.admin.GlobalNavigationMenus>} value
 * @return {!proto.admin.GetUserMenusResponse} returns this
 */
proto.admin.GetUserMenusResponse.prototype.setMenusList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.admin.GlobalNavigationMenus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.admin.GlobalNavigationMenus}
 */
proto.admin.GetUserMenusResponse.prototype.addMenus = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    3,
    opt_value,
    proto.admin.GlobalNavigationMenus,
    opt_index,
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.admin.GetUserMenusResponse} returns this
 */
proto.admin.GetUserMenusResponse.prototype.clearMenusList = function () {
  return this.setMenusList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.admin.CheckPasswordRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.admin.CheckPasswordRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.admin.CheckPasswordRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.admin.CheckPasswordRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        password: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.CheckPasswordRequest}
 */
proto.admin.CheckPasswordRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.CheckPasswordRequest();
  return proto.admin.CheckPasswordRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.CheckPasswordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.CheckPasswordRequest}
 */
proto.admin.CheckPasswordRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPassword(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.CheckPasswordRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.admin.CheckPasswordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.CheckPasswordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.CheckPasswordRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.admin.CheckPasswordRequest.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.CheckPasswordRequest} returns this
 */
proto.admin.CheckPasswordRequest.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string password = 2;
 * @return {string}
 */
proto.admin.CheckPasswordRequest.prototype.getPassword = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.CheckPasswordRequest} returns this
 */
proto.admin.CheckPasswordRequest.prototype.setPassword = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.admin.CheckPasswordResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.admin.CheckPasswordResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.admin.CheckPasswordResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.admin.CheckPasswordResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.CheckPasswordResponse}
 */
proto.admin.CheckPasswordResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.CheckPasswordResponse();
  return proto.admin.CheckPasswordResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.CheckPasswordResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.CheckPasswordResponse}
 */
proto.admin.CheckPasswordResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.CheckPasswordResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.admin.CheckPasswordResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.CheckPasswordResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.CheckPasswordResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.admin.CheckPasswordResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.admin.CheckPasswordResponse} returns this
 */
proto.admin.CheckPasswordResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.admin.CheckPasswordResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.CheckPasswordResponse} returns this
 */
proto.admin.CheckPasswordResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.admin.GetUserListRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.admin.GetUserListRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.admin.GetUserListRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.admin.GetUserListRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        page: jspb.Message.getFieldWithDefault(msg, 1, 0),
        countPerPage: jspb.Message.getFieldWithDefault(msg, 2, 0),
        email: jspb.Message.getFieldWithDefault(msg, 3, ''),
        name: jspb.Message.getFieldWithDefault(msg, 4, ''),
        memo: jspb.Message.getFieldWithDefault(msg, 5, ''),
        state: jspb.Message.getFieldWithDefault(msg, 6, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.GetUserListRequest}
 */
proto.admin.GetUserListRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.GetUserListRequest();
  return proto.admin.GetUserListRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.GetUserListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.GetUserListRequest}
 */
proto.admin.GetUserListRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPage(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setCountPerPage(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setEmail(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setMemo(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setState(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.GetUserListRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.admin.GetUserListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.GetUserListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.GetUserListRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = message.getCountPerPage();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(6, f);
  }
};

/**
 * optional int32 page = 1;
 * @return {number}
 */
proto.admin.GetUserListRequest.prototype.getPage = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.admin.GetUserListRequest} returns this
 */
proto.admin.GetUserListRequest.prototype.setPage = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int32 count_per_page = 2;
 * @return {number}
 */
proto.admin.GetUserListRequest.prototype.getCountPerPage = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.admin.GetUserListRequest} returns this
 */
proto.admin.GetUserListRequest.prototype.setCountPerPage = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional string email = 3;
 * @return {string}
 */
proto.admin.GetUserListRequest.prototype.getEmail = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.GetUserListRequest} returns this
 */
proto.admin.GetUserListRequest.prototype.setEmail = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string name = 4;
 * @return {string}
 */
proto.admin.GetUserListRequest.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.GetUserListRequest} returns this
 */
proto.admin.GetUserListRequest.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string memo = 5;
 * @return {string}
 */
proto.admin.GetUserListRequest.prototype.getMemo = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.GetUserListRequest} returns this
 */
proto.admin.GetUserListRequest.prototype.setMemo = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional int32 state = 6;
 * @return {number}
 */
proto.admin.GetUserListRequest.prototype.getState = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.admin.GetUserListRequest} returns this
 */
proto.admin.GetUserListRequest.prototype.setState = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.admin.GetUserListResponse.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.admin.GetUserListResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.admin.GetUserListResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.admin.GetUserListResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.admin.GetUserListResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        userInfoListList: jspb.Message.toObjectList(
          msg.getUserInfoListList(),
          admin$common_pb.UserInfo.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.GetUserListResponse}
 */
proto.admin.GetUserListResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.GetUserListResponse();
  return proto.admin.GetUserListResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.GetUserListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.GetUserListResponse}
 */
proto.admin.GetUserListResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = new admin$common_pb.UserInfo();
        reader.readMessage(
          value,
          admin$common_pb.UserInfo.deserializeBinaryFromReader,
        );
        msg.addUserInfoList(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.GetUserListResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.admin.GetUserListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.GetUserListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.GetUserListResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getUserInfoListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      admin$common_pb.UserInfo.serializeBinaryToWriter,
    );
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.admin.GetUserListResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.admin.GetUserListResponse} returns this
 */
proto.admin.GetUserListResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.admin.GetUserListResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.GetUserListResponse} returns this
 */
proto.admin.GetUserListResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * repeated UserInfo user_info_list = 3;
 * @return {!Array<!proto.admin.UserInfo>}
 */
proto.admin.GetUserListResponse.prototype.getUserInfoListList = function () {
  return /** @type{!Array<!proto.admin.UserInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, admin$common_pb.UserInfo, 3)
  );
};

/**
 * @param {!Array<!proto.admin.UserInfo>} value
 * @return {!proto.admin.GetUserListResponse} returns this
 */
proto.admin.GetUserListResponse.prototype.setUserInfoListList = function (
  value,
) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.admin.UserInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.admin.UserInfo}
 */
proto.admin.GetUserListResponse.prototype.addUserInfoList = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    3,
    opt_value,
    proto.admin.UserInfo,
    opt_index,
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.admin.GetUserListResponse} returns this
 */
proto.admin.GetUserListResponse.prototype.clearUserInfoListList = function () {
  return this.setUserInfoListList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.admin.UpdateUserInfoRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.admin.UpdateUserInfoRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.admin.UpdateUserInfoRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.admin.UpdateUserInfoRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        email: jspb.Message.getFieldWithDefault(msg, 2, ''),
        employeeNumber: jspb.Message.getFieldWithDefault(msg, 3, ''),
        name: jspb.Message.getFieldWithDefault(msg, 4, ''),
        departmentId: jspb.Message.getFieldWithDefault(msg, 5, 0),
        positionId: jspb.Message.getFieldWithDefault(msg, 6, 0),
        jobId: jspb.Message.getFieldWithDefault(msg, 7, 0),
        phoneNumber: jspb.Message.getFieldWithDefault(msg, 8, 0),
        extensionNumber: jspb.Message.getFieldWithDefault(msg, 9, 0),
        state: jspb.Message.getFieldWithDefault(msg, 10, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.UpdateUserInfoRequest}
 */
proto.admin.UpdateUserInfoRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.UpdateUserInfoRequest();
  return proto.admin.UpdateUserInfoRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.UpdateUserInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.UpdateUserInfoRequest}
 */
proto.admin.UpdateUserInfoRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setEmail(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setEmployeeNumber(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setDepartmentId(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPositionId(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setJobId(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setPhoneNumber(value);
        break;
      case 9:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setExtensionNumber(value);
        break;
      case 10:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setState(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.UpdateUserInfoRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.admin.UpdateUserInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.UpdateUserInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.UpdateUserInfoRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getEmployeeNumber();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getDepartmentId();
  if (f !== 0) {
    writer.writeInt32(5, f);
  }
  f = message.getPositionId();
  if (f !== 0) {
    writer.writeInt32(6, f);
  }
  f = message.getJobId();
  if (f !== 0) {
    writer.writeInt32(7, f);
  }
  f = message.getPhoneNumber();
  if (f !== 0) {
    writer.writeInt64(8, f);
  }
  f = message.getExtensionNumber();
  if (f !== 0) {
    writer.writeInt32(9, f);
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(10, f);
  }
};

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.admin.UpdateUserInfoRequest.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.UpdateUserInfoRequest} returns this
 */
proto.admin.UpdateUserInfoRequest.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string email = 2;
 * @return {string}
 */
proto.admin.UpdateUserInfoRequest.prototype.getEmail = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.UpdateUserInfoRequest} returns this
 */
proto.admin.UpdateUserInfoRequest.prototype.setEmail = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string employee_number = 3;
 * @return {string}
 */
proto.admin.UpdateUserInfoRequest.prototype.getEmployeeNumber = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.UpdateUserInfoRequest} returns this
 */
proto.admin.UpdateUserInfoRequest.prototype.setEmployeeNumber = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string name = 4;
 * @return {string}
 */
proto.admin.UpdateUserInfoRequest.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.UpdateUserInfoRequest} returns this
 */
proto.admin.UpdateUserInfoRequest.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional int32 department_id = 5;
 * @return {number}
 */
proto.admin.UpdateUserInfoRequest.prototype.getDepartmentId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.admin.UpdateUserInfoRequest} returns this
 */
proto.admin.UpdateUserInfoRequest.prototype.setDepartmentId = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional int32 position_id = 6;
 * @return {number}
 */
proto.admin.UpdateUserInfoRequest.prototype.getPositionId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.admin.UpdateUserInfoRequest} returns this
 */
proto.admin.UpdateUserInfoRequest.prototype.setPositionId = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional int32 job_id = 7;
 * @return {number}
 */
proto.admin.UpdateUserInfoRequest.prototype.getJobId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/**
 * @param {number} value
 * @return {!proto.admin.UpdateUserInfoRequest} returns this
 */
proto.admin.UpdateUserInfoRequest.prototype.setJobId = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * optional int64 phone_number = 8;
 * @return {number}
 */
proto.admin.UpdateUserInfoRequest.prototype.getPhoneNumber = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};

/**
 * @param {number} value
 * @return {!proto.admin.UpdateUserInfoRequest} returns this
 */
proto.admin.UpdateUserInfoRequest.prototype.setPhoneNumber = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional int32 extension_number = 9;
 * @return {number}
 */
proto.admin.UpdateUserInfoRequest.prototype.getExtensionNumber = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};

/**
 * @param {number} value
 * @return {!proto.admin.UpdateUserInfoRequest} returns this
 */
proto.admin.UpdateUserInfoRequest.prototype.setExtensionNumber = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 9, value);
};

/**
 * optional int32 state = 10;
 * @return {number}
 */
proto.admin.UpdateUserInfoRequest.prototype.getState = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};

/**
 * @param {number} value
 * @return {!proto.admin.UpdateUserInfoRequest} returns this
 */
proto.admin.UpdateUserInfoRequest.prototype.setState = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.admin.UpdateUserInfoResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.admin.UpdateUserInfoResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.admin.UpdateUserInfoResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.admin.UpdateUserInfoResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.UpdateUserInfoResponse}
 */
proto.admin.UpdateUserInfoResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.UpdateUserInfoResponse();
  return proto.admin.UpdateUserInfoResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.UpdateUserInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.UpdateUserInfoResponse}
 */
proto.admin.UpdateUserInfoResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.UpdateUserInfoResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.admin.UpdateUserInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.UpdateUserInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.UpdateUserInfoResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.admin.UpdateUserInfoResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.admin.UpdateUserInfoResponse} returns this
 */
proto.admin.UpdateUserInfoResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.admin.UpdateUserInfoResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.admin.UpdateUserInfoResponse} returns this
 */
proto.admin.UpdateUserInfoResponse.prototype.setErrorMessage = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

goog.object.extend(exports, proto.admin);
