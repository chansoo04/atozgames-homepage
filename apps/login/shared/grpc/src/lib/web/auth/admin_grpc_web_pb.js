/**
 * @fileoverview gRPC-Web generated client stub for auth.admin
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: admin.proto

/* eslint-disable */
// @ts-nocheck

const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.auth = {};
proto.auth.admin = require('./admin_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.auth.admin.AdminAuthServiceClient = function (
  hostname,
  credentials,
  options,
) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.auth.admin.AdminAuthServicePromiseClient = function (
  hostname,
  credentials,
  options,
) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.admin.SignInRequest,
 *   !proto.auth.admin.SignInResponse>}
 */
const methodDescriptor_AdminAuthService_SignIn = new grpc.web.MethodDescriptor(
  '/auth.admin.AdminAuthService/SignIn',
  grpc.web.MethodType.UNARY,
  proto.auth.admin.SignInRequest,
  proto.auth.admin.SignInResponse,
  /**
   * @param {!proto.auth.admin.SignInRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.auth.admin.SignInResponse.deserializeBinary,
);

/**
 * @param {!proto.auth.admin.SignInRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.admin.SignInResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.admin.SignInResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.admin.AdminAuthServiceClient.prototype.signIn = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/auth.admin.AdminAuthService/SignIn',
    request,
    metadata || {},
    methodDescriptor_AdminAuthService_SignIn,
    callback,
  );
};

/**
 * @param {!proto.auth.admin.SignInRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.admin.SignInResponse>}
 *     Promise that resolves to the response
 */
proto.auth.admin.AdminAuthServicePromiseClient.prototype.signIn = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/auth.admin.AdminAuthService/SignIn',
    request,
    metadata || {},
    methodDescriptor_AdminAuthService_SignIn,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.admin.TokenRequest,
 *   !proto.auth.admin.VerifyTokenResponse>}
 */
const methodDescriptor_AdminAuthService_VerifyToken =
  new grpc.web.MethodDescriptor(
    '/auth.admin.AdminAuthService/VerifyToken',
    grpc.web.MethodType.UNARY,
    proto.auth.admin.TokenRequest,
    proto.auth.admin.VerifyTokenResponse,
    /**
     * @param {!proto.auth.admin.TokenRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.auth.admin.VerifyTokenResponse.deserializeBinary,
  );

/**
 * @param {!proto.auth.admin.TokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.admin.VerifyTokenResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.admin.VerifyTokenResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.admin.AdminAuthServiceClient.prototype.verifyToken = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/auth.admin.AdminAuthService/VerifyToken',
    request,
    metadata || {},
    methodDescriptor_AdminAuthService_VerifyToken,
    callback,
  );
};

/**
 * @param {!proto.auth.admin.TokenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.admin.VerifyTokenResponse>}
 *     Promise that resolves to the response
 */
proto.auth.admin.AdminAuthServicePromiseClient.prototype.verifyToken =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ + '/auth.admin.AdminAuthService/VerifyToken',
      request,
      metadata || {},
      methodDescriptor_AdminAuthService_VerifyToken,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.admin.TokenWithContextRequest,
 *   !proto.auth.admin.VerifyTokenWithContextResponse>}
 */
const methodDescriptor_AdminAuthService_VerifyTokenWithContext =
  new grpc.web.MethodDescriptor(
    '/auth.admin.AdminAuthService/VerifyTokenWithContext',
    grpc.web.MethodType.UNARY,
    proto.auth.admin.TokenWithContextRequest,
    proto.auth.admin.VerifyTokenWithContextResponse,
    /**
     * @param {!proto.auth.admin.TokenWithContextRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.auth.admin.VerifyTokenWithContextResponse.deserializeBinary,
  );

/**
 * @param {!proto.auth.admin.TokenWithContextRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.admin.VerifyTokenWithContextResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.admin.VerifyTokenWithContextResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.admin.AdminAuthServiceClient.prototype.verifyTokenWithContext =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ + '/auth.admin.AdminAuthService/VerifyTokenWithContext',
      request,
      metadata || {},
      methodDescriptor_AdminAuthService_VerifyTokenWithContext,
      callback,
    );
  };

/**
 * @param {!proto.auth.admin.TokenWithContextRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.admin.VerifyTokenWithContextResponse>}
 *     Promise that resolves to the response
 */
proto.auth.admin.AdminAuthServicePromiseClient.prototype.verifyTokenWithContext =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ + '/auth.admin.AdminAuthService/VerifyTokenWithContext',
      request,
      metadata || {},
      methodDescriptor_AdminAuthService_VerifyTokenWithContext,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.admin.TokenRequest,
 *   !proto.auth.admin.RenewTokenResponse>}
 */
const methodDescriptor_AdminAuthService_RenewToken =
  new grpc.web.MethodDescriptor(
    '/auth.admin.AdminAuthService/RenewToken',
    grpc.web.MethodType.UNARY,
    proto.auth.admin.TokenRequest,
    proto.auth.admin.RenewTokenResponse,
    /**
     * @param {!proto.auth.admin.TokenRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.auth.admin.RenewTokenResponse.deserializeBinary,
  );

/**
 * @param {!proto.auth.admin.TokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.admin.RenewTokenResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.admin.RenewTokenResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.admin.AdminAuthServiceClient.prototype.renewToken = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/auth.admin.AdminAuthService/RenewToken',
    request,
    metadata || {},
    methodDescriptor_AdminAuthService_RenewToken,
    callback,
  );
};

/**
 * @param {!proto.auth.admin.TokenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.admin.RenewTokenResponse>}
 *     Promise that resolves to the response
 */
proto.auth.admin.AdminAuthServicePromiseClient.prototype.renewToken = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/auth.admin.AdminAuthService/RenewToken',
    request,
    metadata || {},
    methodDescriptor_AdminAuthService_RenewToken,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.admin.TokenRequest,
 *   !proto.auth.admin.DystroyTokenResponse>}
 */
const methodDescriptor_AdminAuthService_DestroyToken =
  new grpc.web.MethodDescriptor(
    '/auth.admin.AdminAuthService/DestroyToken',
    grpc.web.MethodType.UNARY,
    proto.auth.admin.TokenRequest,
    proto.auth.admin.DystroyTokenResponse,
    /**
     * @param {!proto.auth.admin.TokenRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.auth.admin.DystroyTokenResponse.deserializeBinary,
  );

/**
 * @param {!proto.auth.admin.TokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.admin.DystroyTokenResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.admin.DystroyTokenResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.admin.AdminAuthServiceClient.prototype.destroyToken = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/auth.admin.AdminAuthService/DestroyToken',
    request,
    metadata || {},
    methodDescriptor_AdminAuthService_DestroyToken,
    callback,
  );
};

/**
 * @param {!proto.auth.admin.TokenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.admin.DystroyTokenResponse>}
 *     Promise that resolves to the response
 */
proto.auth.admin.AdminAuthServicePromiseClient.prototype.destroyToken =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ + '/auth.admin.AdminAuthService/DestroyToken',
      request,
      metadata || {},
      methodDescriptor_AdminAuthService_DestroyToken,
    );
  };

module.exports = proto.auth.admin;
