// source: admin.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

goog.exportSymbol('proto.auth.admin.DystroyTokenResponse', null, global);
goog.exportSymbol('proto.auth.admin.RenewTokenResponse', null, global);
goog.exportSymbol('proto.auth.admin.SignInRequest', null, global);
goog.exportSymbol('proto.auth.admin.SignInResponse', null, global);
goog.exportSymbol('proto.auth.admin.TokenRequest', null, global);
goog.exportSymbol('proto.auth.admin.TokenWithContextRequest', null, global);
goog.exportSymbol('proto.auth.admin.User', null, global);
goog.exportSymbol('proto.auth.admin.VerifyTokenResponse', null, global);
goog.exportSymbol(
  'proto.auth.admin.VerifyTokenWithContextResponse',
  null,
  global,
);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.admin.User = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.admin.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.admin.User.displayName = 'proto.auth.admin.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.admin.SignInRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.admin.SignInRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.admin.SignInRequest.displayName = 'proto.auth.admin.SignInRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.admin.SignInResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.auth.admin.SignInResponse.repeatedFields_,
    null,
  );
};
goog.inherits(proto.auth.admin.SignInResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.admin.SignInResponse.displayName =
    'proto.auth.admin.SignInResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.admin.TokenRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.admin.TokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.admin.TokenRequest.displayName = 'proto.auth.admin.TokenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.admin.VerifyTokenResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.admin.VerifyTokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.admin.VerifyTokenResponse.displayName =
    'proto.auth.admin.VerifyTokenResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.admin.TokenWithContextRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.admin.TokenWithContextRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.admin.TokenWithContextRequest.displayName =
    'proto.auth.admin.TokenWithContextRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.admin.VerifyTokenWithContextResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.admin.VerifyTokenWithContextResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.admin.VerifyTokenWithContextResponse.displayName =
    'proto.auth.admin.VerifyTokenWithContextResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.admin.RenewTokenResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.admin.RenewTokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.admin.RenewTokenResponse.displayName =
    'proto.auth.admin.RenewTokenResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.auth.admin.DystroyTokenResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.auth.admin.DystroyTokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.auth.admin.DystroyTokenResponse.displayName =
    'proto.auth.admin.DystroyTokenResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.auth.admin.User.prototype.toObject = function (opt_includeInstance) {
    return proto.auth.admin.User.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.auth.admin.User} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.auth.admin.User.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        email: jspb.Message.getFieldWithDefault(msg, 2, ''),
        employeeNumber: jspb.Message.getFieldWithDefault(msg, 3, ''),
        name: jspb.Message.getFieldWithDefault(msg, 4, ''),
        departmentId: jspb.Message.getFieldWithDefault(msg, 5, 0),
        positionId: jspb.Message.getFieldWithDefault(msg, 6, 0),
        jobId: jspb.Message.getFieldWithDefault(msg, 7, 0),
        phoneNumber: jspb.Message.getFieldWithDefault(msg, 8, 0),
        extensionNumber: jspb.Message.getFieldWithDefault(msg, 9, 0),
        state: jspb.Message.getFieldWithDefault(msg, 10, 0),
        createdAt: jspb.Message.getFieldWithDefault(msg, 11, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.admin.User}
 */
proto.auth.admin.User.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.admin.User();
  return proto.auth.admin.User.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.admin.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.admin.User}
 */
proto.auth.admin.User.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setEmail(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setEmployeeNumber(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setDepartmentId(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPositionId(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setJobId(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setPhoneNumber(value);
        break;
      case 9:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setExtensionNumber(value);
        break;
      case 10:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setState(value);
        break;
      case 11:
        var value = /** @type {string} */ (reader.readString());
        msg.setCreatedAt(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.admin.User.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.auth.admin.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.admin.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.admin.User.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getEmployeeNumber();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getDepartmentId();
  if (f !== 0) {
    writer.writeInt32(5, f);
  }
  f = message.getPositionId();
  if (f !== 0) {
    writer.writeInt32(6, f);
  }
  f = message.getJobId();
  if (f !== 0) {
    writer.writeInt32(7, f);
  }
  f = message.getPhoneNumber();
  if (f !== 0) {
    writer.writeInt64(8, f);
  }
  f = message.getExtensionNumber();
  if (f !== 0) {
    writer.writeInt32(9, f);
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(10, f);
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(11, f);
  }
};

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.auth.admin.User.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.auth.admin.User} returns this
 */
proto.auth.admin.User.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string email = 2;
 * @return {string}
 */
proto.auth.admin.User.prototype.getEmail = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.auth.admin.User} returns this
 */
proto.auth.admin.User.prototype.setEmail = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string employee_number = 3;
 * @return {string}
 */
proto.auth.admin.User.prototype.getEmployeeNumber = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.auth.admin.User} returns this
 */
proto.auth.admin.User.prototype.setEmployeeNumber = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string name = 4;
 * @return {string}
 */
proto.auth.admin.User.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.auth.admin.User} returns this
 */
proto.auth.admin.User.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional int32 department_id = 5;
 * @return {number}
 */
proto.auth.admin.User.prototype.getDepartmentId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.auth.admin.User} returns this
 */
proto.auth.admin.User.prototype.setDepartmentId = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional int32 position_id = 6;
 * @return {number}
 */
proto.auth.admin.User.prototype.getPositionId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/**
 * @param {number} value
 * @return {!proto.auth.admin.User} returns this
 */
proto.auth.admin.User.prototype.setPositionId = function (value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional int32 job_id = 7;
 * @return {number}
 */
proto.auth.admin.User.prototype.getJobId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/**
 * @param {number} value
 * @return {!proto.auth.admin.User} returns this
 */
proto.auth.admin.User.prototype.setJobId = function (value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * optional int64 phone_number = 8;
 * @return {number}
 */
proto.auth.admin.User.prototype.getPhoneNumber = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};

/**
 * @param {number} value
 * @return {!proto.auth.admin.User} returns this
 */
proto.auth.admin.User.prototype.setPhoneNumber = function (value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional int32 extension_number = 9;
 * @return {number}
 */
proto.auth.admin.User.prototype.getExtensionNumber = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};

/**
 * @param {number} value
 * @return {!proto.auth.admin.User} returns this
 */
proto.auth.admin.User.prototype.setExtensionNumber = function (value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};

/**
 * optional int32 state = 10;
 * @return {number}
 */
proto.auth.admin.User.prototype.getState = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};

/**
 * @param {number} value
 * @return {!proto.auth.admin.User} returns this
 */
proto.auth.admin.User.prototype.setState = function (value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};

/**
 * optional string created_at = 11;
 * @return {string}
 */
proto.auth.admin.User.prototype.getCreatedAt = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ''));
};

/**
 * @param {string} value
 * @return {!proto.auth.admin.User} returns this
 */
proto.auth.admin.User.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.auth.admin.SignInRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.auth.admin.SignInRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.auth.admin.SignInRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.auth.admin.SignInRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        email: jspb.Message.getFieldWithDefault(msg, 1, ''),
        password: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.admin.SignInRequest}
 */
proto.auth.admin.SignInRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.admin.SignInRequest();
  return proto.auth.admin.SignInRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.admin.SignInRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.admin.SignInRequest}
 */
proto.auth.admin.SignInRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setEmail(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPassword(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.admin.SignInRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.auth.admin.SignInRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.admin.SignInRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.admin.SignInRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string email = 1;
 * @return {string}
 */
proto.auth.admin.SignInRequest.prototype.getEmail = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.auth.admin.SignInRequest} returns this
 */
proto.auth.admin.SignInRequest.prototype.setEmail = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string password = 2;
 * @return {string}
 */
proto.auth.admin.SignInRequest.prototype.getPassword = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.auth.admin.SignInRequest} returns this
 */
proto.auth.admin.SignInRequest.prototype.setPassword = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.auth.admin.SignInResponse.repeatedFields_ = [6];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.auth.admin.SignInResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.auth.admin.SignInResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.auth.admin.SignInResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.auth.admin.SignInResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        accessToken: jspb.Message.getFieldWithDefault(msg, 3, ''),
        refreshToken: jspb.Message.getFieldWithDefault(msg, 4, ''),
        user:
          (f = msg.getUser()) &&
          proto.auth.admin.User.toObject(includeInstance, f),
        roleList:
          (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.admin.SignInResponse}
 */
proto.auth.admin.SignInResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.admin.SignInResponse();
  return proto.auth.admin.SignInResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.admin.SignInResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.admin.SignInResponse}
 */
proto.auth.admin.SignInResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccessToken(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setRefreshToken(value);
        break;
      case 5:
        var value = new proto.auth.admin.User();
        reader.readMessage(
          value,
          proto.auth.admin.User.deserializeBinaryFromReader,
        );
        msg.setUser(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.addRole(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.admin.SignInResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.auth.admin.SignInResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.admin.SignInResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.admin.SignInResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getAccessToken();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getRefreshToken();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(5, f, proto.auth.admin.User.serializeBinaryToWriter);
  }
  f = message.getRoleList();
  if (f.length > 0) {
    writer.writeRepeatedString(6, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.auth.admin.SignInResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.auth.admin.SignInResponse} returns this
 */
proto.auth.admin.SignInResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.auth.admin.SignInResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.auth.admin.SignInResponse} returns this
 */
proto.auth.admin.SignInResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string access_token = 3;
 * @return {string}
 */
proto.auth.admin.SignInResponse.prototype.getAccessToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.auth.admin.SignInResponse} returns this
 */
proto.auth.admin.SignInResponse.prototype.setAccessToken = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string refresh_token = 4;
 * @return {string}
 */
proto.auth.admin.SignInResponse.prototype.getRefreshToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.auth.admin.SignInResponse} returns this
 */
proto.auth.admin.SignInResponse.prototype.setRefreshToken = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional User user = 5;
 * @return {?proto.auth.admin.User}
 */
proto.auth.admin.SignInResponse.prototype.getUser = function () {
  return /** @type{?proto.auth.admin.User} */ (
    jspb.Message.getWrapperField(this, proto.auth.admin.User, 5)
  );
};

/**
 * @param {?proto.auth.admin.User|undefined} value
 * @return {!proto.auth.admin.SignInResponse} returns this
 */
proto.auth.admin.SignInResponse.prototype.setUser = function (value) {
  return jspb.Message.setWrapperField(this, 5, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.auth.admin.SignInResponse} returns this
 */
proto.auth.admin.SignInResponse.prototype.clearUser = function () {
  return this.setUser(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.auth.admin.SignInResponse.prototype.hasUser = function () {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * repeated string role = 6;
 * @return {!Array<string>}
 */
proto.auth.admin.SignInResponse.prototype.getRoleList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.auth.admin.SignInResponse} returns this
 */
proto.auth.admin.SignInResponse.prototype.setRoleList = function (value) {
  return jspb.Message.setField(this, 6, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.auth.admin.SignInResponse} returns this
 */
proto.auth.admin.SignInResponse.prototype.addRole = function (
  value,
  opt_index,
) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.auth.admin.SignInResponse} returns this
 */
proto.auth.admin.SignInResponse.prototype.clearRoleList = function () {
  return this.setRoleList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.auth.admin.TokenRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.auth.admin.TokenRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.auth.admin.TokenRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.auth.admin.TokenRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        accessToken: jspb.Message.getFieldWithDefault(msg, 1, ''),
        refreshToken: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.admin.TokenRequest}
 */
proto.auth.admin.TokenRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.admin.TokenRequest();
  return proto.auth.admin.TokenRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.admin.TokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.admin.TokenRequest}
 */
proto.auth.admin.TokenRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccessToken(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setRefreshToken(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.admin.TokenRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.auth.admin.TokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.admin.TokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.admin.TokenRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getAccessToken();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getRefreshToken();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string access_token = 1;
 * @return {string}
 */
proto.auth.admin.TokenRequest.prototype.getAccessToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.auth.admin.TokenRequest} returns this
 */
proto.auth.admin.TokenRequest.prototype.setAccessToken = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string refresh_token = 2;
 * @return {string}
 */
proto.auth.admin.TokenRequest.prototype.getRefreshToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.auth.admin.TokenRequest} returns this
 */
proto.auth.admin.TokenRequest.prototype.setRefreshToken = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.auth.admin.VerifyTokenResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.auth.admin.VerifyTokenResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.auth.admin.VerifyTokenResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.auth.admin.VerifyTokenResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.admin.VerifyTokenResponse}
 */
proto.auth.admin.VerifyTokenResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.admin.VerifyTokenResponse();
  return proto.auth.admin.VerifyTokenResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.admin.VerifyTokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.admin.VerifyTokenResponse}
 */
proto.auth.admin.VerifyTokenResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.admin.VerifyTokenResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.auth.admin.VerifyTokenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.admin.VerifyTokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.admin.VerifyTokenResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.auth.admin.VerifyTokenResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.auth.admin.VerifyTokenResponse} returns this
 */
proto.auth.admin.VerifyTokenResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.auth.admin.VerifyTokenResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.auth.admin.VerifyTokenResponse} returns this
 */
proto.auth.admin.VerifyTokenResponse.prototype.setErrorMessage = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.auth.admin.TokenWithContextRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.auth.admin.TokenWithContextRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.auth.admin.TokenWithContextRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.auth.admin.TokenWithContextRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        accessToken: jspb.Message.getFieldWithDefault(msg, 1, ''),
        refreshToken: jspb.Message.getFieldWithDefault(msg, 2, ''),
        resource: jspb.Message.getFieldWithDefault(msg, 3, ''),
        action: jspb.Message.getFieldWithDefault(msg, 4, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.admin.TokenWithContextRequest}
 */
proto.auth.admin.TokenWithContextRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.admin.TokenWithContextRequest();
  return proto.auth.admin.TokenWithContextRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.admin.TokenWithContextRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.admin.TokenWithContextRequest}
 */
proto.auth.admin.TokenWithContextRequest.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {string} */ (reader.readString());
          msg.setAccessToken(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setRefreshToken(value);
          break;
        case 3:
          var value = /** @type {string} */ (reader.readString());
          msg.setResource(value);
          break;
        case 4:
          var value = /** @type {string} */ (reader.readString());
          msg.setAction(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.admin.TokenWithContextRequest.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.auth.admin.TokenWithContextRequest.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.admin.TokenWithContextRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.admin.TokenWithContextRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getAccessToken();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getRefreshToken();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getResource();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional string access_token = 1;
 * @return {string}
 */
proto.auth.admin.TokenWithContextRequest.prototype.getAccessToken =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 1, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.auth.admin.TokenWithContextRequest} returns this
 */
proto.auth.admin.TokenWithContextRequest.prototype.setAccessToken = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string refresh_token = 2;
 * @return {string}
 */
proto.auth.admin.TokenWithContextRequest.prototype.getRefreshToken =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.auth.admin.TokenWithContextRequest} returns this
 */
proto.auth.admin.TokenWithContextRequest.prototype.setRefreshToken = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string resource = 3;
 * @return {string}
 */
proto.auth.admin.TokenWithContextRequest.prototype.getResource = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.auth.admin.TokenWithContextRequest} returns this
 */
proto.auth.admin.TokenWithContextRequest.prototype.setResource = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string action = 4;
 * @return {string}
 */
proto.auth.admin.TokenWithContextRequest.prototype.getAction = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.auth.admin.TokenWithContextRequest} returns this
 */
proto.auth.admin.TokenWithContextRequest.prototype.setAction = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.auth.admin.VerifyTokenWithContextResponse.prototype.toObject =
    function (opt_includeInstance) {
      return proto.auth.admin.VerifyTokenWithContextResponse.toObject(
        opt_includeInstance,
        this,
      );
    };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.auth.admin.VerifyTokenWithContextResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.auth.admin.VerifyTokenWithContextResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.admin.VerifyTokenWithContextResponse}
 */
proto.auth.admin.VerifyTokenWithContextResponse.deserializeBinary = function (
  bytes,
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.admin.VerifyTokenWithContextResponse();
  return proto.auth.admin.VerifyTokenWithContextResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.admin.VerifyTokenWithContextResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.admin.VerifyTokenWithContextResponse}
 */
proto.auth.admin.VerifyTokenWithContextResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {boolean} */ (reader.readBool());
          msg.setSuccess(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setErrorMessage(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.admin.VerifyTokenWithContextResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.auth.admin.VerifyTokenWithContextResponse.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.admin.VerifyTokenWithContextResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.admin.VerifyTokenWithContextResponse.serializeBinaryToWriter =
  function (message, writer) {
    var f = undefined;
    f = message.getSuccess();
    if (f) {
      writer.writeBool(1, f);
    }
    f = message.getErrorMessage();
    if (f.length > 0) {
      writer.writeString(2, f);
    }
  };

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.auth.admin.VerifyTokenWithContextResponse.prototype.getSuccess =
  function () {
    return /** @type {boolean} */ (
      jspb.Message.getBooleanFieldWithDefault(this, 1, false)
    );
  };

/**
 * @param {boolean} value
 * @return {!proto.auth.admin.VerifyTokenWithContextResponse} returns this
 */
proto.auth.admin.VerifyTokenWithContextResponse.prototype.setSuccess =
  function (value) {
    return jspb.Message.setProto3BooleanField(this, 1, value);
  };

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.auth.admin.VerifyTokenWithContextResponse.prototype.getErrorMessage =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.auth.admin.VerifyTokenWithContextResponse} returns this
 */
proto.auth.admin.VerifyTokenWithContextResponse.prototype.setErrorMessage =
  function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
  };

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.auth.admin.RenewTokenResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.auth.admin.RenewTokenResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.auth.admin.RenewTokenResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.auth.admin.RenewTokenResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        accessToken: jspb.Message.getFieldWithDefault(msg, 3, ''),
        refreshToken: jspb.Message.getFieldWithDefault(msg, 4, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.admin.RenewTokenResponse}
 */
proto.auth.admin.RenewTokenResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.admin.RenewTokenResponse();
  return proto.auth.admin.RenewTokenResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.admin.RenewTokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.admin.RenewTokenResponse}
 */
proto.auth.admin.RenewTokenResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccessToken(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setRefreshToken(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.admin.RenewTokenResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.auth.admin.RenewTokenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.admin.RenewTokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.admin.RenewTokenResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getAccessToken();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getRefreshToken();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.auth.admin.RenewTokenResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.auth.admin.RenewTokenResponse} returns this
 */
proto.auth.admin.RenewTokenResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.auth.admin.RenewTokenResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.auth.admin.RenewTokenResponse} returns this
 */
proto.auth.admin.RenewTokenResponse.prototype.setErrorMessage = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string access_token = 3;
 * @return {string}
 */
proto.auth.admin.RenewTokenResponse.prototype.getAccessToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.auth.admin.RenewTokenResponse} returns this
 */
proto.auth.admin.RenewTokenResponse.prototype.setAccessToken = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string refresh_token = 4;
 * @return {string}
 */
proto.auth.admin.RenewTokenResponse.prototype.getRefreshToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.auth.admin.RenewTokenResponse} returns this
 */
proto.auth.admin.RenewTokenResponse.prototype.setRefreshToken = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.auth.admin.DystroyTokenResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.auth.admin.DystroyTokenResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.auth.admin.DystroyTokenResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.auth.admin.DystroyTokenResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.auth.admin.DystroyTokenResponse}
 */
proto.auth.admin.DystroyTokenResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.auth.admin.DystroyTokenResponse();
  return proto.auth.admin.DystroyTokenResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.auth.admin.DystroyTokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.auth.admin.DystroyTokenResponse}
 */
proto.auth.admin.DystroyTokenResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.auth.admin.DystroyTokenResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.auth.admin.DystroyTokenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.auth.admin.DystroyTokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.auth.admin.DystroyTokenResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.auth.admin.DystroyTokenResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.auth.admin.DystroyTokenResponse} returns this
 */
proto.auth.admin.DystroyTokenResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.auth.admin.DystroyTokenResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.auth.admin.DystroyTokenResponse} returns this
 */
proto.auth.admin.DystroyTokenResponse.prototype.setErrorMessage = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

goog.object.extend(exports, proto.auth.admin);
