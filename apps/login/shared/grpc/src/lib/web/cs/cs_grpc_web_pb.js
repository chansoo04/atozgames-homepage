/**
 * @fileoverview gRPC-Web generated client stub for cs
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: cs.proto

/* eslint-disable */
// @ts-nocheck

const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.cs = require('./cs_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.cs.CustomerServiceClient = function (hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.cs.CustomerServicePromiseClient = function (
  hostname,
  credentials,
  options,
) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.cs.CustomerQuestionRequest,
 *   !proto.cs.CustomerQuestionResponse>}
 */
const methodDescriptor_CustomerService_CreateCustomerQuestion =
  new grpc.web.MethodDescriptor(
    '/cs.CustomerService/CreateCustomerQuestion',
    grpc.web.MethodType.UNARY,
    proto.cs.CustomerQuestionRequest,
    proto.cs.CustomerQuestionResponse,
    /**
     * @param {!proto.cs.CustomerQuestionRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.cs.CustomerQuestionResponse.deserializeBinary,
  );

/**
 * @param {!proto.cs.CustomerQuestionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.cs.CustomerQuestionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.cs.CustomerQuestionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.cs.CustomerServiceClient.prototype.createCustomerQuestion = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/cs.CustomerService/CreateCustomerQuestion',
    request,
    metadata || {},
    methodDescriptor_CustomerService_CreateCustomerQuestion,
    callback,
  );
};

/**
 * @param {!proto.cs.CustomerQuestionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.cs.CustomerQuestionResponse>}
 *     Promise that resolves to the response
 */
proto.cs.CustomerServicePromiseClient.prototype.createCustomerQuestion =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ + '/cs.CustomerService/CreateCustomerQuestion',
      request,
      metadata || {},
      methodDescriptor_CustomerService_CreateCustomerQuestion,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.cs.CustomerQuestionRequest,
 *   !proto.cs.CustomerQuestionResponse>}
 */
const methodDescriptor_CustomerService_UpdateCustomerQuestion =
  new grpc.web.MethodDescriptor(
    '/cs.CustomerService/UpdateCustomerQuestion',
    grpc.web.MethodType.UNARY,
    proto.cs.CustomerQuestionRequest,
    proto.cs.CustomerQuestionResponse,
    /**
     * @param {!proto.cs.CustomerQuestionRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.cs.CustomerQuestionResponse.deserializeBinary,
  );

/**
 * @param {!proto.cs.CustomerQuestionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.cs.CustomerQuestionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.cs.CustomerQuestionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.cs.CustomerServiceClient.prototype.updateCustomerQuestion = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/cs.CustomerService/UpdateCustomerQuestion',
    request,
    metadata || {},
    methodDescriptor_CustomerService_UpdateCustomerQuestion,
    callback,
  );
};

/**
 * @param {!proto.cs.CustomerQuestionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.cs.CustomerQuestionResponse>}
 *     Promise that resolves to the response
 */
proto.cs.CustomerServicePromiseClient.prototype.updateCustomerQuestion =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ + '/cs.CustomerService/UpdateCustomerQuestion',
      request,
      metadata || {},
      methodDescriptor_CustomerService_UpdateCustomerQuestion,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.cs.CustomerQuestionRequest,
 *   !proto.cs.DefaultResponse>}
 */
const methodDescriptor_CustomerService_DeactivateCustomerQuestion =
  new grpc.web.MethodDescriptor(
    '/cs.CustomerService/DeactivateCustomerQuestion',
    grpc.web.MethodType.UNARY,
    proto.cs.CustomerQuestionRequest,
    proto.cs.DefaultResponse,
    /**
     * @param {!proto.cs.CustomerQuestionRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.cs.DefaultResponse.deserializeBinary,
  );

/**
 * @param {!proto.cs.CustomerQuestionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.cs.DefaultResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.cs.DefaultResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.cs.CustomerServiceClient.prototype.deactivateCustomerQuestion = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/cs.CustomerService/DeactivateCustomerQuestion',
    request,
    metadata || {},
    methodDescriptor_CustomerService_DeactivateCustomerQuestion,
    callback,
  );
};

/**
 * @param {!proto.cs.CustomerQuestionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.cs.DefaultResponse>}
 *     Promise that resolves to the response
 */
proto.cs.CustomerServicePromiseClient.prototype.deactivateCustomerQuestion =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ + '/cs.CustomerService/DeactivateCustomerQuestion',
      request,
      metadata || {},
      methodDescriptor_CustomerService_DeactivateCustomerQuestion,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.cs.CustomerQuestionRequest,
 *   !proto.cs.CustomerQuestionResponse>}
 */
const methodDescriptor_CustomerService_GetCustomerQuestion =
  new grpc.web.MethodDescriptor(
    '/cs.CustomerService/GetCustomerQuestion',
    grpc.web.MethodType.UNARY,
    proto.cs.CustomerQuestionRequest,
    proto.cs.CustomerQuestionResponse,
    /**
     * @param {!proto.cs.CustomerQuestionRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.cs.CustomerQuestionResponse.deserializeBinary,
  );

/**
 * @param {!proto.cs.CustomerQuestionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.cs.CustomerQuestionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.cs.CustomerQuestionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.cs.CustomerServiceClient.prototype.getCustomerQuestion = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/cs.CustomerService/GetCustomerQuestion',
    request,
    metadata || {},
    methodDescriptor_CustomerService_GetCustomerQuestion,
    callback,
  );
};

/**
 * @param {!proto.cs.CustomerQuestionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.cs.CustomerQuestionResponse>}
 *     Promise that resolves to the response
 */
proto.cs.CustomerServicePromiseClient.prototype.getCustomerQuestion = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/cs.CustomerService/GetCustomerQuestion',
    request,
    metadata || {},
    methodDescriptor_CustomerService_GetCustomerQuestion,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.cs.CustomerQuestionsRequest,
 *   !proto.cs.CustomerQuestionsResponse>}
 */
const methodDescriptor_CustomerService_GetCustomerQuestions =
  new grpc.web.MethodDescriptor(
    '/cs.CustomerService/GetCustomerQuestions',
    grpc.web.MethodType.UNARY,
    proto.cs.CustomerQuestionsRequest,
    proto.cs.CustomerQuestionsResponse,
    /**
     * @param {!proto.cs.CustomerQuestionsRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.cs.CustomerQuestionsResponse.deserializeBinary,
  );

/**
 * @param {!proto.cs.CustomerQuestionsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.cs.CustomerQuestionsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.cs.CustomerQuestionsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.cs.CustomerServiceClient.prototype.getCustomerQuestions = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/cs.CustomerService/GetCustomerQuestions',
    request,
    metadata || {},
    methodDescriptor_CustomerService_GetCustomerQuestions,
    callback,
  );
};

/**
 * @param {!proto.cs.CustomerQuestionsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.cs.CustomerQuestionsResponse>}
 *     Promise that resolves to the response
 */
proto.cs.CustomerServicePromiseClient.prototype.getCustomerQuestions =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ + '/cs.CustomerService/GetCustomerQuestions',
      request,
      metadata || {},
      methodDescriptor_CustomerService_GetCustomerQuestions,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.cs.CustomerQuestionReplyRequest,
 *   !proto.cs.CustomerQuestionReplyResponse>}
 */
const methodDescriptor_CustomerService_CreateCustomerQuestionReply =
  new grpc.web.MethodDescriptor(
    '/cs.CustomerService/CreateCustomerQuestionReply',
    grpc.web.MethodType.UNARY,
    proto.cs.CustomerQuestionReplyRequest,
    proto.cs.CustomerQuestionReplyResponse,
    /**
     * @param {!proto.cs.CustomerQuestionReplyRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.cs.CustomerQuestionReplyResponse.deserializeBinary,
  );

/**
 * @param {!proto.cs.CustomerQuestionReplyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.cs.CustomerQuestionReplyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.cs.CustomerQuestionReplyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.cs.CustomerServiceClient.prototype.createCustomerQuestionReply =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ + '/cs.CustomerService/CreateCustomerQuestionReply',
      request,
      metadata || {},
      methodDescriptor_CustomerService_CreateCustomerQuestionReply,
      callback,
    );
  };

/**
 * @param {!proto.cs.CustomerQuestionReplyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.cs.CustomerQuestionReplyResponse>}
 *     Promise that resolves to the response
 */
proto.cs.CustomerServicePromiseClient.prototype.createCustomerQuestionReply =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ + '/cs.CustomerService/CreateCustomerQuestionReply',
      request,
      metadata || {},
      methodDescriptor_CustomerService_CreateCustomerQuestionReply,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.cs.CustomerQuestionReplyRequest,
 *   !proto.cs.CustomerQuestionReplyResponse>}
 */
const methodDescriptor_CustomerService_UpdateCustomerQuestionReply =
  new grpc.web.MethodDescriptor(
    '/cs.CustomerService/UpdateCustomerQuestionReply',
    grpc.web.MethodType.UNARY,
    proto.cs.CustomerQuestionReplyRequest,
    proto.cs.CustomerQuestionReplyResponse,
    /**
     * @param {!proto.cs.CustomerQuestionReplyRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.cs.CustomerQuestionReplyResponse.deserializeBinary,
  );

/**
 * @param {!proto.cs.CustomerQuestionReplyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.cs.CustomerQuestionReplyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.cs.CustomerQuestionReplyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.cs.CustomerServiceClient.prototype.updateCustomerQuestionReply =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ + '/cs.CustomerService/UpdateCustomerQuestionReply',
      request,
      metadata || {},
      methodDescriptor_CustomerService_UpdateCustomerQuestionReply,
      callback,
    );
  };

/**
 * @param {!proto.cs.CustomerQuestionReplyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.cs.CustomerQuestionReplyResponse>}
 *     Promise that resolves to the response
 */
proto.cs.CustomerServicePromiseClient.prototype.updateCustomerQuestionReply =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ + '/cs.CustomerService/UpdateCustomerQuestionReply',
      request,
      metadata || {},
      methodDescriptor_CustomerService_UpdateCustomerQuestionReply,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.cs.CustomerQuestionReplyRequest,
 *   !proto.cs.DefaultResponse>}
 */
const methodDescriptor_CustomerService_DeactivateCustomerQuestionReply =
  new grpc.web.MethodDescriptor(
    '/cs.CustomerService/DeactivateCustomerQuestionReply',
    grpc.web.MethodType.UNARY,
    proto.cs.CustomerQuestionReplyRequest,
    proto.cs.DefaultResponse,
    /**
     * @param {!proto.cs.CustomerQuestionReplyRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.cs.DefaultResponse.deserializeBinary,
  );

/**
 * @param {!proto.cs.CustomerQuestionReplyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.cs.DefaultResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.cs.DefaultResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.cs.CustomerServiceClient.prototype.deactivateCustomerQuestionReply =
  function (request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ + '/cs.CustomerService/DeactivateCustomerQuestionReply',
      request,
      metadata || {},
      methodDescriptor_CustomerService_DeactivateCustomerQuestionReply,
      callback,
    );
  };

/**
 * @param {!proto.cs.CustomerQuestionReplyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.cs.DefaultResponse>}
 *     Promise that resolves to the response
 */
proto.cs.CustomerServicePromiseClient.prototype.deactivateCustomerQuestionReply =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ + '/cs.CustomerService/DeactivateCustomerQuestionReply',
      request,
      metadata || {},
      methodDescriptor_CustomerService_DeactivateCustomerQuestionReply,
    );
  };

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.cs.CustomerQuestionReplyRequest,
 *   !proto.cs.CustomerQuestionRepliesResponse>}
 */
const methodDescriptor_CustomerService_GetCustomerQuestionReply =
  new grpc.web.MethodDescriptor(
    '/cs.CustomerService/GetCustomerQuestionReply',
    grpc.web.MethodType.UNARY,
    proto.cs.CustomerQuestionReplyRequest,
    proto.cs.CustomerQuestionRepliesResponse,
    /**
     * @param {!proto.cs.CustomerQuestionReplyRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.cs.CustomerQuestionRepliesResponse.deserializeBinary,
  );

/**
 * @param {!proto.cs.CustomerQuestionReplyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.cs.CustomerQuestionRepliesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.cs.CustomerQuestionRepliesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.cs.CustomerServiceClient.prototype.getCustomerQuestionReply = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/cs.CustomerService/GetCustomerQuestionReply',
    request,
    metadata || {},
    methodDescriptor_CustomerService_GetCustomerQuestionReply,
    callback,
  );
};

/**
 * @param {!proto.cs.CustomerQuestionReplyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.cs.CustomerQuestionRepliesResponse>}
 *     Promise that resolves to the response
 */
proto.cs.CustomerServicePromiseClient.prototype.getCustomerQuestionReply =
  function (request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ + '/cs.CustomerService/GetCustomerQuestionReply',
      request,
      metadata || {},
      methodDescriptor_CustomerService_GetCustomerQuestionReply,
    );
  };

module.exports = proto.cs;
