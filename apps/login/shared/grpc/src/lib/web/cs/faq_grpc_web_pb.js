/**
 * @fileoverview gRPC-Web generated client stub for cs
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: faq.proto

/* eslint-disable */
// @ts-nocheck

const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.cs = require('./faq_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.cs.FAQServiceClient = function (hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.cs.FAQServicePromiseClient = function (hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.cs.CreateFAQRequest,
 *   !proto.cs.DefaultFAQResponse>}
 */
const methodDescriptor_FAQService_CreateFAQ = new grpc.web.MethodDescriptor(
  '/cs.FAQService/CreateFAQ',
  grpc.web.MethodType.UNARY,
  proto.cs.CreateFAQRequest,
  proto.cs.DefaultFAQResponse,
  /**
   * @param {!proto.cs.CreateFAQRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.cs.DefaultFAQResponse.deserializeBinary,
);

/**
 * @param {!proto.cs.CreateFAQRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.cs.DefaultFAQResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.cs.DefaultFAQResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.cs.FAQServiceClient.prototype.createFAQ = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/cs.FAQService/CreateFAQ',
    request,
    metadata || {},
    methodDescriptor_FAQService_CreateFAQ,
    callback,
  );
};

/**
 * @param {!proto.cs.CreateFAQRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.cs.DefaultFAQResponse>}
 *     Promise that resolves to the response
 */
proto.cs.FAQServicePromiseClient.prototype.createFAQ = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/cs.FAQService/CreateFAQ',
    request,
    metadata || {},
    methodDescriptor_FAQService_CreateFAQ,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.cs.UpdateFAQRequest,
 *   !proto.cs.DefaultFAQResponse>}
 */
const methodDescriptor_FAQService_UpdateFAQ = new grpc.web.MethodDescriptor(
  '/cs.FAQService/UpdateFAQ',
  grpc.web.MethodType.UNARY,
  proto.cs.UpdateFAQRequest,
  proto.cs.DefaultFAQResponse,
  /**
   * @param {!proto.cs.UpdateFAQRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.cs.DefaultFAQResponse.deserializeBinary,
);

/**
 * @param {!proto.cs.UpdateFAQRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.cs.DefaultFAQResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.cs.DefaultFAQResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.cs.FAQServiceClient.prototype.updateFAQ = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/cs.FAQService/UpdateFAQ',
    request,
    metadata || {},
    methodDescriptor_FAQService_UpdateFAQ,
    callback,
  );
};

/**
 * @param {!proto.cs.UpdateFAQRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.cs.DefaultFAQResponse>}
 *     Promise that resolves to the response
 */
proto.cs.FAQServicePromiseClient.prototype.updateFAQ = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/cs.FAQService/UpdateFAQ',
    request,
    metadata || {},
    methodDescriptor_FAQService_UpdateFAQ,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.cs.DeleteFAQRequest,
 *   !proto.cs.DefaultFAQResponse>}
 */
const methodDescriptor_FAQService_DeleteFAQ = new grpc.web.MethodDescriptor(
  '/cs.FAQService/DeleteFAQ',
  grpc.web.MethodType.UNARY,
  proto.cs.DeleteFAQRequest,
  proto.cs.DefaultFAQResponse,
  /**
   * @param {!proto.cs.DeleteFAQRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.cs.DefaultFAQResponse.deserializeBinary,
);

/**
 * @param {!proto.cs.DeleteFAQRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.cs.DefaultFAQResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.cs.DefaultFAQResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.cs.FAQServiceClient.prototype.deleteFAQ = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/cs.FAQService/DeleteFAQ',
    request,
    metadata || {},
    methodDescriptor_FAQService_DeleteFAQ,
    callback,
  );
};

/**
 * @param {!proto.cs.DeleteFAQRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.cs.DefaultFAQResponse>}
 *     Promise that resolves to the response
 */
proto.cs.FAQServicePromiseClient.prototype.deleteFAQ = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/cs.FAQService/DeleteFAQ',
    request,
    metadata || {},
    methodDescriptor_FAQService_DeleteFAQ,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.cs.GetFAQRequest,
 *   !proto.cs.GetFAQResponse>}
 */
const methodDescriptor_FAQService_GetFAQ = new grpc.web.MethodDescriptor(
  '/cs.FAQService/GetFAQ',
  grpc.web.MethodType.UNARY,
  proto.cs.GetFAQRequest,
  proto.cs.GetFAQResponse,
  /**
   * @param {!proto.cs.GetFAQRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.cs.GetFAQResponse.deserializeBinary,
);

/**
 * @param {!proto.cs.GetFAQRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.cs.GetFAQResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.cs.GetFAQResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.cs.FAQServiceClient.prototype.getFAQ = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/cs.FAQService/GetFAQ',
    request,
    metadata || {},
    methodDescriptor_FAQService_GetFAQ,
    callback,
  );
};

/**
 * @param {!proto.cs.GetFAQRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.cs.GetFAQResponse>}
 *     Promise that resolves to the response
 */
proto.cs.FAQServicePromiseClient.prototype.getFAQ = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/cs.FAQService/GetFAQ',
    request,
    metadata || {},
    methodDescriptor_FAQService_GetFAQ,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.cs.GetFAQsRequest,
 *   !proto.cs.GetFAQsResponse>}
 */
const methodDescriptor_FAQService_GetFAQs = new grpc.web.MethodDescriptor(
  '/cs.FAQService/GetFAQs',
  grpc.web.MethodType.UNARY,
  proto.cs.GetFAQsRequest,
  proto.cs.GetFAQsResponse,
  /**
   * @param {!proto.cs.GetFAQsRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.cs.GetFAQsResponse.deserializeBinary,
);

/**
 * @param {!proto.cs.GetFAQsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.cs.GetFAQsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.cs.GetFAQsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.cs.FAQServiceClient.prototype.getFAQs = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/cs.FAQService/GetFAQs',
    request,
    metadata || {},
    methodDescriptor_FAQService_GetFAQs,
    callback,
  );
};

/**
 * @param {!proto.cs.GetFAQsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.cs.GetFAQsResponse>}
 *     Promise that resolves to the response
 */
proto.cs.FAQServicePromiseClient.prototype.getFAQs = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/cs.FAQService/GetFAQs',
    request,
    metadata || {},
    methodDescriptor_FAQService_GetFAQs,
  );
};

module.exports = proto.cs;
