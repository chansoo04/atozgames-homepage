// source: economy.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

goog.exportSymbol('proto.economy.AccountIdParam', null, global);
goog.exportSymbol('proto.economy.Amount', null, global);
goog.exportSymbol('proto.economy.BalanceAndMoneyBoxResponse', null, global);
goog.exportSymbol('proto.economy.BetRequest', null, global);
goog.exportSymbol('proto.economy.BetResponse', null, global);
goog.exportSymbol('proto.economy.CreateBalanceResponse', null, global);
goog.exportSymbol('proto.economy.CreateMoneyBoxResponse', null, global);
goog.exportSymbol('proto.economy.CreatePotRequest', null, global);
goog.exportSymbol('proto.economy.CreatePotResponse', null, global);
goog.exportSymbol('proto.economy.DieResponse', null, global);
goog.exportSymbol('proto.economy.TransferInRequest', null, global);
goog.exportSymbol('proto.economy.TransferInResponse', null, global);
goog.exportSymbol('proto.economy.UpdateMoneyBoxRequest', null, global);
goog.exportSymbol('proto.economy.UpdateMoneyBoxResponse', null, global);
goog.exportSymbol('proto.economy.WinResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.Amount = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.Amount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.Amount.displayName = 'proto.economy.Amount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.AccountIdParam = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.AccountIdParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.AccountIdParam.displayName = 'proto.economy.AccountIdParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.CreateBalanceResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.CreateBalanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.CreateBalanceResponse.displayName =
    'proto.economy.CreateBalanceResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.CreateMoneyBoxResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.CreateMoneyBoxResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.CreateMoneyBoxResponse.displayName =
    'proto.economy.CreateMoneyBoxResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.BalanceAndMoneyBoxResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.BalanceAndMoneyBoxResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.BalanceAndMoneyBoxResponse.displayName =
    'proto.economy.BalanceAndMoneyBoxResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.UpdateMoneyBoxRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.UpdateMoneyBoxRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.UpdateMoneyBoxRequest.displayName =
    'proto.economy.UpdateMoneyBoxRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.UpdateMoneyBoxResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.UpdateMoneyBoxResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.UpdateMoneyBoxResponse.displayName =
    'proto.economy.UpdateMoneyBoxResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.CreatePotRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.CreatePotRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.CreatePotRequest.displayName = 'proto.economy.CreatePotRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.CreatePotResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.CreatePotResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.CreatePotResponse.displayName =
    'proto.economy.CreatePotResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.BetRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.BetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.BetRequest.displayName = 'proto.economy.BetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.BetResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.BetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.BetResponse.displayName = 'proto.economy.BetResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.DieResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.DieResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.DieResponse.displayName = 'proto.economy.DieResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.WinResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.WinResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.WinResponse.displayName = 'proto.economy.WinResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.TransferInRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.TransferInRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.TransferInRequest.displayName =
    'proto.economy.TransferInRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.TransferInResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.TransferInResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.TransferInResponse.displayName =
    'proto.economy.TransferInResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.Amount.prototype.toObject = function (opt_includeInstance) {
    return proto.economy.Amount.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.Amount} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.Amount.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        game: jspb.Message.getFieldWithDefault(msg, 1, ''),
        cash: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.Amount}
 */
proto.economy.Amount.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.Amount();
  return proto.economy.Amount.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.Amount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.Amount}
 */
proto.economy.Amount.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setGame(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setCash(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.Amount.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.Amount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.Amount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.Amount.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getGame();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getCash();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string game = 1;
 * @return {string}
 */
proto.economy.Amount.prototype.getGame = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.Amount} returns this
 */
proto.economy.Amount.prototype.setGame = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string cash = 2;
 * @return {string}
 */
proto.economy.Amount.prototype.getCash = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.Amount} returns this
 */
proto.economy.Amount.prototype.setCash = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.AccountIdParam.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.AccountIdParam.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.AccountIdParam} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.AccountIdParam.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        accountId: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.AccountIdParam}
 */
proto.economy.AccountIdParam.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.AccountIdParam();
  return proto.economy.AccountIdParam.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.AccountIdParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.AccountIdParam}
 */
proto.economy.AccountIdParam.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccountId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.AccountIdParam.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.AccountIdParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.AccountIdParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.AccountIdParam.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.economy.AccountIdParam.prototype.getAccountId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.AccountIdParam} returns this
 */
proto.economy.AccountIdParam.prototype.setAccountId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.CreateBalanceResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.CreateBalanceResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.CreateBalanceResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.CreateBalanceResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        balanceId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.CreateBalanceResponse}
 */
proto.economy.CreateBalanceResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.CreateBalanceResponse();
  return proto.economy.CreateBalanceResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.CreateBalanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.CreateBalanceResponse}
 */
proto.economy.CreateBalanceResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setBalanceId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.CreateBalanceResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.CreateBalanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.CreateBalanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.CreateBalanceResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getBalanceId();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.economy.CreateBalanceResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.economy.CreateBalanceResponse} returns this
 */
proto.economy.CreateBalanceResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.economy.CreateBalanceResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.CreateBalanceResponse} returns this
 */
proto.economy.CreateBalanceResponse.prototype.setErrorMessage = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional int32 balance_id = 3;
 * @return {number}
 */
proto.economy.CreateBalanceResponse.prototype.getBalanceId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.economy.CreateBalanceResponse} returns this
 */
proto.economy.CreateBalanceResponse.prototype.setBalanceId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.CreateMoneyBoxResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.CreateMoneyBoxResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.CreateMoneyBoxResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.CreateMoneyBoxResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        moneyBoxId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.CreateMoneyBoxResponse}
 */
proto.economy.CreateMoneyBoxResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.CreateMoneyBoxResponse();
  return proto.economy.CreateMoneyBoxResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.CreateMoneyBoxResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.CreateMoneyBoxResponse}
 */
proto.economy.CreateMoneyBoxResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setMoneyBoxId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.CreateMoneyBoxResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.CreateMoneyBoxResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.CreateMoneyBoxResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.CreateMoneyBoxResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getMoneyBoxId();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.economy.CreateMoneyBoxResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.economy.CreateMoneyBoxResponse} returns this
 */
proto.economy.CreateMoneyBoxResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.economy.CreateMoneyBoxResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.CreateMoneyBoxResponse} returns this
 */
proto.economy.CreateMoneyBoxResponse.prototype.setErrorMessage = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional int32 money_box_id = 3;
 * @return {number}
 */
proto.economy.CreateMoneyBoxResponse.prototype.getMoneyBoxId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.economy.CreateMoneyBoxResponse} returns this
 */
proto.economy.CreateMoneyBoxResponse.prototype.setMoneyBoxId = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.BalanceAndMoneyBoxResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.BalanceAndMoneyBoxResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.BalanceAndMoneyBoxResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.BalanceAndMoneyBoxResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        balance:
          (f = msg.getBalance()) &&
          proto.economy.Amount.toObject(includeInstance, f),
        moneyBox:
          (f = msg.getMoneyBox()) &&
          proto.economy.Amount.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.BalanceAndMoneyBoxResponse}
 */
proto.economy.BalanceAndMoneyBoxResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.BalanceAndMoneyBoxResponse();
  return proto.economy.BalanceAndMoneyBoxResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.BalanceAndMoneyBoxResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.BalanceAndMoneyBoxResponse}
 */
proto.economy.BalanceAndMoneyBoxResponse.deserializeBinaryFromReader =
  function (msg, reader) {
    while (reader.nextField()) {
      if (reader.isEndGroup()) {
        break;
      }
      var field = reader.getFieldNumber();
      switch (field) {
        case 1:
          var value = /** @type {boolean} */ (reader.readBool());
          msg.setSuccess(value);
          break;
        case 2:
          var value = /** @type {string} */ (reader.readString());
          msg.setErrorMessage(value);
          break;
        case 3:
          var value = new proto.economy.Amount();
          reader.readMessage(
            value,
            proto.economy.Amount.deserializeBinaryFromReader,
          );
          msg.setBalance(value);
          break;
        case 4:
          var value = new proto.economy.Amount();
          reader.readMessage(
            value,
            proto.economy.Amount.deserializeBinaryFromReader,
          );
          msg.setMoneyBox(value);
          break;
        default:
          reader.skipField();
          break;
      }
    }
    return msg;
  };

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.BalanceAndMoneyBoxResponse.prototype.serializeBinary =
  function () {
    var writer = new jspb.BinaryWriter();
    proto.economy.BalanceAndMoneyBoxResponse.serializeBinaryToWriter(
      this,
      writer,
    );
    return writer.getResultBuffer();
  };

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.BalanceAndMoneyBoxResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.BalanceAndMoneyBoxResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(3, f, proto.economy.Amount.serializeBinaryToWriter);
  }
  f = message.getMoneyBox();
  if (f != null) {
    writer.writeMessage(4, f, proto.economy.Amount.serializeBinaryToWriter);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.economy.BalanceAndMoneyBoxResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.economy.BalanceAndMoneyBoxResponse} returns this
 */
proto.economy.BalanceAndMoneyBoxResponse.prototype.setSuccess = function (
  value,
) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.economy.BalanceAndMoneyBoxResponse.prototype.getErrorMessage =
  function () {
    return /** @type {string} */ (
      jspb.Message.getFieldWithDefault(this, 2, '')
    );
  };

/**
 * @param {string} value
 * @return {!proto.economy.BalanceAndMoneyBoxResponse} returns this
 */
proto.economy.BalanceAndMoneyBoxResponse.prototype.setErrorMessage = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional Amount balance = 3;
 * @return {?proto.economy.Amount}
 */
proto.economy.BalanceAndMoneyBoxResponse.prototype.getBalance = function () {
  return /** @type{?proto.economy.Amount} */ (
    jspb.Message.getWrapperField(this, proto.economy.Amount, 3)
  );
};

/**
 * @param {?proto.economy.Amount|undefined} value
 * @return {!proto.economy.BalanceAndMoneyBoxResponse} returns this
 */
proto.economy.BalanceAndMoneyBoxResponse.prototype.setBalance = function (
  value,
) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.economy.BalanceAndMoneyBoxResponse} returns this
 */
proto.economy.BalanceAndMoneyBoxResponse.prototype.clearBalance = function () {
  return this.setBalance(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.economy.BalanceAndMoneyBoxResponse.prototype.hasBalance = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional Amount money_box = 4;
 * @return {?proto.economy.Amount}
 */
proto.economy.BalanceAndMoneyBoxResponse.prototype.getMoneyBox = function () {
  return /** @type{?proto.economy.Amount} */ (
    jspb.Message.getWrapperField(this, proto.economy.Amount, 4)
  );
};

/**
 * @param {?proto.economy.Amount|undefined} value
 * @return {!proto.economy.BalanceAndMoneyBoxResponse} returns this
 */
proto.economy.BalanceAndMoneyBoxResponse.prototype.setMoneyBox = function (
  value,
) {
  return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.economy.BalanceAndMoneyBoxResponse} returns this
 */
proto.economy.BalanceAndMoneyBoxResponse.prototype.clearMoneyBox = function () {
  return this.setMoneyBox(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.economy.BalanceAndMoneyBoxResponse.prototype.hasMoneyBox = function () {
  return jspb.Message.getField(this, 4) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.UpdateMoneyBoxRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.UpdateMoneyBoxRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.UpdateMoneyBoxRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.UpdateMoneyBoxRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        accountId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        amount: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.UpdateMoneyBoxRequest}
 */
proto.economy.UpdateMoneyBoxRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.UpdateMoneyBoxRequest();
  return proto.economy.UpdateMoneyBoxRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.UpdateMoneyBoxRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.UpdateMoneyBoxRequest}
 */
proto.economy.UpdateMoneyBoxRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccountId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setAmount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.UpdateMoneyBoxRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.UpdateMoneyBoxRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.UpdateMoneyBoxRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.UpdateMoneyBoxRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.economy.UpdateMoneyBoxRequest.prototype.getAccountId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.UpdateMoneyBoxRequest} returns this
 */
proto.economy.UpdateMoneyBoxRequest.prototype.setAccountId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string amount = 2;
 * @return {string}
 */
proto.economy.UpdateMoneyBoxRequest.prototype.getAmount = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.UpdateMoneyBoxRequest} returns this
 */
proto.economy.UpdateMoneyBoxRequest.prototype.setAmount = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.UpdateMoneyBoxResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.UpdateMoneyBoxResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.UpdateMoneyBoxResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.UpdateMoneyBoxResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        balance:
          (f = msg.getBalance()) &&
          proto.economy.Amount.toObject(includeInstance, f),
        moneyBox:
          (f = msg.getMoneyBox()) &&
          proto.economy.Amount.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.UpdateMoneyBoxResponse}
 */
proto.economy.UpdateMoneyBoxResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.UpdateMoneyBoxResponse();
  return proto.economy.UpdateMoneyBoxResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.UpdateMoneyBoxResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.UpdateMoneyBoxResponse}
 */
proto.economy.UpdateMoneyBoxResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = new proto.economy.Amount();
        reader.readMessage(
          value,
          proto.economy.Amount.deserializeBinaryFromReader,
        );
        msg.setBalance(value);
        break;
      case 4:
        var value = new proto.economy.Amount();
        reader.readMessage(
          value,
          proto.economy.Amount.deserializeBinaryFromReader,
        );
        msg.setMoneyBox(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.UpdateMoneyBoxResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.UpdateMoneyBoxResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.UpdateMoneyBoxResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.UpdateMoneyBoxResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(3, f, proto.economy.Amount.serializeBinaryToWriter);
  }
  f = message.getMoneyBox();
  if (f != null) {
    writer.writeMessage(4, f, proto.economy.Amount.serializeBinaryToWriter);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.economy.UpdateMoneyBoxResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.economy.UpdateMoneyBoxResponse} returns this
 */
proto.economy.UpdateMoneyBoxResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.economy.UpdateMoneyBoxResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.UpdateMoneyBoxResponse} returns this
 */
proto.economy.UpdateMoneyBoxResponse.prototype.setErrorMessage = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional Amount balance = 3;
 * @return {?proto.economy.Amount}
 */
proto.economy.UpdateMoneyBoxResponse.prototype.getBalance = function () {
  return /** @type{?proto.economy.Amount} */ (
    jspb.Message.getWrapperField(this, proto.economy.Amount, 3)
  );
};

/**
 * @param {?proto.economy.Amount|undefined} value
 * @return {!proto.economy.UpdateMoneyBoxResponse} returns this
 */
proto.economy.UpdateMoneyBoxResponse.prototype.setBalance = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.economy.UpdateMoneyBoxResponse} returns this
 */
proto.economy.UpdateMoneyBoxResponse.prototype.clearBalance = function () {
  return this.setBalance(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.economy.UpdateMoneyBoxResponse.prototype.hasBalance = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional Amount money_box = 4;
 * @return {?proto.economy.Amount}
 */
proto.economy.UpdateMoneyBoxResponse.prototype.getMoneyBox = function () {
  return /** @type{?proto.economy.Amount} */ (
    jspb.Message.getWrapperField(this, proto.economy.Amount, 4)
  );
};

/**
 * @param {?proto.economy.Amount|undefined} value
 * @return {!proto.economy.UpdateMoneyBoxResponse} returns this
 */
proto.economy.UpdateMoneyBoxResponse.prototype.setMoneyBox = function (value) {
  return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.economy.UpdateMoneyBoxResponse} returns this
 */
proto.economy.UpdateMoneyBoxResponse.prototype.clearMoneyBox = function () {
  return this.setMoneyBox(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.economy.UpdateMoneyBoxResponse.prototype.hasMoneyBox = function () {
  return jspb.Message.getField(this, 4) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.CreatePotRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.CreatePotRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.CreatePotRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.CreatePotRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        gameId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        channel: jspb.Message.getFieldWithDefault(msg, 2, ''),
        roomId: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.CreatePotRequest}
 */
proto.economy.CreatePotRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.CreatePotRequest();
  return proto.economy.CreatePotRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.CreatePotRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.CreatePotRequest}
 */
proto.economy.CreatePotRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setGameId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setChannel(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setRoomId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.CreatePotRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.CreatePotRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.CreatePotRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.CreatePotRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getGameId();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getRoomId();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional int32 game_id = 1;
 * @return {number}
 */
proto.economy.CreatePotRequest.prototype.getGameId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.economy.CreatePotRequest} returns this
 */
proto.economy.CreatePotRequest.prototype.setGameId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string channel = 2;
 * @return {string}
 */
proto.economy.CreatePotRequest.prototype.getChannel = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.CreatePotRequest} returns this
 */
proto.economy.CreatePotRequest.prototype.setChannel = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string room_id = 3;
 * @return {string}
 */
proto.economy.CreatePotRequest.prototype.getRoomId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.CreatePotRequest} returns this
 */
proto.economy.CreatePotRequest.prototype.setRoomId = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.CreatePotResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.CreatePotResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.CreatePotResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.CreatePotResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        potId: jspb.Message.getFieldWithDefault(msg, 3, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.CreatePotResponse}
 */
proto.economy.CreatePotResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.CreatePotResponse();
  return proto.economy.CreatePotResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.CreatePotResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.CreatePotResponse}
 */
proto.economy.CreatePotResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPotId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.CreatePotResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.CreatePotResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.CreatePotResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.CreatePotResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getPotId();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.economy.CreatePotResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.economy.CreatePotResponse} returns this
 */
proto.economy.CreatePotResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.economy.CreatePotResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.CreatePotResponse} returns this
 */
proto.economy.CreatePotResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional int32 pot_id = 3;
 * @return {number}
 */
proto.economy.CreatePotResponse.prototype.getPotId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.economy.CreatePotResponse} returns this
 */
proto.economy.CreatePotResponse.prototype.setPotId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.BetRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.economy.BetRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.BetRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.BetRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        potId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        accountId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        amount: jspb.Message.getFieldWithDefault(msg, 3, ''),
        handCard: jspb.Message.getFieldWithDefault(msg, 4, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.BetRequest}
 */
proto.economy.BetRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.BetRequest();
  return proto.economy.BetRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.BetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.BetRequest}
 */
proto.economy.BetRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPotId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccountId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setAmount(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setHandCard(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.BetRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.BetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.BetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.BetRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPotId();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getHandCard();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional int32 pot_id = 1;
 * @return {number}
 */
proto.economy.BetRequest.prototype.getPotId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.economy.BetRequest} returns this
 */
proto.economy.BetRequest.prototype.setPotId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string account_id = 2;
 * @return {string}
 */
proto.economy.BetRequest.prototype.getAccountId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.BetRequest} returns this
 */
proto.economy.BetRequest.prototype.setAccountId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string amount = 3;
 * @return {string}
 */
proto.economy.BetRequest.prototype.getAmount = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.BetRequest} returns this
 */
proto.economy.BetRequest.prototype.setAmount = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string hand_card = 4;
 * @return {string}
 */
proto.economy.BetRequest.prototype.getHandCard = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.BetRequest} returns this
 */
proto.economy.BetRequest.prototype.setHandCard = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.BetResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.BetResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.BetResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.BetResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        balance:
          (f = msg.getBalance()) &&
          proto.economy.Amount.toObject(includeInstance, f),
        potAmount: jspb.Message.getFieldWithDefault(msg, 4, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.BetResponse}
 */
proto.economy.BetResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.BetResponse();
  return proto.economy.BetResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.BetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.BetResponse}
 */
proto.economy.BetResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = new proto.economy.Amount();
        reader.readMessage(
          value,
          proto.economy.Amount.deserializeBinaryFromReader,
        );
        msg.setBalance(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setPotAmount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.BetResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.BetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.BetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.BetResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(3, f, proto.economy.Amount.serializeBinaryToWriter);
  }
  f = message.getPotAmount();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.economy.BetResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.economy.BetResponse} returns this
 */
proto.economy.BetResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.economy.BetResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.BetResponse} returns this
 */
proto.economy.BetResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional Amount balance = 3;
 * @return {?proto.economy.Amount}
 */
proto.economy.BetResponse.prototype.getBalance = function () {
  return /** @type{?proto.economy.Amount} */ (
    jspb.Message.getWrapperField(this, proto.economy.Amount, 3)
  );
};

/**
 * @param {?proto.economy.Amount|undefined} value
 * @return {!proto.economy.BetResponse} returns this
 */
proto.economy.BetResponse.prototype.setBalance = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.economy.BetResponse} returns this
 */
proto.economy.BetResponse.prototype.clearBalance = function () {
  return this.setBalance(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.economy.BetResponse.prototype.hasBalance = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional string pot_amount = 4;
 * @return {string}
 */
proto.economy.BetResponse.prototype.getPotAmount = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.BetResponse} returns this
 */
proto.economy.BetResponse.prototype.setPotAmount = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.DieResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.DieResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.DieResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.DieResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        balance:
          (f = msg.getBalance()) &&
          proto.economy.Amount.toObject(includeInstance, f),
        potAmount: jspb.Message.getFieldWithDefault(msg, 4, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.DieResponse}
 */
proto.economy.DieResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.DieResponse();
  return proto.economy.DieResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.DieResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.DieResponse}
 */
proto.economy.DieResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = new proto.economy.Amount();
        reader.readMessage(
          value,
          proto.economy.Amount.deserializeBinaryFromReader,
        );
        msg.setBalance(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setPotAmount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.DieResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.DieResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.DieResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.DieResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(3, f, proto.economy.Amount.serializeBinaryToWriter);
  }
  f = message.getPotAmount();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.economy.DieResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.economy.DieResponse} returns this
 */
proto.economy.DieResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.economy.DieResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.DieResponse} returns this
 */
proto.economy.DieResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional Amount balance = 3;
 * @return {?proto.economy.Amount}
 */
proto.economy.DieResponse.prototype.getBalance = function () {
  return /** @type{?proto.economy.Amount} */ (
    jspb.Message.getWrapperField(this, proto.economy.Amount, 3)
  );
};

/**
 * @param {?proto.economy.Amount|undefined} value
 * @return {!proto.economy.DieResponse} returns this
 */
proto.economy.DieResponse.prototype.setBalance = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.economy.DieResponse} returns this
 */
proto.economy.DieResponse.prototype.clearBalance = function () {
  return this.setBalance(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.economy.DieResponse.prototype.hasBalance = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional string pot_amount = 4;
 * @return {string}
 */
proto.economy.DieResponse.prototype.getPotAmount = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.DieResponse} returns this
 */
proto.economy.DieResponse.prototype.setPotAmount = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.WinResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.WinResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.WinResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.WinResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        balance:
          (f = msg.getBalance()) &&
          proto.economy.Amount.toObject(includeInstance, f),
        potAmount: jspb.Message.getFieldWithDefault(msg, 4, ''),
        lake: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
        lakeAmount: jspb.Message.getFieldWithDefault(msg, 6, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.WinResponse}
 */
proto.economy.WinResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.WinResponse();
  return proto.economy.WinResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.WinResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.WinResponse}
 */
proto.economy.WinResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = new proto.economy.Amount();
        reader.readMessage(
          value,
          proto.economy.Amount.deserializeBinaryFromReader,
        );
        msg.setBalance(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setPotAmount(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setLake(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setLakeAmount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.WinResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.WinResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.WinResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.WinResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(3, f, proto.economy.Amount.serializeBinaryToWriter);
  }
  f = message.getPotAmount();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getLake();
  if (f !== 0.0) {
    writer.writeFloat(5, f);
  }
  f = message.getLakeAmount();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.economy.WinResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.economy.WinResponse} returns this
 */
proto.economy.WinResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.economy.WinResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.WinResponse} returns this
 */
proto.economy.WinResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional Amount balance = 3;
 * @return {?proto.economy.Amount}
 */
proto.economy.WinResponse.prototype.getBalance = function () {
  return /** @type{?proto.economy.Amount} */ (
    jspb.Message.getWrapperField(this, proto.economy.Amount, 3)
  );
};

/**
 * @param {?proto.economy.Amount|undefined} value
 * @return {!proto.economy.WinResponse} returns this
 */
proto.economy.WinResponse.prototype.setBalance = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.economy.WinResponse} returns this
 */
proto.economy.WinResponse.prototype.clearBalance = function () {
  return this.setBalance(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.economy.WinResponse.prototype.hasBalance = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional string pot_amount = 4;
 * @return {string}
 */
proto.economy.WinResponse.prototype.getPotAmount = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.WinResponse} returns this
 */
proto.economy.WinResponse.prototype.setPotAmount = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional float lake = 5;
 * @return {number}
 */
proto.economy.WinResponse.prototype.getLake = function () {
  return /** @type {number} */ (
    jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0)
  );
};

/**
 * @param {number} value
 * @return {!proto.economy.WinResponse} returns this
 */
proto.economy.WinResponse.prototype.setLake = function (value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};

/**
 * optional string lake_amount = 6;
 * @return {string}
 */
proto.economy.WinResponse.prototype.getLakeAmount = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.WinResponse} returns this
 */
proto.economy.WinResponse.prototype.setLakeAmount = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.TransferInRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.TransferInRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.TransferInRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.TransferInRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        txGroupId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        accountId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        amount:
          (f = msg.getAmount()) &&
          proto.economy.Amount.toObject(includeInstance, f),
        from: jspb.Message.getFieldWithDefault(msg, 4, ''),
        allowOverflow: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.TransferInRequest}
 */
proto.economy.TransferInRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.TransferInRequest();
  return proto.economy.TransferInRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.TransferInRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.TransferInRequest}
 */
proto.economy.TransferInRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setTxGroupId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccountId(value);
        break;
      case 3:
        var value = new proto.economy.Amount();
        reader.readMessage(
          value,
          proto.economy.Amount.deserializeBinaryFromReader,
        );
        msg.setAmount(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setFrom(value);
        break;
      case 5:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setAllowOverflow(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.TransferInRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.TransferInRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.TransferInRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.TransferInRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getTxGroupId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(3, f, proto.economy.Amount.serializeBinaryToWriter);
  }
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getAllowOverflow();
  if (f) {
    writer.writeBool(5, f);
  }
};

/**
 * optional string tx_group_id = 1;
 * @return {string}
 */
proto.economy.TransferInRequest.prototype.getTxGroupId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.TransferInRequest} returns this
 */
proto.economy.TransferInRequest.prototype.setTxGroupId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string account_id = 2;
 * @return {string}
 */
proto.economy.TransferInRequest.prototype.getAccountId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.TransferInRequest} returns this
 */
proto.economy.TransferInRequest.prototype.setAccountId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional Amount amount = 3;
 * @return {?proto.economy.Amount}
 */
proto.economy.TransferInRequest.prototype.getAmount = function () {
  return /** @type{?proto.economy.Amount} */ (
    jspb.Message.getWrapperField(this, proto.economy.Amount, 3)
  );
};

/**
 * @param {?proto.economy.Amount|undefined} value
 * @return {!proto.economy.TransferInRequest} returns this
 */
proto.economy.TransferInRequest.prototype.setAmount = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.economy.TransferInRequest} returns this
 */
proto.economy.TransferInRequest.prototype.clearAmount = function () {
  return this.setAmount(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.economy.TransferInRequest.prototype.hasAmount = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional string from = 4;
 * @return {string}
 */
proto.economy.TransferInRequest.prototype.getFrom = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.TransferInRequest} returns this
 */
proto.economy.TransferInRequest.prototype.setFrom = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional bool allow_overflow = 5;
 * @return {boolean}
 */
proto.economy.TransferInRequest.prototype.getAllowOverflow = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 5, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.economy.TransferInRequest} returns this
 */
proto.economy.TransferInRequest.prototype.setAllowOverflow = function (value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.TransferInResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.TransferInResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.TransferInResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.TransferInResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        balance:
          (f = msg.getBalance()) &&
          proto.economy.Amount.toObject(includeInstance, f),
        overflow:
          (f = msg.getOverflow()) &&
          proto.economy.Amount.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.TransferInResponse}
 */
proto.economy.TransferInResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.TransferInResponse();
  return proto.economy.TransferInResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.TransferInResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.TransferInResponse}
 */
proto.economy.TransferInResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = new proto.economy.Amount();
        reader.readMessage(
          value,
          proto.economy.Amount.deserializeBinaryFromReader,
        );
        msg.setBalance(value);
        break;
      case 4:
        var value = new proto.economy.Amount();
        reader.readMessage(
          value,
          proto.economy.Amount.deserializeBinaryFromReader,
        );
        msg.setOverflow(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.TransferInResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.TransferInResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.TransferInResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.TransferInResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(3, f, proto.economy.Amount.serializeBinaryToWriter);
  }
  f = message.getOverflow();
  if (f != null) {
    writer.writeMessage(4, f, proto.economy.Amount.serializeBinaryToWriter);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.economy.TransferInResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.economy.TransferInResponse} returns this
 */
proto.economy.TransferInResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.economy.TransferInResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.TransferInResponse} returns this
 */
proto.economy.TransferInResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional Amount balance = 3;
 * @return {?proto.economy.Amount}
 */
proto.economy.TransferInResponse.prototype.getBalance = function () {
  return /** @type{?proto.economy.Amount} */ (
    jspb.Message.getWrapperField(this, proto.economy.Amount, 3)
  );
};

/**
 * @param {?proto.economy.Amount|undefined} value
 * @return {!proto.economy.TransferInResponse} returns this
 */
proto.economy.TransferInResponse.prototype.setBalance = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.economy.TransferInResponse} returns this
 */
proto.economy.TransferInResponse.prototype.clearBalance = function () {
  return this.setBalance(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.economy.TransferInResponse.prototype.hasBalance = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional Amount overflow = 4;
 * @return {?proto.economy.Amount}
 */
proto.economy.TransferInResponse.prototype.getOverflow = function () {
  return /** @type{?proto.economy.Amount} */ (
    jspb.Message.getWrapperField(this, proto.economy.Amount, 4)
  );
};

/**
 * @param {?proto.economy.Amount|undefined} value
 * @return {!proto.economy.TransferInResponse} returns this
 */
proto.economy.TransferInResponse.prototype.setOverflow = function (value) {
  return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.economy.TransferInResponse} returns this
 */
proto.economy.TransferInResponse.prototype.clearOverflow = function () {
  return this.setOverflow(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.economy.TransferInResponse.prototype.hasOverflow = function () {
  return jspb.Message.getField(this, 4) != null;
};

goog.object.extend(exports, proto.economy);
