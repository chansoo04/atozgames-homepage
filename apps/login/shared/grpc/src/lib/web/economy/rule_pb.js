// source: rule.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

goog.exportSymbol('proto.economy.Config', null, global);
goog.exportSymbol('proto.economy.ConfigRequest', null, global);
goog.exportSymbol('proto.economy.ConfigResponse', null, global);
goog.exportSymbol('proto.economy.ConfigsResponse', null, global);
goog.exportSymbol('proto.economy.Empty', null, global);
goog.exportSymbol('proto.economy.Game', null, global);
goog.exportSymbol('proto.economy.GamesResponse', null, global);
goog.exportSymbol('proto.economy.MoneyTable', null, global);
goog.exportSymbol('proto.economy.MoneyTableRequest', null, global);
goog.exportSymbol('proto.economy.MoneyTableResponse', null, global);
goog.exportSymbol('proto.economy.MoneyTablesResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.Game = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.Game, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.Game.displayName = 'proto.economy.Game';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.Config = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.Config.displayName = 'proto.economy.Config';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.MoneyTable = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.MoneyTable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.MoneyTable.displayName = 'proto.economy.MoneyTable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.Empty = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.Empty.displayName = 'proto.economy.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.GamesResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.economy.GamesResponse.repeatedFields_,
    null,
  );
};
goog.inherits(proto.economy.GamesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.GamesResponse.displayName = 'proto.economy.GamesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.ConfigRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.ConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.ConfigRequest.displayName = 'proto.economy.ConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.ConfigResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.ConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.ConfigResponse.displayName = 'proto.economy.ConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.ConfigsResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.economy.ConfigsResponse.repeatedFields_,
    null,
  );
};
goog.inherits(proto.economy.ConfigsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.ConfigsResponse.displayName = 'proto.economy.ConfigsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.MoneyTableRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.MoneyTableRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.MoneyTableRequest.displayName =
    'proto.economy.MoneyTableRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.MoneyTableResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.economy.MoneyTableResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.MoneyTableResponse.displayName =
    'proto.economy.MoneyTableResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.economy.MoneyTablesResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.economy.MoneyTablesResponse.repeatedFields_,
    null,
  );
};
goog.inherits(proto.economy.MoneyTablesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.economy.MoneyTablesResponse.displayName =
    'proto.economy.MoneyTablesResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.Game.prototype.toObject = function (opt_includeInstance) {
    return proto.economy.Game.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.Game} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.Game.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        gameId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        name: jspb.Message.getFieldWithDefault(msg, 2, ''),
        en: jspb.Message.getFieldWithDefault(msg, 3, ''),
        ko: jspb.Message.getFieldWithDefault(msg, 4, ''),
        createdAt: jspb.Message.getFieldWithDefault(msg, 5, ''),
        updatedAt: jspb.Message.getFieldWithDefault(msg, 6, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.Game}
 */
proto.economy.Game.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.Game();
  return proto.economy.Game.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.Game} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.Game}
 */
proto.economy.Game.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setGameId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setEn(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setKo(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setCreatedAt(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setUpdatedAt(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.Game.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.Game.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.Game} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.Game.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getGameId();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getEn();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getKo();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getUpdatedAt();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
};

/**
 * optional int32 game_id = 1;
 * @return {number}
 */
proto.economy.Game.prototype.getGameId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.economy.Game} returns this
 */
proto.economy.Game.prototype.setGameId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional string name = 2;
 * @return {string}
 */
proto.economy.Game.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.Game} returns this
 */
proto.economy.Game.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string en = 3;
 * @return {string}
 */
proto.economy.Game.prototype.getEn = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.Game} returns this
 */
proto.economy.Game.prototype.setEn = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string ko = 4;
 * @return {string}
 */
proto.economy.Game.prototype.getKo = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.Game} returns this
 */
proto.economy.Game.prototype.setKo = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string created_at = 5;
 * @return {string}
 */
proto.economy.Game.prototype.getCreatedAt = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.Game} returns this
 */
proto.economy.Game.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string updated_at = 6;
 * @return {string}
 */
proto.economy.Game.prototype.getUpdatedAt = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.Game} returns this
 */
proto.economy.Game.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.Config.prototype.toObject = function (opt_includeInstance) {
    return proto.economy.Config.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.Config} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.Config.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        ruleConfigId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        gameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
        name: jspb.Message.getFieldWithDefault(msg, 3, ''),
        key: jspb.Message.getFieldWithDefault(msg, 4, ''),
        value: jspb.Message.getFieldWithDefault(msg, 5, ''),
        createdAt: jspb.Message.getFieldWithDefault(msg, 6, ''),
        updatedAt: jspb.Message.getFieldWithDefault(msg, 7, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.Config}
 */
proto.economy.Config.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.Config();
  return proto.economy.Config.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.Config}
 */
proto.economy.Config.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setRuleConfigId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setGameId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setKey(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setValue(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setCreatedAt(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setUpdatedAt(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.Config.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.Config.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getRuleConfigId();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = message.getGameId();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getUpdatedAt();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
};

/**
 * optional int32 rule_config_id = 1;
 * @return {number}
 */
proto.economy.Config.prototype.getRuleConfigId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.economy.Config} returns this
 */
proto.economy.Config.prototype.setRuleConfigId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int32 game_id = 2;
 * @return {number}
 */
proto.economy.Config.prototype.getGameId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.economy.Config} returns this
 */
proto.economy.Config.prototype.setGameId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional string name = 3;
 * @return {string}
 */
proto.economy.Config.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.Config} returns this
 */
proto.economy.Config.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string key = 4;
 * @return {string}
 */
proto.economy.Config.prototype.getKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.Config} returns this
 */
proto.economy.Config.prototype.setKey = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string value = 5;
 * @return {string}
 */
proto.economy.Config.prototype.getValue = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.Config} returns this
 */
proto.economy.Config.prototype.setValue = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string created_at = 6;
 * @return {string}
 */
proto.economy.Config.prototype.getCreatedAt = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.Config} returns this
 */
proto.economy.Config.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional string updated_at = 7;
 * @return {string}
 */
proto.economy.Config.prototype.getUpdatedAt = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.Config} returns this
 */
proto.economy.Config.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.MoneyTable.prototype.toObject = function (opt_includeInstance) {
    return proto.economy.MoneyTable.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.MoneyTable} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.MoneyTable.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        ruleMoneyTableId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        gameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
        level: jspb.Message.getFieldWithDefault(msg, 3, 0),
        ante: jspb.Message.getFieldWithDefault(msg, 4, ''),
        smallBlind: jspb.Message.getFieldWithDefault(msg, 5, ''),
        bigBlind: jspb.Message.getFieldWithDefault(msg, 6, ''),
        minBuyIn: jspb.Message.getFieldWithDefault(msg, 7, ''),
        maxBuyIn: jspb.Message.getFieldWithDefault(msg, 8, ''),
        createdAt: jspb.Message.getFieldWithDefault(msg, 9, ''),
        updatedAt: jspb.Message.getFieldWithDefault(msg, 10, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.MoneyTable}
 */
proto.economy.MoneyTable.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.MoneyTable();
  return proto.economy.MoneyTable.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.MoneyTable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.MoneyTable}
 */
proto.economy.MoneyTable.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setRuleMoneyTableId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setGameId(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setLevel(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setAnte(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setSmallBlind(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setBigBlind(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setMinBuyIn(value);
        break;
      case 8:
        var value = /** @type {string} */ (reader.readString());
        msg.setMaxBuyIn(value);
        break;
      case 9:
        var value = /** @type {string} */ (reader.readString());
        msg.setCreatedAt(value);
        break;
      case 10:
        var value = /** @type {string} */ (reader.readString());
        msg.setUpdatedAt(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.MoneyTable.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.MoneyTable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.MoneyTable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.MoneyTable.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getRuleMoneyTableId();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = message.getGameId();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
  f = message.getAnte();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getSmallBlind();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getBigBlind();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getMinBuyIn();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
  f = message.getMaxBuyIn();
  if (f.length > 0) {
    writer.writeString(8, f);
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(9, f);
  }
  f = message.getUpdatedAt();
  if (f.length > 0) {
    writer.writeString(10, f);
  }
};

/**
 * optional int32 rule_money_table_id = 1;
 * @return {number}
 */
proto.economy.MoneyTable.prototype.getRuleMoneyTableId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.economy.MoneyTable} returns this
 */
proto.economy.MoneyTable.prototype.setRuleMoneyTableId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int32 game_id = 2;
 * @return {number}
 */
proto.economy.MoneyTable.prototype.getGameId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.economy.MoneyTable} returns this
 */
proto.economy.MoneyTable.prototype.setGameId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional int32 level = 3;
 * @return {number}
 */
proto.economy.MoneyTable.prototype.getLevel = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.economy.MoneyTable} returns this
 */
proto.economy.MoneyTable.prototype.setLevel = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional string ante = 4;
 * @return {string}
 */
proto.economy.MoneyTable.prototype.getAnte = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.MoneyTable} returns this
 */
proto.economy.MoneyTable.prototype.setAnte = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string small_blind = 5;
 * @return {string}
 */
proto.economy.MoneyTable.prototype.getSmallBlind = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.MoneyTable} returns this
 */
proto.economy.MoneyTable.prototype.setSmallBlind = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string big_blind = 6;
 * @return {string}
 */
proto.economy.MoneyTable.prototype.getBigBlind = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.MoneyTable} returns this
 */
proto.economy.MoneyTable.prototype.setBigBlind = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional string min_buy_in = 7;
 * @return {string}
 */
proto.economy.MoneyTable.prototype.getMinBuyIn = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.MoneyTable} returns this
 */
proto.economy.MoneyTable.prototype.setMinBuyIn = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};

/**
 * optional string max_buy_in = 8;
 * @return {string}
 */
proto.economy.MoneyTable.prototype.getMaxBuyIn = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.MoneyTable} returns this
 */
proto.economy.MoneyTable.prototype.setMaxBuyIn = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};

/**
 * optional string created_at = 9;
 * @return {string}
 */
proto.economy.MoneyTable.prototype.getCreatedAt = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.MoneyTable} returns this
 */
proto.economy.MoneyTable.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};

/**
 * optional string updated_at = 10;
 * @return {string}
 */
proto.economy.MoneyTable.prototype.getUpdatedAt = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.MoneyTable} returns this
 */
proto.economy.MoneyTable.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.Empty.prototype.toObject = function (opt_includeInstance) {
    return proto.economy.Empty.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.Empty} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.Empty.toObject = function (includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.Empty}
 */
proto.economy.Empty.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.Empty();
  return proto.economy.Empty.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.Empty}
 */
proto.economy.Empty.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.Empty.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.Empty.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.economy.GamesResponse.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.GamesResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.GamesResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.GamesResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.GamesResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        gameList: jspb.Message.toObjectList(
          msg.getGameList(),
          proto.economy.Game.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.GamesResponse}
 */
proto.economy.GamesResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.GamesResponse();
  return proto.economy.GamesResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.GamesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.GamesResponse}
 */
proto.economy.GamesResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = new proto.economy.Game();
        reader.readMessage(
          value,
          proto.economy.Game.deserializeBinaryFromReader,
        );
        msg.addGame(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.GamesResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.GamesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.GamesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.GamesResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getGameList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.economy.Game.serializeBinaryToWriter,
    );
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.economy.GamesResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.economy.GamesResponse} returns this
 */
proto.economy.GamesResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.economy.GamesResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.GamesResponse} returns this
 */
proto.economy.GamesResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * repeated Game game = 3;
 * @return {!Array<!proto.economy.Game>}
 */
proto.economy.GamesResponse.prototype.getGameList = function () {
  return /** @type{!Array<!proto.economy.Game>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.economy.Game, 3)
  );
};

/**
 * @param {!Array<!proto.economy.Game>} value
 * @return {!proto.economy.GamesResponse} returns this
 */
proto.economy.GamesResponse.prototype.setGameList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.economy.Game=} opt_value
 * @param {number=} opt_index
 * @return {!proto.economy.Game}
 */
proto.economy.GamesResponse.prototype.addGame = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    3,
    opt_value,
    proto.economy.Game,
    opt_index,
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.economy.GamesResponse} returns this
 */
proto.economy.GamesResponse.prototype.clearGameList = function () {
  return this.setGameList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.ConfigRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.ConfigRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.ConfigRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.ConfigRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        ruleConfigId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        gameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
        name: jspb.Message.getFieldWithDefault(msg, 3, ''),
        key: jspb.Message.getFieldWithDefault(msg, 4, ''),
        value: jspb.Message.getFieldWithDefault(msg, 5, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.ConfigRequest}
 */
proto.economy.ConfigRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.ConfigRequest();
  return proto.economy.ConfigRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.ConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.ConfigRequest}
 */
proto.economy.ConfigRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setRuleConfigId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setGameId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setKey(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setValue(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.ConfigRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.ConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.ConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.ConfigRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getRuleConfigId();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = message.getGameId();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional int32 rule_config_id = 1;
 * @return {number}
 */
proto.economy.ConfigRequest.prototype.getRuleConfigId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.economy.ConfigRequest} returns this
 */
proto.economy.ConfigRequest.prototype.setRuleConfigId = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int32 game_id = 2;
 * @return {number}
 */
proto.economy.ConfigRequest.prototype.getGameId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.economy.ConfigRequest} returns this
 */
proto.economy.ConfigRequest.prototype.setGameId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional string name = 3;
 * @return {string}
 */
proto.economy.ConfigRequest.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.ConfigRequest} returns this
 */
proto.economy.ConfigRequest.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string key = 4;
 * @return {string}
 */
proto.economy.ConfigRequest.prototype.getKey = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.ConfigRequest} returns this
 */
proto.economy.ConfigRequest.prototype.setKey = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string value = 5;
 * @return {string}
 */
proto.economy.ConfigRequest.prototype.getValue = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.ConfigRequest} returns this
 */
proto.economy.ConfigRequest.prototype.setValue = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.ConfigResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.ConfigResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.ConfigResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.ConfigResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        config:
          (f = msg.getConfig()) &&
          proto.economy.Config.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.ConfigResponse}
 */
proto.economy.ConfigResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.ConfigResponse();
  return proto.economy.ConfigResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.ConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.ConfigResponse}
 */
proto.economy.ConfigResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = new proto.economy.Config();
        reader.readMessage(
          value,
          proto.economy.Config.deserializeBinaryFromReader,
        );
        msg.setConfig(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.ConfigResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.ConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.ConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.ConfigResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(3, f, proto.economy.Config.serializeBinaryToWriter);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.economy.ConfigResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.economy.ConfigResponse} returns this
 */
proto.economy.ConfigResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.economy.ConfigResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.ConfigResponse} returns this
 */
proto.economy.ConfigResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional Config config = 3;
 * @return {?proto.economy.Config}
 */
proto.economy.ConfigResponse.prototype.getConfig = function () {
  return /** @type{?proto.economy.Config} */ (
    jspb.Message.getWrapperField(this, proto.economy.Config, 3)
  );
};

/**
 * @param {?proto.economy.Config|undefined} value
 * @return {!proto.economy.ConfigResponse} returns this
 */
proto.economy.ConfigResponse.prototype.setConfig = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.economy.ConfigResponse} returns this
 */
proto.economy.ConfigResponse.prototype.clearConfig = function () {
  return this.setConfig(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.economy.ConfigResponse.prototype.hasConfig = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.economy.ConfigsResponse.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.ConfigsResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.ConfigsResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.ConfigsResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.ConfigsResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        configList: jspb.Message.toObjectList(
          msg.getConfigList(),
          proto.economy.Config.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.ConfigsResponse}
 */
proto.economy.ConfigsResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.ConfigsResponse();
  return proto.economy.ConfigsResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.ConfigsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.ConfigsResponse}
 */
proto.economy.ConfigsResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = new proto.economy.Config();
        reader.readMessage(
          value,
          proto.economy.Config.deserializeBinaryFromReader,
        );
        msg.addConfig(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.ConfigsResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.ConfigsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.ConfigsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.ConfigsResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getConfigList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.economy.Config.serializeBinaryToWriter,
    );
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.economy.ConfigsResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.economy.ConfigsResponse} returns this
 */
proto.economy.ConfigsResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.economy.ConfigsResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.ConfigsResponse} returns this
 */
proto.economy.ConfigsResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * repeated Config config = 3;
 * @return {!Array<!proto.economy.Config>}
 */
proto.economy.ConfigsResponse.prototype.getConfigList = function () {
  return /** @type{!Array<!proto.economy.Config>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.economy.Config, 3)
  );
};

/**
 * @param {!Array<!proto.economy.Config>} value
 * @return {!proto.economy.ConfigsResponse} returns this
 */
proto.economy.ConfigsResponse.prototype.setConfigList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.economy.Config=} opt_value
 * @param {number=} opt_index
 * @return {!proto.economy.Config}
 */
proto.economy.ConfigsResponse.prototype.addConfig = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    3,
    opt_value,
    proto.economy.Config,
    opt_index,
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.economy.ConfigsResponse} returns this
 */
proto.economy.ConfigsResponse.prototype.clearConfigList = function () {
  return this.setConfigList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.MoneyTableRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.MoneyTableRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.MoneyTableRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.MoneyTableRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        ruleMoneyTableId: jspb.Message.getFieldWithDefault(msg, 1, 0),
        gameId: jspb.Message.getFieldWithDefault(msg, 2, 0),
        level: jspb.Message.getFieldWithDefault(msg, 3, 0),
        ante: jspb.Message.getFieldWithDefault(msg, 4, ''),
        smallBlind: jspb.Message.getFieldWithDefault(msg, 5, ''),
        bigBlind: jspb.Message.getFieldWithDefault(msg, 6, ''),
        minBuyIn: jspb.Message.getFieldWithDefault(msg, 7, ''),
        maxBuyIn: jspb.Message.getFieldWithDefault(msg, 8, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.MoneyTableRequest}
 */
proto.economy.MoneyTableRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.MoneyTableRequest();
  return proto.economy.MoneyTableRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.MoneyTableRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.MoneyTableRequest}
 */
proto.economy.MoneyTableRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setRuleMoneyTableId(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setGameId(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setLevel(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setAnte(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setSmallBlind(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setBigBlind(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setMinBuyIn(value);
        break;
      case 8:
        var value = /** @type {string} */ (reader.readString());
        msg.setMaxBuyIn(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.MoneyTableRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.MoneyTableRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.MoneyTableRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.MoneyTableRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getRuleMoneyTableId();
  if (f !== 0) {
    writer.writeInt32(1, f);
  }
  f = message.getGameId();
  if (f !== 0) {
    writer.writeInt32(2, f);
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
  f = message.getAnte();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getSmallBlind();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getBigBlind();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getMinBuyIn();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
  f = message.getMaxBuyIn();
  if (f.length > 0) {
    writer.writeString(8, f);
  }
};

/**
 * optional int32 rule_money_table_id = 1;
 * @return {number}
 */
proto.economy.MoneyTableRequest.prototype.getRuleMoneyTableId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.economy.MoneyTableRequest} returns this
 */
proto.economy.MoneyTableRequest.prototype.setRuleMoneyTableId = function (
  value,
) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional int32 game_id = 2;
 * @return {number}
 */
proto.economy.MoneyTableRequest.prototype.getGameId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.economy.MoneyTableRequest} returns this
 */
proto.economy.MoneyTableRequest.prototype.setGameId = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional int32 level = 3;
 * @return {number}
 */
proto.economy.MoneyTableRequest.prototype.getLevel = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.economy.MoneyTableRequest} returns this
 */
proto.economy.MoneyTableRequest.prototype.setLevel = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional string ante = 4;
 * @return {string}
 */
proto.economy.MoneyTableRequest.prototype.getAnte = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.MoneyTableRequest} returns this
 */
proto.economy.MoneyTableRequest.prototype.setAnte = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string small_blind = 5;
 * @return {string}
 */
proto.economy.MoneyTableRequest.prototype.getSmallBlind = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.MoneyTableRequest} returns this
 */
proto.economy.MoneyTableRequest.prototype.setSmallBlind = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string big_blind = 6;
 * @return {string}
 */
proto.economy.MoneyTableRequest.prototype.getBigBlind = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.MoneyTableRequest} returns this
 */
proto.economy.MoneyTableRequest.prototype.setBigBlind = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional string min_buy_in = 7;
 * @return {string}
 */
proto.economy.MoneyTableRequest.prototype.getMinBuyIn = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.MoneyTableRequest} returns this
 */
proto.economy.MoneyTableRequest.prototype.setMinBuyIn = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};

/**
 * optional string max_buy_in = 8;
 * @return {string}
 */
proto.economy.MoneyTableRequest.prototype.getMaxBuyIn = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.MoneyTableRequest} returns this
 */
proto.economy.MoneyTableRequest.prototype.setMaxBuyIn = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.MoneyTableResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.MoneyTableResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.MoneyTableResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.MoneyTableResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        moneyTable:
          (f = msg.getMoneyTable()) &&
          proto.economy.MoneyTable.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.MoneyTableResponse}
 */
proto.economy.MoneyTableResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.MoneyTableResponse();
  return proto.economy.MoneyTableResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.MoneyTableResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.MoneyTableResponse}
 */
proto.economy.MoneyTableResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = new proto.economy.MoneyTable();
        reader.readMessage(
          value,
          proto.economy.MoneyTable.deserializeBinaryFromReader,
        );
        msg.setMoneyTable(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.MoneyTableResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.MoneyTableResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.MoneyTableResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.MoneyTableResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getMoneyTable();
  if (f != null) {
    writer.writeMessage(3, f, proto.economy.MoneyTable.serializeBinaryToWriter);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.economy.MoneyTableResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.economy.MoneyTableResponse} returns this
 */
proto.economy.MoneyTableResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.economy.MoneyTableResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.MoneyTableResponse} returns this
 */
proto.economy.MoneyTableResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional MoneyTable money_table = 3;
 * @return {?proto.economy.MoneyTable}
 */
proto.economy.MoneyTableResponse.prototype.getMoneyTable = function () {
  return /** @type{?proto.economy.MoneyTable} */ (
    jspb.Message.getWrapperField(this, proto.economy.MoneyTable, 3)
  );
};

/**
 * @param {?proto.economy.MoneyTable|undefined} value
 * @return {!proto.economy.MoneyTableResponse} returns this
 */
proto.economy.MoneyTableResponse.prototype.setMoneyTable = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.economy.MoneyTableResponse} returns this
 */
proto.economy.MoneyTableResponse.prototype.clearMoneyTable = function () {
  return this.setMoneyTable(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.economy.MoneyTableResponse.prototype.hasMoneyTable = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.economy.MoneyTablesResponse.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.economy.MoneyTablesResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.economy.MoneyTablesResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.economy.MoneyTablesResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.economy.MoneyTablesResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        moneyTableList: jspb.Message.toObjectList(
          msg.getMoneyTableList(),
          proto.economy.MoneyTable.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.economy.MoneyTablesResponse}
 */
proto.economy.MoneyTablesResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.economy.MoneyTablesResponse();
  return proto.economy.MoneyTablesResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.economy.MoneyTablesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.economy.MoneyTablesResponse}
 */
proto.economy.MoneyTablesResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = new proto.economy.MoneyTable();
        reader.readMessage(
          value,
          proto.economy.MoneyTable.deserializeBinaryFromReader,
        );
        msg.addMoneyTable(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.economy.MoneyTablesResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.economy.MoneyTablesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.economy.MoneyTablesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.economy.MoneyTablesResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getMoneyTableList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.economy.MoneyTable.serializeBinaryToWriter,
    );
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.economy.MoneyTablesResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.economy.MoneyTablesResponse} returns this
 */
proto.economy.MoneyTablesResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.economy.MoneyTablesResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.economy.MoneyTablesResponse} returns this
 */
proto.economy.MoneyTablesResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * repeated MoneyTable money_table = 3;
 * @return {!Array<!proto.economy.MoneyTable>}
 */
proto.economy.MoneyTablesResponse.prototype.getMoneyTableList = function () {
  return /** @type{!Array<!proto.economy.MoneyTable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.economy.MoneyTable, 3)
  );
};

/**
 * @param {!Array<!proto.economy.MoneyTable>} value
 * @return {!proto.economy.MoneyTablesResponse} returns this
 */
proto.economy.MoneyTablesResponse.prototype.setMoneyTableList = function (
  value,
) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.economy.MoneyTable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.economy.MoneyTable}
 */
proto.economy.MoneyTablesResponse.prototype.addMoneyTable = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    3,
    opt_value,
    proto.economy.MoneyTable,
    opt_index,
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.economy.MoneyTablesResponse} returns this
 */
proto.economy.MoneyTablesResponse.prototype.clearMoneyTableList = function () {
  return this.setMoneyTableList([]);
};

goog.object.extend(exports, proto.economy);
