/**
 * @fileoverview gRPC-Web generated client stub for item
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: inventory.proto

/* eslint-disable */
// @ts-nocheck

const grpc = {};
grpc.web = require('grpc-web');

var item$common_pb = require('./item-common_pb.js');
const proto = {};
proto.item = require('./inventory_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.item.InventoryServiceClient = function (hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.item.InventoryServicePromiseClient = function (
  hostname,
  credentials,
  options,
) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.item.GetInventoryRequest,
 *   !proto.item.InventoriesResponse>}
 */
const methodDescriptor_InventoryService_GetInventory =
  new grpc.web.MethodDescriptor(
    '/item.InventoryService/GetInventory',
    grpc.web.MethodType.UNARY,
    proto.item.GetInventoryRequest,
    proto.item.InventoriesResponse,
    /**
     * @param {!proto.item.GetInventoryRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.item.InventoriesResponse.deserializeBinary,
  );

/**
 * @param {!proto.item.GetInventoryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.item.InventoriesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.item.InventoriesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.item.InventoryServiceClient.prototype.getInventory = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/item.InventoryService/GetInventory',
    request,
    metadata || {},
    methodDescriptor_InventoryService_GetInventory,
    callback,
  );
};

/**
 * @param {!proto.item.GetInventoryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.item.InventoriesResponse>}
 *     Promise that resolves to the response
 */
proto.item.InventoryServicePromiseClient.prototype.getInventory = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/item.InventoryService/GetInventory',
    request,
    metadata || {},
    methodDescriptor_InventoryService_GetInventory,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.item.GetInventoryRequest,
 *   !proto.item.InventoryResponse>}
 */
const methodDescriptor_InventoryService_GetClassItem =
  new grpc.web.MethodDescriptor(
    '/item.InventoryService/GetClassItem',
    grpc.web.MethodType.UNARY,
    proto.item.GetInventoryRequest,
    proto.item.InventoryResponse,
    /**
     * @param {!proto.item.GetInventoryRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.item.InventoryResponse.deserializeBinary,
  );

/**
 * @param {!proto.item.GetInventoryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.item.InventoryResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.item.InventoryResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.item.InventoryServiceClient.prototype.getClassItem = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/item.InventoryService/GetClassItem',
    request,
    metadata || {},
    methodDescriptor_InventoryService_GetClassItem,
    callback,
  );
};

/**
 * @param {!proto.item.GetInventoryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.item.InventoryResponse>}
 *     Promise that resolves to the response
 */
proto.item.InventoryServicePromiseClient.prototype.getClassItem = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/item.InventoryService/GetClassItem',
    request,
    metadata || {},
    methodDescriptor_InventoryService_GetClassItem,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.item.InventoryItemRequest,
 *   !proto.item.InventoryResponse>}
 */
const methodDescriptor_InventoryService_InputItem =
  new grpc.web.MethodDescriptor(
    '/item.InventoryService/InputItem',
    grpc.web.MethodType.UNARY,
    proto.item.InventoryItemRequest,
    proto.item.InventoryResponse,
    /**
     * @param {!proto.item.InventoryItemRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.item.InventoryResponse.deserializeBinary,
  );

/**
 * @param {!proto.item.InventoryItemRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.item.InventoryResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.item.InventoryResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.item.InventoryServiceClient.prototype.inputItem = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/item.InventoryService/InputItem',
    request,
    metadata || {},
    methodDescriptor_InventoryService_InputItem,
    callback,
  );
};

/**
 * @param {!proto.item.InventoryItemRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.item.InventoryResponse>}
 *     Promise that resolves to the response
 */
proto.item.InventoryServicePromiseClient.prototype.inputItem = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/item.InventoryService/InputItem',
    request,
    metadata || {},
    methodDescriptor_InventoryService_InputItem,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.item.InventoryItemRequest,
 *   !proto.item.InventoryResponse>}
 */
const methodDescriptor_InventoryService_EffectOn =
  new grpc.web.MethodDescriptor(
    '/item.InventoryService/EffectOn',
    grpc.web.MethodType.UNARY,
    proto.item.InventoryItemRequest,
    proto.item.InventoryResponse,
    /**
     * @param {!proto.item.InventoryItemRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.item.InventoryResponse.deserializeBinary,
  );

/**
 * @param {!proto.item.InventoryItemRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.item.InventoryResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.item.InventoryResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.item.InventoryServiceClient.prototype.effectOn = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/item.InventoryService/EffectOn',
    request,
    metadata || {},
    methodDescriptor_InventoryService_EffectOn,
    callback,
  );
};

/**
 * @param {!proto.item.InventoryItemRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.item.InventoryResponse>}
 *     Promise that resolves to the response
 */
proto.item.InventoryServicePromiseClient.prototype.effectOn = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/item.InventoryService/EffectOn',
    request,
    metadata || {},
    methodDescriptor_InventoryService_EffectOn,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.item.InventoryItemRequest,
 *   !proto.item.InventoryResponse>}
 */
const methodDescriptor_InventoryService_EffectOff =
  new grpc.web.MethodDescriptor(
    '/item.InventoryService/EffectOff',
    grpc.web.MethodType.UNARY,
    proto.item.InventoryItemRequest,
    proto.item.InventoryResponse,
    /**
     * @param {!proto.item.InventoryItemRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.item.InventoryResponse.deserializeBinary,
  );

/**
 * @param {!proto.item.InventoryItemRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.item.InventoryResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.item.InventoryResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.item.InventoryServiceClient.prototype.effectOff = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/item.InventoryService/EffectOff',
    request,
    metadata || {},
    methodDescriptor_InventoryService_EffectOff,
    callback,
  );
};

/**
 * @param {!proto.item.InventoryItemRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.item.InventoryResponse>}
 *     Promise that resolves to the response
 */
proto.item.InventoryServicePromiseClient.prototype.effectOff = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/item.InventoryService/EffectOff',
    request,
    metadata || {},
    methodDescriptor_InventoryService_EffectOff,
  );
};

module.exports = proto.item;
