// source: inventory.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

var item$common_pb = require('./item-common_pb.js');
goog.object.extend(proto, item$common_pb);
goog.exportSymbol('proto.item.GetInventoryRequest', null, global);
goog.exportSymbol('proto.item.InventoriesResponse', null, global);
goog.exportSymbol('proto.item.InventoryItemRequest', null, global);
goog.exportSymbol('proto.item.InventoryResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.item.GetInventoryRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.item.GetInventoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.item.GetInventoryRequest.displayName = 'proto.item.GetInventoryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.item.InventoryResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.item.InventoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.item.InventoryResponse.displayName = 'proto.item.InventoryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.item.InventoriesResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.item.InventoriesResponse.repeatedFields_,
    null,
  );
};
goog.inherits(proto.item.InventoriesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.item.InventoriesResponse.displayName = 'proto.item.InventoriesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.item.InventoryItemRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.item.InventoryItemRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.item.InventoryItemRequest.displayName =
    'proto.item.InventoryItemRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.item.GetInventoryRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.item.GetInventoryRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.item.GetInventoryRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.item.GetInventoryRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        accountId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        includeItem: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.item.GetInventoryRequest}
 */
proto.item.GetInventoryRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.item.GetInventoryRequest();
  return proto.item.GetInventoryRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.item.GetInventoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.item.GetInventoryRequest}
 */
proto.item.GetInventoryRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccountId(value);
        break;
      case 2:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIncludeItem(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.item.GetInventoryRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.item.GetInventoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.item.GetInventoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.item.GetInventoryRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getIncludeItem();
  if (f) {
    writer.writeBool(2, f);
  }
};

/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.item.GetInventoryRequest.prototype.getAccountId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.item.GetInventoryRequest} returns this
 */
proto.item.GetInventoryRequest.prototype.setAccountId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional bool include_item = 2;
 * @return {boolean}
 */
proto.item.GetInventoryRequest.prototype.getIncludeItem = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 2, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.item.GetInventoryRequest} returns this
 */
proto.item.GetInventoryRequest.prototype.setIncludeItem = function (value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.item.InventoryResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.item.InventoryResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.item.InventoryResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.item.InventoryResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        inventory:
          (f = msg.getInventory()) &&
          item$common_pb.Inventory.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.item.InventoryResponse}
 */
proto.item.InventoryResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.item.InventoryResponse();
  return proto.item.InventoryResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.item.InventoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.item.InventoryResponse}
 */
proto.item.InventoryResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = new item$common_pb.Inventory();
        reader.readMessage(
          value,
          item$common_pb.Inventory.deserializeBinaryFromReader,
        );
        msg.setInventory(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.item.InventoryResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.item.InventoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.item.InventoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.item.InventoryResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getInventory();
  if (f != null) {
    writer.writeMessage(3, f, item$common_pb.Inventory.serializeBinaryToWriter);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.item.InventoryResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.item.InventoryResponse} returns this
 */
proto.item.InventoryResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.item.InventoryResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.item.InventoryResponse} returns this
 */
proto.item.InventoryResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional Inventory inventory = 3;
 * @return {?proto.item.Inventory}
 */
proto.item.InventoryResponse.prototype.getInventory = function () {
  return /** @type{?proto.item.Inventory} */ (
    jspb.Message.getWrapperField(this, item$common_pb.Inventory, 3)
  );
};

/**
 * @param {?proto.item.Inventory|undefined} value
 * @return {!proto.item.InventoryResponse} returns this
 */
proto.item.InventoryResponse.prototype.setInventory = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.item.InventoryResponse} returns this
 */
proto.item.InventoryResponse.prototype.clearInventory = function () {
  return this.setInventory(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.item.InventoryResponse.prototype.hasInventory = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.item.InventoriesResponse.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.item.InventoriesResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.item.InventoriesResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.item.InventoriesResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.item.InventoriesResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        inventoryList: jspb.Message.toObjectList(
          msg.getInventoryList(),
          item$common_pb.Inventory.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.item.InventoriesResponse}
 */
proto.item.InventoriesResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.item.InventoriesResponse();
  return proto.item.InventoriesResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.item.InventoriesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.item.InventoriesResponse}
 */
proto.item.InventoriesResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = new item$common_pb.Inventory();
        reader.readMessage(
          value,
          item$common_pb.Inventory.deserializeBinaryFromReader,
        );
        msg.addInventory(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.item.InventoriesResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.item.InventoriesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.item.InventoriesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.item.InventoriesResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getInventoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      item$common_pb.Inventory.serializeBinaryToWriter,
    );
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.item.InventoriesResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.item.InventoriesResponse} returns this
 */
proto.item.InventoriesResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.item.InventoriesResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.item.InventoriesResponse} returns this
 */
proto.item.InventoriesResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * repeated Inventory inventory = 3;
 * @return {!Array<!proto.item.Inventory>}
 */
proto.item.InventoriesResponse.prototype.getInventoryList = function () {
  return /** @type{!Array<!proto.item.Inventory>} */ (
    jspb.Message.getRepeatedWrapperField(this, item$common_pb.Inventory, 3)
  );
};

/**
 * @param {!Array<!proto.item.Inventory>} value
 * @return {!proto.item.InventoriesResponse} returns this
 */
proto.item.InventoriesResponse.prototype.setInventoryList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.item.Inventory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.item.Inventory}
 */
proto.item.InventoriesResponse.prototype.addInventory = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    3,
    opt_value,
    proto.item.Inventory,
    opt_index,
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.item.InventoriesResponse} returns this
 */
proto.item.InventoriesResponse.prototype.clearInventoryList = function () {
  return this.setInventoryList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.item.InventoryItemRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.item.InventoryItemRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.item.InventoryItemRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.item.InventoryItemRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        accountId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        itemId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        amount: jspb.Message.getFieldWithDefault(msg, 3, 0),
        transactionType: jspb.Message.getFieldWithDefault(msg, 4, 0),
        txGroupId: jspb.Message.getFieldWithDefault(msg, 5, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.item.InventoryItemRequest}
 */
proto.item.InventoryItemRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.item.InventoryItemRequest();
  return proto.item.InventoryItemRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.item.InventoryItemRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.item.InventoryItemRequest}
 */
proto.item.InventoryItemRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccountId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setItemId(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setAmount(value);
        break;
      case 4:
        var value = /** @type {!proto.item.TransactionType} */ (
          reader.readEnum()
        );
        msg.setTransactionType(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setTxGroupId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.item.InventoryItemRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.item.InventoryItemRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.item.InventoryItemRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.item.InventoryItemRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getItemId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
  f = message.getTransactionType();
  if (f !== 0.0) {
    writer.writeEnum(4, f);
  }
  f = message.getTxGroupId();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.item.InventoryItemRequest.prototype.getAccountId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.item.InventoryItemRequest} returns this
 */
proto.item.InventoryItemRequest.prototype.setAccountId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string item_id = 2;
 * @return {string}
 */
proto.item.InventoryItemRequest.prototype.getItemId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.item.InventoryItemRequest} returns this
 */
proto.item.InventoryItemRequest.prototype.setItemId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional int32 amount = 3;
 * @return {number}
 */
proto.item.InventoryItemRequest.prototype.getAmount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.item.InventoryItemRequest} returns this
 */
proto.item.InventoryItemRequest.prototype.setAmount = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional TransactionType transaction_type = 4;
 * @return {!proto.item.TransactionType}
 */
proto.item.InventoryItemRequest.prototype.getTransactionType = function () {
  return /** @type {!proto.item.TransactionType} */ (
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};

/**
 * @param {!proto.item.TransactionType} value
 * @return {!proto.item.InventoryItemRequest} returns this
 */
proto.item.InventoryItemRequest.prototype.setTransactionType = function (
  value,
) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};

/**
 * optional string tx_group_id = 5;
 * @return {string}
 */
proto.item.InventoryItemRequest.prototype.getTxGroupId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.item.InventoryItemRequest} returns this
 */
proto.item.InventoryItemRequest.prototype.setTxGroupId = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

goog.object.extend(exports, proto.item);
