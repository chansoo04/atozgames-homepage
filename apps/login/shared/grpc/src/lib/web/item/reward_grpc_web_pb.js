/**
 * @fileoverview gRPC-Web generated client stub for item
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: reward.proto

/* eslint-disable */
// @ts-nocheck

const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.item = require('./reward_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.item.RewardServiceClient = function (hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.item.RewardServicePromiseClient = function (
  hostname,
  credentials,
  options,
) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.item.GetRewardsRequest,
 *   !proto.item.GetRewardsResponse>}
 */
const methodDescriptor_RewardService_GetRewards = new grpc.web.MethodDescriptor(
  '/item.RewardService/GetRewards',
  grpc.web.MethodType.UNARY,
  proto.item.GetRewardsRequest,
  proto.item.GetRewardsResponse,
  /**
   * @param {!proto.item.GetRewardsRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.item.GetRewardsResponse.deserializeBinary,
);

/**
 * @param {!proto.item.GetRewardsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.item.GetRewardsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.item.GetRewardsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.item.RewardServiceClient.prototype.getRewards = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/item.RewardService/GetRewards',
    request,
    metadata || {},
    methodDescriptor_RewardService_GetRewards,
    callback,
  );
};

/**
 * @param {!proto.item.GetRewardsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.item.GetRewardsResponse>}
 *     Promise that resolves to the response
 */
proto.item.RewardServicePromiseClient.prototype.getRewards = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/item.RewardService/GetRewards',
    request,
    metadata || {},
    methodDescriptor_RewardService_GetRewards,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.item.PayRewardRequest,
 *   !proto.item.PayRewardResponse>}
 */
const methodDescriptor_RewardService_PayReward = new grpc.web.MethodDescriptor(
  '/item.RewardService/PayReward',
  grpc.web.MethodType.UNARY,
  proto.item.PayRewardRequest,
  proto.item.PayRewardResponse,
  /**
   * @param {!proto.item.PayRewardRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.item.PayRewardResponse.deserializeBinary,
);

/**
 * @param {!proto.item.PayRewardRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.item.PayRewardResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.item.PayRewardResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.item.RewardServiceClient.prototype.payReward = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/item.RewardService/PayReward',
    request,
    metadata || {},
    methodDescriptor_RewardService_PayReward,
    callback,
  );
};

/**
 * @param {!proto.item.PayRewardRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.item.PayRewardResponse>}
 *     Promise that resolves to the response
 */
proto.item.RewardServicePromiseClient.prototype.payReward = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/item.RewardService/PayReward',
    request,
    metadata || {},
    methodDescriptor_RewardService_PayReward,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.item.GetPaidRewardsRequest,
 *   !proto.item.GetPaidRewardsResponse>}
 */
const methodDescriptor_RewardService_GetPaidRewards =
  new grpc.web.MethodDescriptor(
    '/item.RewardService/GetPaidRewards',
    grpc.web.MethodType.UNARY,
    proto.item.GetPaidRewardsRequest,
    proto.item.GetPaidRewardsResponse,
    /**
     * @param {!proto.item.GetPaidRewardsRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.item.GetPaidRewardsResponse.deserializeBinary,
  );

/**
 * @param {!proto.item.GetPaidRewardsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.item.GetPaidRewardsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.item.GetPaidRewardsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.item.RewardServiceClient.prototype.getPaidRewards = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/item.RewardService/GetPaidRewards',
    request,
    metadata || {},
    methodDescriptor_RewardService_GetPaidRewards,
    callback,
  );
};

/**
 * @param {!proto.item.GetPaidRewardsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.item.GetPaidRewardsResponse>}
 *     Promise that resolves to the response
 */
proto.item.RewardServicePromiseClient.prototype.getPaidRewards = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/item.RewardService/GetPaidRewards',
    request,
    metadata || {},
    methodDescriptor_RewardService_GetPaidRewards,
  );
};

module.exports = proto.item;
