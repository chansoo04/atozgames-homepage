/**
 * @fileoverview gRPC-Web generated client stub for user
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: account.proto

/* eslint-disable */
// @ts-nocheck

const grpc = {};
grpc.web = require('grpc-web');

var user$common_pb = require('./user-common_pb.js');
const proto = {};
proto.user = require('./account_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.user.AccountServiceClient = function (hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.user.AccountServicePromiseClient = function (
  hostname,
  credentials,
  options,
) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.IsExistAccountRequest,
 *   !proto.user.IsExistAccountResponse>}
 */
const methodDescriptor_AccountService_isExistAccount =
  new grpc.web.MethodDescriptor(
    '/user.AccountService/isExistAccount',
    grpc.web.MethodType.UNARY,
    proto.user.IsExistAccountRequest,
    proto.user.IsExistAccountResponse,
    /**
     * @param {!proto.user.IsExistAccountRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.user.IsExistAccountResponse.deserializeBinary,
  );

/**
 * @param {!proto.user.IsExistAccountRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.IsExistAccountResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.IsExistAccountResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.AccountServiceClient.prototype.isExistAccount = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.AccountService/isExistAccount',
    request,
    metadata || {},
    methodDescriptor_AccountService_isExistAccount,
    callback,
  );
};

/**
 * @param {!proto.user.IsExistAccountRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.IsExistAccountResponse>}
 *     Promise that resolves to the response
 */
proto.user.AccountServicePromiseClient.prototype.isExistAccount = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.AccountService/isExistAccount',
    request,
    metadata || {},
    methodDescriptor_AccountService_isExistAccount,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.SignUpRequest,
 *   !proto.user.SignResponse>}
 */
const methodDescriptor_AccountService_SignUp = new grpc.web.MethodDescriptor(
  '/user.AccountService/SignUp',
  grpc.web.MethodType.UNARY,
  proto.user.SignUpRequest,
  proto.user.SignResponse,
  /**
   * @param {!proto.user.SignUpRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.user.SignResponse.deserializeBinary,
);

/**
 * @param {!proto.user.SignUpRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.SignResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.SignResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.AccountServiceClient.prototype.signUp = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.AccountService/SignUp',
    request,
    metadata || {},
    methodDescriptor_AccountService_SignUp,
    callback,
  );
};

/**
 * @param {!proto.user.SignUpRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.SignResponse>}
 *     Promise that resolves to the response
 */
proto.user.AccountServicePromiseClient.prototype.signUp = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.AccountService/SignUp',
    request,
    metadata || {},
    methodDescriptor_AccountService_SignUp,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.SignInRequest,
 *   !proto.user.SignResponse>}
 */
const methodDescriptor_AccountService_SignIn = new grpc.web.MethodDescriptor(
  '/user.AccountService/SignIn',
  grpc.web.MethodType.UNARY,
  proto.user.SignInRequest,
  proto.user.SignResponse,
  /**
   * @param {!proto.user.SignInRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.user.SignResponse.deserializeBinary,
);

/**
 * @param {!proto.user.SignInRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.SignResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.SignResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.AccountServiceClient.prototype.signIn = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.AccountService/SignIn',
    request,
    metadata || {},
    methodDescriptor_AccountService_SignIn,
    callback,
  );
};

/**
 * @param {!proto.user.SignInRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.SignResponse>}
 *     Promise that resolves to the response
 */
proto.user.AccountServicePromiseClient.prototype.signIn = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.AccountService/SignIn',
    request,
    metadata || {},
    methodDescriptor_AccountService_SignIn,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.SignOutRequest,
 *   !proto.user.DefaultResponse>}
 */
const methodDescriptor_AccountService_SignOut = new grpc.web.MethodDescriptor(
  '/user.AccountService/SignOut',
  grpc.web.MethodType.UNARY,
  proto.user.SignOutRequest,
  user$common_pb.DefaultResponse,
  /**
   * @param {!proto.user.SignOutRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  user$common_pb.DefaultResponse.deserializeBinary,
);

/**
 * @param {!proto.user.SignOutRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.DefaultResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.DefaultResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.AccountServiceClient.prototype.signOut = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.AccountService/SignOut',
    request,
    metadata || {},
    methodDescriptor_AccountService_SignOut,
    callback,
  );
};

/**
 * @param {!proto.user.SignOutRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.DefaultResponse>}
 *     Promise that resolves to the response
 */
proto.user.AccountServicePromiseClient.prototype.signOut = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.AccountService/SignOut',
    request,
    metadata || {},
    methodDescriptor_AccountService_SignOut,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.AccountIdParam,
 *   !proto.user.GetAccountResponse>}
 */
const methodDescriptor_AccountService_GetAccount =
  new grpc.web.MethodDescriptor(
    '/user.AccountService/GetAccount',
    grpc.web.MethodType.UNARY,
    proto.user.AccountIdParam,
    proto.user.GetAccountResponse,
    /**
     * @param {!proto.user.AccountIdParam} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.user.GetAccountResponse.deserializeBinary,
  );

/**
 * @param {!proto.user.AccountIdParam} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.GetAccountResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.GetAccountResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.AccountServiceClient.prototype.getAccount = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.AccountService/GetAccount',
    request,
    metadata || {},
    methodDescriptor_AccountService_GetAccount,
    callback,
  );
};

/**
 * @param {!proto.user.AccountIdParam} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.GetAccountResponse>}
 *     Promise that resolves to the response
 */
proto.user.AccountServicePromiseClient.prototype.getAccount = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.AccountService/GetAccount',
    request,
    metadata || {},
    methodDescriptor_AccountService_GetAccount,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.GetAccountByUserIdRequest,
 *   !proto.user.GetAccountByUserIdResponse>}
 */
const methodDescriptor_AccountService_GetAccountByUserId =
  new grpc.web.MethodDescriptor(
    '/user.AccountService/GetAccountByUserId',
    grpc.web.MethodType.UNARY,
    proto.user.GetAccountByUserIdRequest,
    proto.user.GetAccountByUserIdResponse,
    /**
     * @param {!proto.user.GetAccountByUserIdRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.user.GetAccountByUserIdResponse.deserializeBinary,
  );

/**
 * @param {!proto.user.GetAccountByUserIdRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.GetAccountByUserIdResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.GetAccountByUserIdResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.AccountServiceClient.prototype.getAccountByUserId = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.AccountService/GetAccountByUserId',
    request,
    metadata || {},
    methodDescriptor_AccountService_GetAccountByUserId,
    callback,
  );
};

/**
 * @param {!proto.user.GetAccountByUserIdRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.GetAccountByUserIdResponse>}
 *     Promise that resolves to the response
 */
proto.user.AccountServicePromiseClient.prototype.getAccountByUserId = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.AccountService/GetAccountByUserId',
    request,
    metadata || {},
    methodDescriptor_AccountService_GetAccountByUserId,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UpdateAccountRequest,
 *   !proto.user.DefaultResponse>}
 */
const methodDescriptor_AccountService_UpdateAccount =
  new grpc.web.MethodDescriptor(
    '/user.AccountService/UpdateAccount',
    grpc.web.MethodType.UNARY,
    proto.user.UpdateAccountRequest,
    user$common_pb.DefaultResponse,
    /**
     * @param {!proto.user.UpdateAccountRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    user$common_pb.DefaultResponse.deserializeBinary,
  );

/**
 * @param {!proto.user.UpdateAccountRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.DefaultResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.DefaultResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.AccountServiceClient.prototype.updateAccount = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.AccountService/UpdateAccount',
    request,
    metadata || {},
    methodDescriptor_AccountService_UpdateAccount,
    callback,
  );
};

/**
 * @param {!proto.user.UpdateAccountRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.DefaultResponse>}
 *     Promise that resolves to the response
 */
proto.user.AccountServicePromiseClient.prototype.updateAccount = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.AccountService/UpdateAccount',
    request,
    metadata || {},
    methodDescriptor_AccountService_UpdateAccount,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.AccountStateRequest,
 *   !proto.user.DefaultResponse>}
 */
const methodDescriptor_AccountService_Withdrawal =
  new grpc.web.MethodDescriptor(
    '/user.AccountService/Withdrawal',
    grpc.web.MethodType.UNARY,
    proto.user.AccountStateRequest,
    user$common_pb.DefaultResponse,
    /**
     * @param {!proto.user.AccountStateRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    user$common_pb.DefaultResponse.deserializeBinary,
  );

/**
 * @param {!proto.user.AccountStateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.DefaultResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.DefaultResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.AccountServiceClient.prototype.withdrawal = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.AccountService/Withdrawal',
    request,
    metadata || {},
    methodDescriptor_AccountService_Withdrawal,
    callback,
  );
};

/**
 * @param {!proto.user.AccountStateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.DefaultResponse>}
 *     Promise that resolves to the response
 */
proto.user.AccountServicePromiseClient.prototype.withdrawal = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.AccountService/Withdrawal',
    request,
    metadata || {},
    methodDescriptor_AccountService_Withdrawal,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.AccountStateRequest,
 *   !proto.user.DefaultResponse>}
 */
const methodDescriptor_AccountService_Dormant = new grpc.web.MethodDescriptor(
  '/user.AccountService/Dormant',
  grpc.web.MethodType.UNARY,
  proto.user.AccountStateRequest,
  user$common_pb.DefaultResponse,
  /**
   * @param {!proto.user.AccountStateRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  user$common_pb.DefaultResponse.deserializeBinary,
);

/**
 * @param {!proto.user.AccountStateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.DefaultResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.DefaultResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.AccountServiceClient.prototype.dormant = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.AccountService/Dormant',
    request,
    metadata || {},
    methodDescriptor_AccountService_Dormant,
    callback,
  );
};

/**
 * @param {!proto.user.AccountStateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.DefaultResponse>}
 *     Promise that resolves to the response
 */
proto.user.AccountServicePromiseClient.prototype.dormant = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.AccountService/Dormant',
    request,
    metadata || {},
    methodDescriptor_AccountService_Dormant,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.AccountStateRequest,
 *   !proto.user.DefaultResponse>}
 */
const methodDescriptor_AccountService_Disable = new grpc.web.MethodDescriptor(
  '/user.AccountService/Disable',
  grpc.web.MethodType.UNARY,
  proto.user.AccountStateRequest,
  user$common_pb.DefaultResponse,
  /**
   * @param {!proto.user.AccountStateRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  user$common_pb.DefaultResponse.deserializeBinary,
);

/**
 * @param {!proto.user.AccountStateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.DefaultResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.DefaultResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.AccountServiceClient.prototype.disable = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.AccountService/Disable',
    request,
    metadata || {},
    methodDescriptor_AccountService_Disable,
    callback,
  );
};

/**
 * @param {!proto.user.AccountStateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.DefaultResponse>}
 *     Promise that resolves to the response
 */
proto.user.AccountServicePromiseClient.prototype.disable = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.AccountService/Disable',
    request,
    metadata || {},
    methodDescriptor_AccountService_Disable,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.HandLogRequest,
 *   !proto.user.DefaultResponse>}
 */
const methodDescriptor_AccountService_HandLog = new grpc.web.MethodDescriptor(
  '/user.AccountService/HandLog',
  grpc.web.MethodType.UNARY,
  proto.user.HandLogRequest,
  user$common_pb.DefaultResponse,
  /**
   * @param {!proto.user.HandLogRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  user$common_pb.DefaultResponse.deserializeBinary,
);

/**
 * @param {!proto.user.HandLogRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.DefaultResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.DefaultResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.AccountServiceClient.prototype.handLog = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.AccountService/HandLog',
    request,
    metadata || {},
    methodDescriptor_AccountService_HandLog,
    callback,
  );
};

/**
 * @param {!proto.user.HandLogRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.DefaultResponse>}
 *     Promise that resolves to the response
 */
proto.user.AccountServicePromiseClient.prototype.handLog = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.AccountService/HandLog',
    request,
    metadata || {},
    methodDescriptor_AccountService_HandLog,
  );
};

module.exports = proto.user;
