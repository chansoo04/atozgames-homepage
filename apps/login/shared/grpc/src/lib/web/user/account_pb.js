// source: account.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

var user$common_pb = require('./user-common_pb.js');
goog.object.extend(proto, user$common_pb);
goog.exportSymbol('proto.user.AccountIdParam', null, global);
goog.exportSymbol('proto.user.AccountStateRequest', null, global);
goog.exportSymbol('proto.user.GetAccountByUserIdRequest', null, global);
goog.exportSymbol('proto.user.GetAccountByUserIdResponse', null, global);
goog.exportSymbol('proto.user.GetAccountResponse', null, global);
goog.exportSymbol('proto.user.HandLogRequest', null, global);
goog.exportSymbol('proto.user.IsExistAccountRequest', null, global);
goog.exportSymbol('proto.user.IsExistAccountResponse', null, global);
goog.exportSymbol('proto.user.SignInRequest', null, global);
goog.exportSymbol('proto.user.SignOutRequest', null, global);
goog.exportSymbol('proto.user.SignResponse', null, global);
goog.exportSymbol('proto.user.SignUpRequest', null, global);
goog.exportSymbol('proto.user.UpdateAccountRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.AccountIdParam = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.AccountIdParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.AccountIdParam.displayName = 'proto.user.AccountIdParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.IsExistAccountRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.IsExistAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.IsExistAccountRequest.displayName =
    'proto.user.IsExistAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.IsExistAccountResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.IsExistAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.IsExistAccountResponse.displayName =
    'proto.user.IsExistAccountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.SignUpRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.SignUpRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.SignUpRequest.displayName = 'proto.user.SignUpRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.SignInRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.SignInRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.SignInRequest.displayName = 'proto.user.SignInRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.SignResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.SignResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.SignResponse.displayName = 'proto.user.SignResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.SignOutRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.SignOutRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.SignOutRequest.displayName = 'proto.user.SignOutRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.HandLogRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.HandLogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.HandLogRequest.displayName = 'proto.user.HandLogRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.GetAccountResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.GetAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.GetAccountResponse.displayName = 'proto.user.GetAccountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.GetAccountByUserIdRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.GetAccountByUserIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.GetAccountByUserIdRequest.displayName =
    'proto.user.GetAccountByUserIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.GetAccountByUserIdResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.user.GetAccountByUserIdResponse.repeatedFields_,
    null,
  );
};
goog.inherits(proto.user.GetAccountByUserIdResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.GetAccountByUserIdResponse.displayName =
    'proto.user.GetAccountByUserIdResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.UpdateAccountRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.UpdateAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.UpdateAccountRequest.displayName =
    'proto.user.UpdateAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.AccountStateRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.AccountStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.AccountStateRequest.displayName = 'proto.user.AccountStateRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.AccountIdParam.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.AccountIdParam.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.AccountIdParam} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.AccountIdParam.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        accountId: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.AccountIdParam}
 */
proto.user.AccountIdParam.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.AccountIdParam();
  return proto.user.AccountIdParam.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.AccountIdParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.AccountIdParam}
 */
proto.user.AccountIdParam.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccountId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.AccountIdParam.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.AccountIdParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.AccountIdParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.AccountIdParam.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.user.AccountIdParam.prototype.getAccountId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.AccountIdParam} returns this
 */
proto.user.AccountIdParam.prototype.setAccountId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.IsExistAccountRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.IsExistAccountRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.IsExistAccountRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.IsExistAccountRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        firebaseUid: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.IsExistAccountRequest}
 */
proto.user.IsExistAccountRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.IsExistAccountRequest();
  return proto.user.IsExistAccountRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.IsExistAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.IsExistAccountRequest}
 */
proto.user.IsExistAccountRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setFirebaseUid(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.IsExistAccountRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.IsExistAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.IsExistAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.IsExistAccountRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getFirebaseUid();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string firebase_uid = 1;
 * @return {string}
 */
proto.user.IsExistAccountRequest.prototype.getFirebaseUid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.IsExistAccountRequest} returns this
 */
proto.user.IsExistAccountRequest.prototype.setFirebaseUid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.IsExistAccountResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.IsExistAccountResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.IsExistAccountResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.IsExistAccountResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        isExist: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
        userId: jspb.Message.getFieldWithDefault(msg, 4, ''),
        accountId: jspb.Message.getFieldWithDefault(msg, 5, ''),
        isActive: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
        isPublic: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
        isDormant: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
        isDisable: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
        isWithdrawal: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
        isPause: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.IsExistAccountResponse}
 */
proto.user.IsExistAccountResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.IsExistAccountResponse();
  return proto.user.IsExistAccountResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.IsExistAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.IsExistAccountResponse}
 */
proto.user.IsExistAccountResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsExist(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserId(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccountId(value);
        break;
      case 6:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsActive(value);
        break;
      case 7:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsPublic(value);
        break;
      case 8:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsDormant(value);
        break;
      case 9:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsDisable(value);
        break;
      case 10:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsWithdrawal(value);
        break;
      case 11:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsPause(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.IsExistAccountResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.IsExistAccountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.IsExistAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.IsExistAccountResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getIsExist();
  if (f) {
    writer.writeBool(3, f);
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(6, f);
  }
  f = message.getIsPublic();
  if (f) {
    writer.writeBool(7, f);
  }
  f = message.getIsDormant();
  if (f) {
    writer.writeBool(8, f);
  }
  f = message.getIsDisable();
  if (f) {
    writer.writeBool(9, f);
  }
  f = message.getIsWithdrawal();
  if (f) {
    writer.writeBool(10, f);
  }
  f = message.getIsPause();
  if (f) {
    writer.writeBool(11, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.user.IsExistAccountResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.IsExistAccountResponse} returns this
 */
proto.user.IsExistAccountResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.user.IsExistAccountResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.IsExistAccountResponse} returns this
 */
proto.user.IsExistAccountResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional bool is_exist = 3;
 * @return {boolean}
 */
proto.user.IsExistAccountResponse.prototype.getIsExist = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 3, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.IsExistAccountResponse} returns this
 */
proto.user.IsExistAccountResponse.prototype.setIsExist = function (value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};

/**
 * optional string user_id = 4;
 * @return {string}
 */
proto.user.IsExistAccountResponse.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.IsExistAccountResponse} returns this
 */
proto.user.IsExistAccountResponse.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string account_id = 5;
 * @return {string}
 */
proto.user.IsExistAccountResponse.prototype.getAccountId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.IsExistAccountResponse} returns this
 */
proto.user.IsExistAccountResponse.prototype.setAccountId = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional bool is_active = 6;
 * @return {boolean}
 */
proto.user.IsExistAccountResponse.prototype.getIsActive = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 6, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.IsExistAccountResponse} returns this
 */
proto.user.IsExistAccountResponse.prototype.setIsActive = function (value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};

/**
 * optional bool is_public = 7;
 * @return {boolean}
 */
proto.user.IsExistAccountResponse.prototype.getIsPublic = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 7, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.IsExistAccountResponse} returns this
 */
proto.user.IsExistAccountResponse.prototype.setIsPublic = function (value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};

/**
 * optional bool is_dormant = 8;
 * @return {boolean}
 */
proto.user.IsExistAccountResponse.prototype.getIsDormant = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 8, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.IsExistAccountResponse} returns this
 */
proto.user.IsExistAccountResponse.prototype.setIsDormant = function (value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};

/**
 * optional bool is_disable = 9;
 * @return {boolean}
 */
proto.user.IsExistAccountResponse.prototype.getIsDisable = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 9, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.IsExistAccountResponse} returns this
 */
proto.user.IsExistAccountResponse.prototype.setIsDisable = function (value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};

/**
 * optional bool is_withdrawal = 10;
 * @return {boolean}
 */
proto.user.IsExistAccountResponse.prototype.getIsWithdrawal = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 10, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.IsExistAccountResponse} returns this
 */
proto.user.IsExistAccountResponse.prototype.setIsWithdrawal = function (value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};

/**
 * optional bool is_pause = 11;
 * @return {boolean}
 */
proto.user.IsExistAccountResponse.prototype.getIsPause = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 11, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.IsExistAccountResponse} returns this
 */
proto.user.IsExistAccountResponse.prototype.setIsPause = function (value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.SignUpRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.user.SignUpRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.SignUpRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.SignUpRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        firebaseUid: jspb.Message.getFieldWithDefault(msg, 2, ''),
        accountType: jspb.Message.getFieldWithDefault(msg, 3, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.SignUpRequest}
 */
proto.user.SignUpRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.SignUpRequest();
  return proto.user.SignUpRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.SignUpRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.SignUpRequest}
 */
proto.user.SignUpRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setFirebaseUid(value);
        break;
      case 3:
        var value = /** @type {!proto.user.AccountType} */ (reader.readEnum());
        msg.setAccountType(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.SignUpRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.SignUpRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.SignUpRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.SignUpRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getFirebaseUid();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getAccountType();
  if (f !== 0.0) {
    writer.writeEnum(3, f);
  }
};

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.user.SignUpRequest.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.SignUpRequest} returns this
 */
proto.user.SignUpRequest.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string firebase_uid = 2;
 * @return {string}
 */
proto.user.SignUpRequest.prototype.getFirebaseUid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.SignUpRequest} returns this
 */
proto.user.SignUpRequest.prototype.setFirebaseUid = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional AccountType account_type = 3;
 * @return {!proto.user.AccountType}
 */
proto.user.SignUpRequest.prototype.getAccountType = function () {
  return /** @type {!proto.user.AccountType} */ (
    jspb.Message.getFieldWithDefault(this, 3, 0)
  );
};

/**
 * @param {!proto.user.AccountType} value
 * @return {!proto.user.SignUpRequest} returns this
 */
proto.user.SignUpRequest.prototype.setAccountType = function (value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.SignInRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.user.SignInRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.SignInRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.SignInRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        firebaseUid: jspb.Message.getFieldWithDefault(msg, 1, ''),
        pushToken: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.SignInRequest}
 */
proto.user.SignInRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.SignInRequest();
  return proto.user.SignInRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.SignInRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.SignInRequest}
 */
proto.user.SignInRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setFirebaseUid(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPushToken(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.SignInRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.SignInRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.SignInRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.SignInRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getFirebaseUid();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPushToken();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string firebase_uid = 1;
 * @return {string}
 */
proto.user.SignInRequest.prototype.getFirebaseUid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.SignInRequest} returns this
 */
proto.user.SignInRequest.prototype.setFirebaseUid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string push_token = 2;
 * @return {string}
 */
proto.user.SignInRequest.prototype.getPushToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.SignInRequest} returns this
 */
proto.user.SignInRequest.prototype.setPushToken = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.SignResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.user.SignResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.SignResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.SignResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        accountId: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.SignResponse}
 */
proto.user.SignResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.SignResponse();
  return proto.user.SignResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.SignResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.SignResponse}
 */
proto.user.SignResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccountId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.SignResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.SignResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.SignResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.SignResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.user.SignResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.SignResponse} returns this
 */
proto.user.SignResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.user.SignResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.SignResponse} returns this
 */
proto.user.SignResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string account_id = 3;
 * @return {string}
 */
proto.user.SignResponse.prototype.getAccountId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.SignResponse} returns this
 */
proto.user.SignResponse.prototype.setAccountId = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.SignOutRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.SignOutRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.SignOutRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.SignOutRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        firebaseUid: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.SignOutRequest}
 */
proto.user.SignOutRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.SignOutRequest();
  return proto.user.SignOutRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.SignOutRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.SignOutRequest}
 */
proto.user.SignOutRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setFirebaseUid(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.SignOutRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.SignOutRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.SignOutRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.SignOutRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getFirebaseUid();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string firebase_uid = 1;
 * @return {string}
 */
proto.user.SignOutRequest.prototype.getFirebaseUid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.SignOutRequest} returns this
 */
proto.user.SignOutRequest.prototype.setFirebaseUid = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.HandLogRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.HandLogRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.HandLogRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.HandLogRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        accountId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        txGroupId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        potId: jspb.Message.getFieldWithDefault(msg, 3, 0),
        hands: jspb.Message.getFieldWithDefault(msg, 4, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.HandLogRequest}
 */
proto.user.HandLogRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.HandLogRequest();
  return proto.user.HandLogRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.HandLogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.HandLogRequest}
 */
proto.user.HandLogRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccountId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setTxGroupId(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setPotId(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setHands(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.HandLogRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.HandLogRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.HandLogRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.HandLogRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getTxGroupId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getPotId();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
  f = message.getHands();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.user.HandLogRequest.prototype.getAccountId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.HandLogRequest} returns this
 */
proto.user.HandLogRequest.prototype.setAccountId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string tx_group_id = 2;
 * @return {string}
 */
proto.user.HandLogRequest.prototype.getTxGroupId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.HandLogRequest} returns this
 */
proto.user.HandLogRequest.prototype.setTxGroupId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional int32 pot_id = 3;
 * @return {number}
 */
proto.user.HandLogRequest.prototype.getPotId = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.user.HandLogRequest} returns this
 */
proto.user.HandLogRequest.prototype.setPotId = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional string hands = 4;
 * @return {string}
 */
proto.user.HandLogRequest.prototype.getHands = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.HandLogRequest} returns this
 */
proto.user.HandLogRequest.prototype.setHands = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.GetAccountResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.GetAccountResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.GetAccountResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.GetAccountResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        account:
          (f = msg.getAccount()) &&
          user$common_pb.Account.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.GetAccountResponse}
 */
proto.user.GetAccountResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.GetAccountResponse();
  return proto.user.GetAccountResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.GetAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.GetAccountResponse}
 */
proto.user.GetAccountResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = new user$common_pb.Account();
        reader.readMessage(
          value,
          user$common_pb.Account.deserializeBinaryFromReader,
        );
        msg.setAccount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.GetAccountResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.GetAccountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.GetAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.GetAccountResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(3, f, user$common_pb.Account.serializeBinaryToWriter);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.user.GetAccountResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.GetAccountResponse} returns this
 */
proto.user.GetAccountResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.user.GetAccountResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.GetAccountResponse} returns this
 */
proto.user.GetAccountResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional Account account = 3;
 * @return {?proto.user.Account}
 */
proto.user.GetAccountResponse.prototype.getAccount = function () {
  return /** @type{?proto.user.Account} */ (
    jspb.Message.getWrapperField(this, user$common_pb.Account, 3)
  );
};

/**
 * @param {?proto.user.Account|undefined} value
 * @return {!proto.user.GetAccountResponse} returns this
 */
proto.user.GetAccountResponse.prototype.setAccount = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.user.GetAccountResponse} returns this
 */
proto.user.GetAccountResponse.prototype.clearAccount = function () {
  return this.setAccount(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.user.GetAccountResponse.prototype.hasAccount = function () {
  return jspb.Message.getField(this, 3) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.GetAccountByUserIdRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.GetAccountByUserIdRequest.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.GetAccountByUserIdRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.GetAccountByUserIdRequest.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.GetAccountByUserIdRequest}
 */
proto.user.GetAccountByUserIdRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.GetAccountByUserIdRequest();
  return proto.user.GetAccountByUserIdRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.GetAccountByUserIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.GetAccountByUserIdRequest}
 */
proto.user.GetAccountByUserIdRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.GetAccountByUserIdRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.GetAccountByUserIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.GetAccountByUserIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.GetAccountByUserIdRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.user.GetAccountByUserIdRequest.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.GetAccountByUserIdRequest} returns this
 */
proto.user.GetAccountByUserIdRequest.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.GetAccountByUserIdResponse.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.GetAccountByUserIdResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.GetAccountByUserIdResponse.toObject(
      opt_includeInstance,
      this,
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.GetAccountByUserIdResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.GetAccountByUserIdResponse.toObject = function (
    includeInstance,
    msg,
  ) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        accountList: jspb.Message.toObjectList(
          msg.getAccountList(),
          user$common_pb.Account.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.GetAccountByUserIdResponse}
 */
proto.user.GetAccountByUserIdResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.GetAccountByUserIdResponse();
  return proto.user.GetAccountByUserIdResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.GetAccountByUserIdResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.GetAccountByUserIdResponse}
 */
proto.user.GetAccountByUserIdResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = new user$common_pb.Account();
        reader.readMessage(
          value,
          user$common_pb.Account.deserializeBinaryFromReader,
        );
        msg.addAccount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.GetAccountByUserIdResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.GetAccountByUserIdResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.GetAccountByUserIdResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.GetAccountByUserIdResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getAccountList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      user$common_pb.Account.serializeBinaryToWriter,
    );
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.user.GetAccountByUserIdResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.GetAccountByUserIdResponse} returns this
 */
proto.user.GetAccountByUserIdResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.user.GetAccountByUserIdResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.GetAccountByUserIdResponse} returns this
 */
proto.user.GetAccountByUserIdResponse.prototype.setErrorMessage = function (
  value,
) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * repeated Account account = 3;
 * @return {!Array<!proto.user.Account>}
 */
proto.user.GetAccountByUserIdResponse.prototype.getAccountList = function () {
  return /** @type{!Array<!proto.user.Account>} */ (
    jspb.Message.getRepeatedWrapperField(this, user$common_pb.Account, 3)
  );
};

/**
 * @param {!Array<!proto.user.Account>} value
 * @return {!proto.user.GetAccountByUserIdResponse} returns this
 */
proto.user.GetAccountByUserIdResponse.prototype.setAccountList = function (
  value,
) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.user.Account=} opt_value
 * @param {number=} opt_index
 * @return {!proto.user.Account}
 */
proto.user.GetAccountByUserIdResponse.prototype.addAccount = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    3,
    opt_value,
    proto.user.Account,
    opt_index,
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.GetAccountByUserIdResponse} returns this
 */
proto.user.GetAccountByUserIdResponse.prototype.clearAccountList = function () {
  return this.setAccountList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.UpdateAccountRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.UpdateAccountRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.UpdateAccountRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.UpdateAccountRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        accountId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        accountname: jspb.Message.getFieldWithDefault(msg, 2, ''),
        nickname: jspb.Message.getFieldWithDefault(msg, 3, ''),
        pushToken: jspb.Message.getFieldWithDefault(msg, 4, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.UpdateAccountRequest}
 */
proto.user.UpdateAccountRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.UpdateAccountRequest();
  return proto.user.UpdateAccountRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.UpdateAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.UpdateAccountRequest}
 */
proto.user.UpdateAccountRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccountId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccountname(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setNickname(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setPushToken(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.UpdateAccountRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.UpdateAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.UpdateAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.UpdateAccountRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getAccountname();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getPushToken();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.user.UpdateAccountRequest.prototype.getAccountId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UpdateAccountRequest} returns this
 */
proto.user.UpdateAccountRequest.prototype.setAccountId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string accountName = 2;
 * @return {string}
 */
proto.user.UpdateAccountRequest.prototype.getAccountname = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UpdateAccountRequest} returns this
 */
proto.user.UpdateAccountRequest.prototype.setAccountname = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string nickname = 3;
 * @return {string}
 */
proto.user.UpdateAccountRequest.prototype.getNickname = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UpdateAccountRequest} returns this
 */
proto.user.UpdateAccountRequest.prototype.setNickname = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string push_token = 4;
 * @return {string}
 */
proto.user.UpdateAccountRequest.prototype.getPushToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UpdateAccountRequest} returns this
 */
proto.user.UpdateAccountRequest.prototype.setPushToken = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.AccountStateRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.AccountStateRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.AccountStateRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.AccountStateRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        accountId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        datetime: jspb.Message.getFieldWithDefault(msg, 2, ''),
        state: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
        reasontype: jspb.Message.getFieldWithDefault(msg, 4, 0),
        reasontext: jspb.Message.getFieldWithDefault(msg, 5, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.AccountStateRequest}
 */
proto.user.AccountStateRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.AccountStateRequest();
  return proto.user.AccountStateRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.AccountStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.AccountStateRequest}
 */
proto.user.AccountStateRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccountId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setDatetime(value);
        break;
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setState(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setReasontype(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setReasontext(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.AccountStateRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.AccountStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.AccountStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.AccountStateRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getDatetime();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getState();
  if (f) {
    writer.writeBool(3, f);
  }
  f = message.getReasontype();
  if (f !== 0) {
    writer.writeInt32(4, f);
  }
  f = message.getReasontext();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional string account_id = 1;
 * @return {string}
 */
proto.user.AccountStateRequest.prototype.getAccountId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.AccountStateRequest} returns this
 */
proto.user.AccountStateRequest.prototype.setAccountId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string datetime = 2;
 * @return {string}
 */
proto.user.AccountStateRequest.prototype.getDatetime = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.AccountStateRequest} returns this
 */
proto.user.AccountStateRequest.prototype.setDatetime = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional bool state = 3;
 * @return {boolean}
 */
proto.user.AccountStateRequest.prototype.getState = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 3, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.AccountStateRequest} returns this
 */
proto.user.AccountStateRequest.prototype.setState = function (value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};

/**
 * optional int32 reasonType = 4;
 * @return {number}
 */
proto.user.AccountStateRequest.prototype.getReasontype = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.user.AccountStateRequest} returns this
 */
proto.user.AccountStateRequest.prototype.setReasontype = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional string reasonText = 5;
 * @return {string}
 */
proto.user.AccountStateRequest.prototype.getReasontext = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.AccountStateRequest} returns this
 */
proto.user.AccountStateRequest.prototype.setReasontext = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

goog.object.extend(exports, proto.user);
