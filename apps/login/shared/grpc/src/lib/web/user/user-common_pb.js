// source: user-common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

goog.exportSymbol('proto.user.Account', null, global);
goog.exportSymbol('proto.user.AccountType', null, global);
goog.exportSymbol('proto.user.DefaultResponse', null, global);
goog.exportSymbol('proto.user.DeviceInfo', null, global);
goog.exportSymbol('proto.user.User', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.User = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.User.displayName = 'proto.user.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.Account = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.Account.displayName = 'proto.user.Account';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.DeviceInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.DeviceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.DeviceInfo.displayName = 'proto.user.DeviceInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.DefaultResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.DefaultResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.DefaultResponse.displayName = 'proto.user.DefaultResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.User.prototype.toObject = function (opt_includeInstance) {
    return proto.user.User.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.User} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.User.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        reVerifyAt: jspb.Message.getFieldWithDefault(msg, 2, ''),
        gamePauseAt: jspb.Message.getFieldWithDefault(msg, 3, ''),
        lossLimit: jspb.Message.getFieldWithDefault(msg, 4, ''),
        withdrawal: jspb.Message.getFieldWithDefault(msg, 5, ''),
        pause: jspb.Message.getFieldWithDefault(msg, 6, ''),
        disable: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
        dormant: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
        isPublic: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
        isActive: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
        createdAt: jspb.Message.getFieldWithDefault(msg, 11, ''),
        updatedAt: jspb.Message.getFieldWithDefault(msg, 12, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.User}
 */
proto.user.User.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.User();
  return proto.user.User.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.User}
 */
proto.user.User.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setReVerifyAt(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setGamePauseAt(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setLossLimit(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setWithdrawal(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setPause(value);
        break;
      case 7:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setDisable(value);
        break;
      case 8:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setDormant(value);
        break;
      case 9:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsPublic(value);
        break;
      case 10:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsActive(value);
        break;
      case 11:
        var value = /** @type {string} */ (reader.readString());
        msg.setCreatedAt(value);
        break;
      case 12:
        var value = /** @type {string} */ (reader.readString());
        msg.setUpdatedAt(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.User.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.User.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getReVerifyAt();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getGamePauseAt();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getLossLimit();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getWithdrawal();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getPause();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getDisable();
  if (f) {
    writer.writeBool(7, f);
  }
  f = message.getDormant();
  if (f) {
    writer.writeBool(8, f);
  }
  f = message.getIsPublic();
  if (f) {
    writer.writeBool(9, f);
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(10, f);
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(11, f);
  }
  f = message.getUpdatedAt();
  if (f.length > 0) {
    writer.writeString(12, f);
  }
};

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.user.User.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string re_verify_at = 2;
 * @return {string}
 */
proto.user.User.prototype.getReVerifyAt = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setReVerifyAt = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string game_pause_at = 3;
 * @return {string}
 */
proto.user.User.prototype.getGamePauseAt = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setGamePauseAt = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string loss_limit = 4;
 * @return {string}
 */
proto.user.User.prototype.getLossLimit = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setLossLimit = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string withdrawal = 5;
 * @return {string}
 */
proto.user.User.prototype.getWithdrawal = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setWithdrawal = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string pause = 6;
 * @return {string}
 */
proto.user.User.prototype.getPause = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setPause = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional bool disable = 7;
 * @return {boolean}
 */
proto.user.User.prototype.getDisable = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 7, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setDisable = function (value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};

/**
 * optional bool dormant = 8;
 * @return {boolean}
 */
proto.user.User.prototype.getDormant = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 8, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setDormant = function (value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};

/**
 * optional bool is_public = 9;
 * @return {boolean}
 */
proto.user.User.prototype.getIsPublic = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 9, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setIsPublic = function (value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};

/**
 * optional bool is_active = 10;
 * @return {boolean}
 */
proto.user.User.prototype.getIsActive = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 10, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setIsActive = function (value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};

/**
 * optional string created_at = 11;
 * @return {string}
 */
proto.user.User.prototype.getCreatedAt = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};

/**
 * optional string updated_at = 12;
 * @return {string}
 */
proto.user.User.prototype.getUpdatedAt = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.User} returns this
 */
proto.user.User.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.Account.prototype.toObject = function (opt_includeInstance) {
    return proto.user.Account.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.Account} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.Account.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        accountId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        firebaseUid: jspb.Message.getFieldWithDefault(msg, 3, ''),
        accountType: jspb.Message.getFieldWithDefault(msg, 4, 0),
        accountName: jspb.Message.getFieldWithDefault(msg, 5, ''),
        nickname: jspb.Message.getFieldWithDefault(msg, 6, ''),
        withdrawal: jspb.Message.getFieldWithDefault(msg, 7, ''),
        pause: jspb.Message.getFieldWithDefault(msg, 8, ''),
        disable: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
        dormant: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
        isPublic: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
        isActive: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
        createdAt: jspb.Message.getFieldWithDefault(msg, 13, ''),
        updatedAt: jspb.Message.getFieldWithDefault(msg, 14, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.Account}
 */
proto.user.Account.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.Account();
  return proto.user.Account.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.Account}
 */
proto.user.Account.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccountId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setFirebaseUid(value);
        break;
      case 4:
        var value = /** @type {!proto.user.AccountType} */ (reader.readEnum());
        msg.setAccountType(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccountName(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setNickname(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setWithdrawal(value);
        break;
      case 8:
        var value = /** @type {string} */ (reader.readString());
        msg.setPause(value);
        break;
      case 9:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setDisable(value);
        break;
      case 10:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setDormant(value);
        break;
      case 11:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsPublic(value);
        break;
      case 12:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsActive(value);
        break;
      case 13:
        var value = /** @type {string} */ (reader.readString());
        msg.setCreatedAt(value);
        break;
      case 14:
        var value = /** @type {string} */ (reader.readString());
        msg.setUpdatedAt(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.Account.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.Account.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.Account} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.Account.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getFirebaseUid();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getAccountType();
  if (f !== 0.0) {
    writer.writeEnum(4, f);
  }
  f = message.getAccountName();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getWithdrawal();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
  f = message.getPause();
  if (f.length > 0) {
    writer.writeString(8, f);
  }
  f = message.getDisable();
  if (f) {
    writer.writeBool(9, f);
  }
  f = message.getDormant();
  if (f) {
    writer.writeBool(10, f);
  }
  f = message.getIsPublic();
  if (f) {
    writer.writeBool(11, f);
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(12, f);
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(13, f);
  }
  f = message.getUpdatedAt();
  if (f.length > 0) {
    writer.writeString(14, f);
  }
};

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.user.Account.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.Account} returns this
 */
proto.user.Account.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string account_id = 2;
 * @return {string}
 */
proto.user.Account.prototype.getAccountId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.Account} returns this
 */
proto.user.Account.prototype.setAccountId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string firebase_uid = 3;
 * @return {string}
 */
proto.user.Account.prototype.getFirebaseUid = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.Account} returns this
 */
proto.user.Account.prototype.setFirebaseUid = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional AccountType account_type = 4;
 * @return {!proto.user.AccountType}
 */
proto.user.Account.prototype.getAccountType = function () {
  return /** @type {!proto.user.AccountType} */ (
    jspb.Message.getFieldWithDefault(this, 4, 0)
  );
};

/**
 * @param {!proto.user.AccountType} value
 * @return {!proto.user.Account} returns this
 */
proto.user.Account.prototype.setAccountType = function (value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};

/**
 * optional string account_name = 5;
 * @return {string}
 */
proto.user.Account.prototype.getAccountName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.Account} returns this
 */
proto.user.Account.prototype.setAccountName = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string nickname = 6;
 * @return {string}
 */
proto.user.Account.prototype.getNickname = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.Account} returns this
 */
proto.user.Account.prototype.setNickname = function (value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional string withdrawal = 7;
 * @return {string}
 */
proto.user.Account.prototype.getWithdrawal = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.Account} returns this
 */
proto.user.Account.prototype.setWithdrawal = function (value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};

/**
 * optional string pause = 8;
 * @return {string}
 */
proto.user.Account.prototype.getPause = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.Account} returns this
 */
proto.user.Account.prototype.setPause = function (value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};

/**
 * optional bool disable = 9;
 * @return {boolean}
 */
proto.user.Account.prototype.getDisable = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 9, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.Account} returns this
 */
proto.user.Account.prototype.setDisable = function (value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};

/**
 * optional bool dormant = 10;
 * @return {boolean}
 */
proto.user.Account.prototype.getDormant = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 10, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.Account} returns this
 */
proto.user.Account.prototype.setDormant = function (value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};

/**
 * optional bool is_public = 11;
 * @return {boolean}
 */
proto.user.Account.prototype.getIsPublic = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 11, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.Account} returns this
 */
proto.user.Account.prototype.setIsPublic = function (value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};

/**
 * optional bool is_active = 12;
 * @return {boolean}
 */
proto.user.Account.prototype.getIsActive = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 12, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.Account} returns this
 */
proto.user.Account.prototype.setIsActive = function (value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};

/**
 * optional string created_at = 13;
 * @return {string}
 */
proto.user.Account.prototype.getCreatedAt = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.Account} returns this
 */
proto.user.Account.prototype.setCreatedAt = function (value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};

/**
 * optional string updated_at = 14;
 * @return {string}
 */
proto.user.Account.prototype.getUpdatedAt = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.Account} returns this
 */
proto.user.Account.prototype.setUpdatedAt = function (value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.DeviceInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.user.DeviceInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.DeviceInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.DeviceInfo.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        deviceId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        deviceModel: jspb.Message.getFieldWithDefault(msg, 2, ''),
        deviceOs: jspb.Message.getFieldWithDefault(msg, 3, ''),
        versionCode: jspb.Message.getFieldWithDefault(msg, 4, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.DeviceInfo}
 */
proto.user.DeviceInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.DeviceInfo();
  return proto.user.DeviceInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.DeviceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.DeviceInfo}
 */
proto.user.DeviceInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setDeviceId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setDeviceModel(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setDeviceOs(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setVersionCode(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.DeviceInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.DeviceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.DeviceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.DeviceInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getDeviceModel();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getDeviceOs();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getVersionCode();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional string device_id = 1;
 * @return {string}
 */
proto.user.DeviceInfo.prototype.getDeviceId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.DeviceInfo} returns this
 */
proto.user.DeviceInfo.prototype.setDeviceId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string device_model = 2;
 * @return {string}
 */
proto.user.DeviceInfo.prototype.getDeviceModel = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.DeviceInfo} returns this
 */
proto.user.DeviceInfo.prototype.setDeviceModel = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string device_os = 3;
 * @return {string}
 */
proto.user.DeviceInfo.prototype.getDeviceOs = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.DeviceInfo} returns this
 */
proto.user.DeviceInfo.prototype.setDeviceOs = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string version_code = 4;
 * @return {string}
 */
proto.user.DeviceInfo.prototype.getVersionCode = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.DeviceInfo} returns this
 */
proto.user.DeviceInfo.prototype.setVersionCode = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.DefaultResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.DefaultResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.DefaultResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.DefaultResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.DefaultResponse}
 */
proto.user.DefaultResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.DefaultResponse();
  return proto.user.DefaultResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.DefaultResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.DefaultResponse}
 */
proto.user.DefaultResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.DefaultResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.DefaultResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.DefaultResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.DefaultResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.user.DefaultResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.DefaultResponse} returns this
 */
proto.user.DefaultResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.user.DefaultResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.DefaultResponse} returns this
 */
proto.user.DefaultResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * @enum {number}
 */
proto.user.AccountType = {
  NONE: 0,
  ID: 1,
  GOOGLE: 2,
  APPLE: 3,
  NAVER: 4,
  KAKAO: 5,
  TEST: 99,
};

goog.object.extend(exports, proto.user);
