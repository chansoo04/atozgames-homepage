/**
 * @fileoverview gRPC-Web generated client stub for user
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: user.proto

/* eslint-disable */
// @ts-nocheck

const grpc = {};
grpc.web = require('grpc-web');

var user$common_pb = require('./user-common_pb.js');
const proto = {};
proto.user = require('./user_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.user.UserServiceClient = function (hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.user.UserServicePromiseClient = function (
  hostname,
  credentials,
  options,
) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.IsExistUserRequest,
 *   !proto.user.IsExistUserResponse>}
 */
const methodDescriptor_UserService_IsExistUser = new grpc.web.MethodDescriptor(
  '/user.UserService/IsExistUser',
  grpc.web.MethodType.UNARY,
  proto.user.IsExistUserRequest,
  proto.user.IsExistUserResponse,
  /**
   * @param {!proto.user.IsExistUserRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.user.IsExistUserResponse.deserializeBinary,
);

/**
 * @param {!proto.user.IsExistUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.IsExistUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.IsExistUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.isExistUser = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.UserService/IsExistUser',
    request,
    metadata || {},
    methodDescriptor_UserService_IsExistUser,
    callback,
  );
};

/**
 * @param {!proto.user.IsExistUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.IsExistUserResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.isExistUser = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.UserService/IsExistUser',
    request,
    metadata || {},
    methodDescriptor_UserService_IsExistUser,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.GetUserRequest,
 *   !proto.user.GetUserResponse>}
 */
const methodDescriptor_UserService_GetUser = new grpc.web.MethodDescriptor(
  '/user.UserService/GetUser',
  grpc.web.MethodType.UNARY,
  proto.user.GetUserRequest,
  proto.user.GetUserResponse,
  /**
   * @param {!proto.user.GetUserRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.user.GetUserResponse.deserializeBinary,
);

/**
 * @param {!proto.user.GetUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.GetUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.GetUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.getUser = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.UserService/GetUser',
    request,
    metadata || {},
    methodDescriptor_UserService_GetUser,
    callback,
  );
};

/**
 * @param {!proto.user.GetUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.GetUserResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.getUser = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.UserService/GetUser',
    request,
    metadata || {},
    methodDescriptor_UserService_GetUser,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.VerifyUserRequest,
 *   !proto.user.CreateUserResponse>}
 */
const methodDescriptor_UserService_CreateUser = new grpc.web.MethodDescriptor(
  '/user.UserService/CreateUser',
  grpc.web.MethodType.UNARY,
  proto.user.VerifyUserRequest,
  proto.user.CreateUserResponse,
  /**
   * @param {!proto.user.VerifyUserRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.user.CreateUserResponse.deserializeBinary,
);

/**
 * @param {!proto.user.VerifyUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.CreateUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.CreateUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.createUser = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.UserService/CreateUser',
    request,
    metadata || {},
    methodDescriptor_UserService_CreateUser,
    callback,
  );
};

/**
 * @param {!proto.user.VerifyUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.CreateUserResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.createUser = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.UserService/CreateUser',
    request,
    metadata || {},
    methodDescriptor_UserService_CreateUser,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.VerifyUserRequest,
 *   !proto.user.TokenResponse>}
 */
const methodDescriptor_UserService_RefreshVerification =
  new grpc.web.MethodDescriptor(
    '/user.UserService/RefreshVerification',
    grpc.web.MethodType.UNARY,
    proto.user.VerifyUserRequest,
    proto.user.TokenResponse,
    /**
     * @param {!proto.user.VerifyUserRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.user.TokenResponse.deserializeBinary,
  );

/**
 * @param {!proto.user.VerifyUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.TokenResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.TokenResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.refreshVerification = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.UserService/RefreshVerification',
    request,
    metadata || {},
    methodDescriptor_UserService_RefreshVerification,
    callback,
  );
};

/**
 * @param {!proto.user.VerifyUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.TokenResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.refreshVerification = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.UserService/RefreshVerification',
    request,
    metadata || {},
    methodDescriptor_UserService_RefreshVerification,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserInfoRequest,
 *   !proto.user.DefaultResponse>}
 */
const methodDescriptor_UserService_UpdateUser = new grpc.web.MethodDescriptor(
  '/user.UserService/UpdateUser',
  grpc.web.MethodType.UNARY,
  proto.user.UserInfoRequest,
  user$common_pb.DefaultResponse,
  /**
   * @param {!proto.user.UserInfoRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  user$common_pb.DefaultResponse.deserializeBinary,
);

/**
 * @param {!proto.user.UserInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.DefaultResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.DefaultResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.updateUser = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.UserService/UpdateUser',
    request,
    metadata || {},
    methodDescriptor_UserService_UpdateUser,
    callback,
  );
};

/**
 * @param {!proto.user.UserInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.DefaultResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.updateUser = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.UserService/UpdateUser',
    request,
    metadata || {},
    methodDescriptor_UserService_UpdateUser,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.TokenRequest,
 *   !proto.user.GetAllAccontResponse>}
 */
const methodDescriptor_UserService_GetAllAccount =
  new grpc.web.MethodDescriptor(
    '/user.UserService/GetAllAccount',
    grpc.web.MethodType.UNARY,
    proto.user.TokenRequest,
    proto.user.GetAllAccontResponse,
    /**
     * @param {!proto.user.TokenRequest} request
     * @return {!Uint8Array}
     */
    function (request) {
      return request.serializeBinary();
    },
    proto.user.GetAllAccontResponse.deserializeBinary,
  );

/**
 * @param {!proto.user.TokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.GetAllAccontResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.GetAllAccontResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.getAllAccount = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.UserService/GetAllAccount',
    request,
    metadata || {},
    methodDescriptor_UserService_GetAllAccount,
    callback,
  );
};

/**
 * @param {!proto.user.TokenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.GetAllAccontResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.getAllAccount = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.UserService/GetAllAccount',
    request,
    metadata || {},
    methodDescriptor_UserService_GetAllAccount,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserStateRequest,
 *   !proto.user.DefaultResponse>}
 */
const methodDescriptor_UserService_Withdrawal = new grpc.web.MethodDescriptor(
  '/user.UserService/Withdrawal',
  grpc.web.MethodType.UNARY,
  proto.user.UserStateRequest,
  user$common_pb.DefaultResponse,
  /**
   * @param {!proto.user.UserStateRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  user$common_pb.DefaultResponse.deserializeBinary,
);

/**
 * @param {!proto.user.UserStateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.DefaultResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.DefaultResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.withdrawal = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.UserService/Withdrawal',
    request,
    metadata || {},
    methodDescriptor_UserService_Withdrawal,
    callback,
  );
};

/**
 * @param {!proto.user.UserStateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.DefaultResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.withdrawal = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.UserService/Withdrawal',
    request,
    metadata || {},
    methodDescriptor_UserService_Withdrawal,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserStateRequest,
 *   !proto.user.DefaultResponse>}
 */
const methodDescriptor_UserService_Dormant = new grpc.web.MethodDescriptor(
  '/user.UserService/Dormant',
  grpc.web.MethodType.UNARY,
  proto.user.UserStateRequest,
  user$common_pb.DefaultResponse,
  /**
   * @param {!proto.user.UserStateRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  user$common_pb.DefaultResponse.deserializeBinary,
);

/**
 * @param {!proto.user.UserStateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.DefaultResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.DefaultResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.dormant = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.UserService/Dormant',
    request,
    metadata || {},
    methodDescriptor_UserService_Dormant,
    callback,
  );
};

/**
 * @param {!proto.user.UserStateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.DefaultResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.dormant = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.UserService/Dormant',
    request,
    metadata || {},
    methodDescriptor_UserService_Dormant,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserStateRequest,
 *   !proto.user.DefaultResponse>}
 */
const methodDescriptor_UserService_Disable = new grpc.web.MethodDescriptor(
  '/user.UserService/Disable',
  grpc.web.MethodType.UNARY,
  proto.user.UserStateRequest,
  user$common_pb.DefaultResponse,
  /**
   * @param {!proto.user.UserStateRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  user$common_pb.DefaultResponse.deserializeBinary,
);

/**
 * @param {!proto.user.UserStateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.DefaultResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.DefaultResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.disable = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.UserService/Disable',
    request,
    metadata || {},
    methodDescriptor_UserService_Disable,
    callback,
  );
};

/**
 * @param {!proto.user.UserStateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.DefaultResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.disable = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.UserService/Disable',
    request,
    metadata || {},
    methodDescriptor_UserService_Disable,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserStateRequest,
 *   !proto.user.DefaultResponse>}
 */
const methodDescriptor_UserService_GamePause = new grpc.web.MethodDescriptor(
  '/user.UserService/GamePause',
  grpc.web.MethodType.UNARY,
  proto.user.UserStateRequest,
  user$common_pb.DefaultResponse,
  /**
   * @param {!proto.user.UserStateRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  user$common_pb.DefaultResponse.deserializeBinary,
);

/**
 * @param {!proto.user.UserStateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.DefaultResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.DefaultResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.gamePause = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.UserService/GamePause',
    request,
    metadata || {},
    methodDescriptor_UserService_GamePause,
    callback,
  );
};

/**
 * @param {!proto.user.UserStateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.DefaultResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.gamePause = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.UserService/GamePause',
    request,
    metadata || {},
    methodDescriptor_UserService_GamePause,
  );
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.SetLossLimitRequest,
 *   !proto.user.DefaultResponse>}
 */
const methodDescriptor_UserService_SetLossLimit = new grpc.web.MethodDescriptor(
  '/user.UserService/SetLossLimit',
  grpc.web.MethodType.UNARY,
  proto.user.SetLossLimitRequest,
  user$common_pb.DefaultResponse,
  /**
   * @param {!proto.user.SetLossLimitRequest} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  user$common_pb.DefaultResponse.deserializeBinary,
);

/**
 * @param {!proto.user.SetLossLimitRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.DefaultResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.DefaultResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.setLossLimit = function (
  request,
  metadata,
  callback,
) {
  return this.client_.rpcCall(
    this.hostname_ + '/user.UserService/SetLossLimit',
    request,
    metadata || {},
    methodDescriptor_UserService_SetLossLimit,
    callback,
  );
};

/**
 * @param {!proto.user.SetLossLimitRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.DefaultResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.setLossLimit = function (
  request,
  metadata,
) {
  return this.client_.unaryCall(
    this.hostname_ + '/user.UserService/SetLossLimit',
    request,
    metadata || {},
    methodDescriptor_UserService_SetLossLimit,
  );
};

module.exports = proto.user;
