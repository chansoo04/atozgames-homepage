// source: user.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof window !== 'undefined' && window) ||
  (typeof global !== 'undefined' && global) ||
  (typeof self !== 'undefined' && self) ||
  function () {
    return this;
  }.call(null) ||
  Function('return this')();

var user$common_pb = require('./user-common_pb.js');
goog.object.extend(proto, user$common_pb);
goog.exportSymbol('proto.user.CreateUserResponse', null, global);
goog.exportSymbol('proto.user.GetAllAccontResponse', null, global);
goog.exportSymbol('proto.user.GetUserRequest', null, global);
goog.exportSymbol('proto.user.GetUserResponse', null, global);
goog.exportSymbol('proto.user.IsExistUserRequest', null, global);
goog.exportSymbol('proto.user.IsExistUserResponse', null, global);
goog.exportSymbol('proto.user.SetLossLimitRequest', null, global);
goog.exportSymbol('proto.user.TokenRequest', null, global);
goog.exportSymbol('proto.user.TokenResponse', null, global);
goog.exportSymbol('proto.user.UserIdParam', null, global);
goog.exportSymbol('proto.user.UserInfoRequest', null, global);
goog.exportSymbol('proto.user.UserStateRequest', null, global);
goog.exportSymbol('proto.user.VerifyUserRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.TokenRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.TokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.TokenRequest.displayName = 'proto.user.TokenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.TokenResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.TokenResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.TokenResponse.displayName = 'proto.user.TokenResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.UserIdParam = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.UserIdParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.UserIdParam.displayName = 'proto.user.UserIdParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.IsExistUserRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.IsExistUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.IsExistUserRequest.displayName = 'proto.user.IsExistUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.IsExistUserResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.IsExistUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.IsExistUserResponse.displayName = 'proto.user.IsExistUserResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.GetUserRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.GetUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.GetUserRequest.displayName = 'proto.user.GetUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.GetUserResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.GetUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.GetUserResponse.displayName = 'proto.user.GetUserResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.UserInfoRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.UserInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.UserInfoRequest.displayName = 'proto.user.UserInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.GetAllAccontResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.user.GetAllAccontResponse.repeatedFields_,
    null,
  );
};
goog.inherits(proto.user.GetAllAccontResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.GetAllAccontResponse.displayName =
    'proto.user.GetAllAccontResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.VerifyUserRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.VerifyUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.VerifyUserRequest.displayName = 'proto.user.VerifyUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.CreateUserResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.CreateUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.CreateUserResponse.displayName = 'proto.user.CreateUserResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.SetLossLimitRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.SetLossLimitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.SetLossLimitRequest.displayName = 'proto.user.SetLossLimitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.user.UserStateRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.user.UserStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.user.UserStateRequest.displayName = 'proto.user.UserStateRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.TokenRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.user.TokenRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.TokenRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.TokenRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        token: jspb.Message.getFieldWithDefault(msg, 1, ''),
        userId: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.TokenRequest}
 */
proto.user.TokenRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.TokenRequest();
  return proto.user.TokenRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.TokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.TokenRequest}
 */
proto.user.TokenRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.TokenRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.TokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.TokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.TokenRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string token = 1;
 * @return {string}
 */
proto.user.TokenRequest.prototype.getToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.TokenRequest} returns this
 */
proto.user.TokenRequest.prototype.setToken = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.user.TokenRequest.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.TokenRequest} returns this
 */
proto.user.TokenRequest.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.TokenResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.user.TokenResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.TokenResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.TokenResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        token: jspb.Message.getFieldWithDefault(msg, 3, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.TokenResponse}
 */
proto.user.TokenResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.TokenResponse();
  return proto.user.TokenResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.TokenResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.TokenResponse}
 */
proto.user.TokenResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.TokenResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.TokenResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.TokenResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.TokenResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.user.TokenResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.TokenResponse} returns this
 */
proto.user.TokenResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.user.TokenResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.TokenResponse} returns this
 */
proto.user.TokenResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string token = 3;
 * @return {string}
 */
proto.user.TokenResponse.prototype.getToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.TokenResponse} returns this
 */
proto.user.TokenResponse.prototype.setToken = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.UserIdParam.prototype.toObject = function (opt_includeInstance) {
    return proto.user.UserIdParam.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.UserIdParam} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.UserIdParam.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.UserIdParam}
 */
proto.user.UserIdParam.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.UserIdParam();
  return proto.user.UserIdParam.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.UserIdParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.UserIdParam}
 */
proto.user.UserIdParam.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.UserIdParam.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.UserIdParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.UserIdParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.UserIdParam.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.user.UserIdParam.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UserIdParam} returns this
 */
proto.user.UserIdParam.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.IsExistUserRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.IsExistUserRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.IsExistUserRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.IsExistUserRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        name: jspb.Message.getFieldWithDefault(msg, 2, ''),
        telCode: jspb.Message.getFieldWithDefault(msg, 3, 0),
        tel: jspb.Message.getFieldWithDefault(msg, 4, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.IsExistUserRequest}
 */
proto.user.IsExistUserRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.IsExistUserRequest();
  return proto.user.IsExistUserRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.IsExistUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.IsExistUserRequest}
 */
proto.user.IsExistUserRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setTelCode(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setTel(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.IsExistUserRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.IsExistUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.IsExistUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.IsExistUserRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getTelCode();
  if (f !== 0) {
    writer.writeInt32(3, f);
  }
  f = message.getTel();
  if (f !== 0) {
    writer.writeInt64(4, f);
  }
};

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.user.IsExistUserRequest.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.IsExistUserRequest} returns this
 */
proto.user.IsExistUserRequest.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string name = 2;
 * @return {string}
 */
proto.user.IsExistUserRequest.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.IsExistUserRequest} returns this
 */
proto.user.IsExistUserRequest.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional int32 tel_code = 3;
 * @return {number}
 */
proto.user.IsExistUserRequest.prototype.getTelCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.user.IsExistUserRequest} returns this
 */
proto.user.IsExistUserRequest.prototype.setTelCode = function (value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional int64 tel = 4;
 * @return {number}
 */
proto.user.IsExistUserRequest.prototype.getTel = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.user.IsExistUserRequest} returns this
 */
proto.user.IsExistUserRequest.prototype.setTel = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.IsExistUserResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.IsExistUserResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.IsExistUserResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.IsExistUserResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        isExist: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
        userId: jspb.Message.getFieldWithDefault(msg, 4, ''),
        isActive: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
        isPublic: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
        isDormant: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
        isDisable: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
        isWithdrawal: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
        isPause: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
        isGamePause: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.IsExistUserResponse}
 */
proto.user.IsExistUserResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.IsExistUserResponse();
  return proto.user.IsExistUserResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.IsExistUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.IsExistUserResponse}
 */
proto.user.IsExistUserResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsExist(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserId(value);
        break;
      case 5:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsActive(value);
        break;
      case 6:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsPublic(value);
        break;
      case 7:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsDormant(value);
        break;
      case 8:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsDisable(value);
        break;
      case 9:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsWithdrawal(value);
        break;
      case 10:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsPause(value);
        break;
      case 11:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setIsGamePause(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.IsExistUserResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.IsExistUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.IsExistUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.IsExistUserResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getIsExist();
  if (f) {
    writer.writeBool(3, f);
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(5, f);
  }
  f = message.getIsPublic();
  if (f) {
    writer.writeBool(6, f);
  }
  f = message.getIsDormant();
  if (f) {
    writer.writeBool(7, f);
  }
  f = message.getIsDisable();
  if (f) {
    writer.writeBool(8, f);
  }
  f = message.getIsWithdrawal();
  if (f) {
    writer.writeBool(9, f);
  }
  f = message.getIsPause();
  if (f) {
    writer.writeBool(10, f);
  }
  f = message.getIsGamePause();
  if (f) {
    writer.writeBool(11, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.user.IsExistUserResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.IsExistUserResponse} returns this
 */
proto.user.IsExistUserResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.user.IsExistUserResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.IsExistUserResponse} returns this
 */
proto.user.IsExistUserResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional bool is_exist = 3;
 * @return {boolean}
 */
proto.user.IsExistUserResponse.prototype.getIsExist = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 3, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.IsExistUserResponse} returns this
 */
proto.user.IsExistUserResponse.prototype.setIsExist = function (value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};

/**
 * optional string user_id = 4;
 * @return {string}
 */
proto.user.IsExistUserResponse.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.IsExistUserResponse} returns this
 */
proto.user.IsExistUserResponse.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional bool is_active = 5;
 * @return {boolean}
 */
proto.user.IsExistUserResponse.prototype.getIsActive = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 5, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.IsExistUserResponse} returns this
 */
proto.user.IsExistUserResponse.prototype.setIsActive = function (value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};

/**
 * optional bool is_public = 6;
 * @return {boolean}
 */
proto.user.IsExistUserResponse.prototype.getIsPublic = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 6, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.IsExistUserResponse} returns this
 */
proto.user.IsExistUserResponse.prototype.setIsPublic = function (value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};

/**
 * optional bool is_dormant = 7;
 * @return {boolean}
 */
proto.user.IsExistUserResponse.prototype.getIsDormant = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 7, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.IsExistUserResponse} returns this
 */
proto.user.IsExistUserResponse.prototype.setIsDormant = function (value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};

/**
 * optional bool is_disable = 8;
 * @return {boolean}
 */
proto.user.IsExistUserResponse.prototype.getIsDisable = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 8, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.IsExistUserResponse} returns this
 */
proto.user.IsExistUserResponse.prototype.setIsDisable = function (value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};

/**
 * optional bool is_withdrawal = 9;
 * @return {boolean}
 */
proto.user.IsExistUserResponse.prototype.getIsWithdrawal = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 9, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.IsExistUserResponse} returns this
 */
proto.user.IsExistUserResponse.prototype.setIsWithdrawal = function (value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};

/**
 * optional bool is_pause = 10;
 * @return {boolean}
 */
proto.user.IsExistUserResponse.prototype.getIsPause = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 10, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.IsExistUserResponse} returns this
 */
proto.user.IsExistUserResponse.prototype.setIsPause = function (value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};

/**
 * optional bool is_game_pause = 11;
 * @return {boolean}
 */
proto.user.IsExistUserResponse.prototype.getIsGamePause = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 11, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.IsExistUserResponse} returns this
 */
proto.user.IsExistUserResponse.prototype.setIsGamePause = function (value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.GetUserRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.GetUserRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.GetUserRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.GetUserRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        accountId: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.GetUserRequest}
 */
proto.user.GetUserRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.GetUserRequest();
  return proto.user.GetUserRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.GetUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.GetUserRequest}
 */
proto.user.GetUserRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setAccountId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.GetUserRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.GetUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.GetUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.GetUserRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.user.GetUserRequest.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.GetUserRequest} returns this
 */
proto.user.GetUserRequest.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string account_id = 2;
 * @return {string}
 */
proto.user.GetUserRequest.prototype.getAccountId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.GetUserRequest} returns this
 */
proto.user.GetUserRequest.prototype.setAccountId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.GetUserResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.GetUserResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.GetUserResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.GetUserResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        user:
          (f = msg.getUser()) &&
          user$common_pb.User.toObject(includeInstance, f),
        accountCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.GetUserResponse}
 */
proto.user.GetUserResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.GetUserResponse();
  return proto.user.GetUserResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.GetUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.GetUserResponse}
 */
proto.user.GetUserResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = new user$common_pb.User();
        reader.readMessage(
          value,
          user$common_pb.User.deserializeBinaryFromReader,
        );
        msg.setUser(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setAccountCount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.GetUserResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.GetUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.GetUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.GetUserResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(3, f, user$common_pb.User.serializeBinaryToWriter);
  }
  f = message.getAccountCount();
  if (f !== 0) {
    writer.writeInt32(4, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.user.GetUserResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.GetUserResponse} returns this
 */
proto.user.GetUserResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.user.GetUserResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.GetUserResponse} returns this
 */
proto.user.GetUserResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional User user = 3;
 * @return {?proto.user.User}
 */
proto.user.GetUserResponse.prototype.getUser = function () {
  return /** @type{?proto.user.User} */ (
    jspb.Message.getWrapperField(this, user$common_pb.User, 3)
  );
};

/**
 * @param {?proto.user.User|undefined} value
 * @return {!proto.user.GetUserResponse} returns this
 */
proto.user.GetUserResponse.prototype.setUser = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.user.GetUserResponse} returns this
 */
proto.user.GetUserResponse.prototype.clearUser = function () {
  return this.setUser(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.user.GetUserResponse.prototype.hasUser = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional int32 account_count = 4;
 * @return {number}
 */
proto.user.GetUserResponse.prototype.getAccountCount = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.user.GetUserResponse} returns this
 */
proto.user.GetUserResponse.prototype.setAccountCount = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.UserInfoRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.UserInfoRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.UserInfoRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.UserInfoRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        token: jspb.Message.getFieldWithDefault(msg, 1, ''),
        userId: jspb.Message.getFieldWithDefault(msg, 2, ''),
        name: jspb.Message.getFieldWithDefault(msg, 3, ''),
        telCode: jspb.Message.getFieldWithDefault(msg, 4, 0),
        tel: jspb.Message.getFieldWithDefault(msg, 5, 0),
        deviceInfo:
          (f = msg.getDeviceInfo()) &&
          user$common_pb.DeviceInfo.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.UserInfoRequest}
 */
proto.user.UserInfoRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.UserInfoRequest();
  return proto.user.UserInfoRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.UserInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.UserInfoRequest}
 */
proto.user.UserInfoRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserId(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setName(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setTelCode(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setTel(value);
        break;
      case 6:
        var value = new user$common_pb.DeviceInfo();
        reader.readMessage(
          value,
          user$common_pb.DeviceInfo.deserializeBinaryFromReader,
        );
        msg.setDeviceInfo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.UserInfoRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.UserInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.UserInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.UserInfoRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getTelCode();
  if (f !== 0) {
    writer.writeInt32(4, f);
  }
  f = message.getTel();
  if (f !== 0) {
    writer.writeInt64(5, f);
  }
  f = message.getDeviceInfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      user$common_pb.DeviceInfo.serializeBinaryToWriter,
    );
  }
};

/**
 * optional string token = 1;
 * @return {string}
 */
proto.user.UserInfoRequest.prototype.getToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UserInfoRequest} returns this
 */
proto.user.UserInfoRequest.prototype.setToken = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.user.UserInfoRequest.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UserInfoRequest} returns this
 */
proto.user.UserInfoRequest.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string name = 3;
 * @return {string}
 */
proto.user.UserInfoRequest.prototype.getName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UserInfoRequest} returns this
 */
proto.user.UserInfoRequest.prototype.setName = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional int32 tel_code = 4;
 * @return {number}
 */
proto.user.UserInfoRequest.prototype.getTelCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.user.UserInfoRequest} returns this
 */
proto.user.UserInfoRequest.prototype.setTelCode = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional int64 tel = 5;
 * @return {number}
 */
proto.user.UserInfoRequest.prototype.getTel = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/**
 * @param {number} value
 * @return {!proto.user.UserInfoRequest} returns this
 */
proto.user.UserInfoRequest.prototype.setTel = function (value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional DeviceInfo device_info = 6;
 * @return {?proto.user.DeviceInfo}
 */
proto.user.UserInfoRequest.prototype.getDeviceInfo = function () {
  return /** @type{?proto.user.DeviceInfo} */ (
    jspb.Message.getWrapperField(this, user$common_pb.DeviceInfo, 6)
  );
};

/**
 * @param {?proto.user.DeviceInfo|undefined} value
 * @return {!proto.user.UserInfoRequest} returns this
 */
proto.user.UserInfoRequest.prototype.setDeviceInfo = function (value) {
  return jspb.Message.setWrapperField(this, 6, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.user.UserInfoRequest} returns this
 */
proto.user.UserInfoRequest.prototype.clearDeviceInfo = function () {
  return this.setDeviceInfo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.user.UserInfoRequest.prototype.hasDeviceInfo = function () {
  return jspb.Message.getField(this, 6) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.user.GetAllAccontResponse.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.GetAllAccontResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.GetAllAccontResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.GetAllAccontResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.GetAllAccontResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        accountList: jspb.Message.toObjectList(
          msg.getAccountList(),
          user$common_pb.Account.toObject,
          includeInstance,
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.GetAllAccontResponse}
 */
proto.user.GetAllAccontResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.GetAllAccontResponse();
  return proto.user.GetAllAccontResponse.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.GetAllAccontResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.GetAllAccontResponse}
 */
proto.user.GetAllAccontResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = new user$common_pb.Account();
        reader.readMessage(
          value,
          user$common_pb.Account.deserializeBinaryFromReader,
        );
        msg.addAccount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.GetAllAccontResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.GetAllAccontResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.GetAllAccontResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.GetAllAccontResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getAccountList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      user$common_pb.Account.serializeBinaryToWriter,
    );
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.user.GetAllAccontResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.GetAllAccontResponse} returns this
 */
proto.user.GetAllAccontResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.user.GetAllAccontResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.GetAllAccontResponse} returns this
 */
proto.user.GetAllAccontResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * repeated Account account = 3;
 * @return {!Array<!proto.user.Account>}
 */
proto.user.GetAllAccontResponse.prototype.getAccountList = function () {
  return /** @type{!Array<!proto.user.Account>} */ (
    jspb.Message.getRepeatedWrapperField(this, user$common_pb.Account, 3)
  );
};

/**
 * @param {!Array<!proto.user.Account>} value
 * @return {!proto.user.GetAllAccontResponse} returns this
 */
proto.user.GetAllAccontResponse.prototype.setAccountList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};

/**
 * @param {!proto.user.Account=} opt_value
 * @param {number=} opt_index
 * @return {!proto.user.Account}
 */
proto.user.GetAllAccontResponse.prototype.addAccount = function (
  opt_value,
  opt_index,
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    3,
    opt_value,
    proto.user.Account,
    opt_index,
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.user.GetAllAccontResponse} returns this
 */
proto.user.GetAllAccontResponse.prototype.clearAccountList = function () {
  return this.setAccountList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.VerifyUserRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.VerifyUserRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.VerifyUserRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.VerifyUserRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        auth: jspb.Message.getFieldWithDefault(msg, 1, ''),
        deviceInfo:
          (f = msg.getDeviceInfo()) &&
          user$common_pb.DeviceInfo.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.VerifyUserRequest}
 */
proto.user.VerifyUserRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.VerifyUserRequest();
  return proto.user.VerifyUserRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.VerifyUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.VerifyUserRequest}
 */
proto.user.VerifyUserRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setAuth(value);
        break;
      case 2:
        var value = new user$common_pb.DeviceInfo();
        reader.readMessage(
          value,
          user$common_pb.DeviceInfo.deserializeBinaryFromReader,
        );
        msg.setDeviceInfo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.VerifyUserRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.VerifyUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.VerifyUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.VerifyUserRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getAuth();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getDeviceInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      user$common_pb.DeviceInfo.serializeBinaryToWriter,
    );
  }
};

/**
 * optional string auth = 1;
 * @return {string}
 */
proto.user.VerifyUserRequest.prototype.getAuth = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.VerifyUserRequest} returns this
 */
proto.user.VerifyUserRequest.prototype.setAuth = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional DeviceInfo device_info = 2;
 * @return {?proto.user.DeviceInfo}
 */
proto.user.VerifyUserRequest.prototype.getDeviceInfo = function () {
  return /** @type{?proto.user.DeviceInfo} */ (
    jspb.Message.getWrapperField(this, user$common_pb.DeviceInfo, 2)
  );
};

/**
 * @param {?proto.user.DeviceInfo|undefined} value
 * @return {!proto.user.VerifyUserRequest} returns this
 */
proto.user.VerifyUserRequest.prototype.setDeviceInfo = function (value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.user.VerifyUserRequest} returns this
 */
proto.user.VerifyUserRequest.prototype.clearDeviceInfo = function () {
  return this.setDeviceInfo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.user.VerifyUserRequest.prototype.hasDeviceInfo = function () {
  return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.CreateUserResponse.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.CreateUserResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.CreateUserResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.CreateUserResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
        errorMessage: jspb.Message.getFieldWithDefault(msg, 2, ''),
        userId: jspb.Message.getFieldWithDefault(msg, 3, ''),
        type: jspb.Message.getFieldWithDefault(msg, 4, ''),
        token: jspb.Message.getFieldWithDefault(msg, 5, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.CreateUserResponse}
 */
proto.user.CreateUserResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.CreateUserResponse();
  return proto.user.CreateUserResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.CreateUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.CreateUserResponse}
 */
proto.user.CreateUserResponse.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setErrorMessage(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserId(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setType(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.CreateUserResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.CreateUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.CreateUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.CreateUserResponse.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(1, f);
  }
  f = message.getErrorMessage();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.user.CreateUserResponse.prototype.getSuccess = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 1, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.CreateUserResponse} returns this
 */
proto.user.CreateUserResponse.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};

/**
 * optional string error_message = 2;
 * @return {string}
 */
proto.user.CreateUserResponse.prototype.getErrorMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.CreateUserResponse} returns this
 */
proto.user.CreateUserResponse.prototype.setErrorMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string user_id = 3;
 * @return {string}
 */
proto.user.CreateUserResponse.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.CreateUserResponse} returns this
 */
proto.user.CreateUserResponse.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string type = 4;
 * @return {string}
 */
proto.user.CreateUserResponse.prototype.getType = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.CreateUserResponse} returns this
 */
proto.user.CreateUserResponse.prototype.setType = function (value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string token = 5;
 * @return {string}
 */
proto.user.CreateUserResponse.prototype.getToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.CreateUserResponse} returns this
 */
proto.user.CreateUserResponse.prototype.setToken = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.SetLossLimitRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.SetLossLimitRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.SetLossLimitRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.SetLossLimitRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        lossLimit: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.SetLossLimitRequest}
 */
proto.user.SetLossLimitRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.SetLossLimitRequest();
  return proto.user.SetLossLimitRequest.deserializeBinaryFromReader(
    msg,
    reader,
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.SetLossLimitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.SetLossLimitRequest}
 */
proto.user.SetLossLimitRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setLossLimit(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.SetLossLimitRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.SetLossLimitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.SetLossLimitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.SetLossLimitRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getLossLimit();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.user.SetLossLimitRequest.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.SetLossLimitRequest} returns this
 */
proto.user.SetLossLimitRequest.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string loss_limit = 2;
 * @return {string}
 */
proto.user.SetLossLimitRequest.prototype.getLossLimit = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.SetLossLimitRequest} returns this
 */
proto.user.SetLossLimitRequest.prototype.setLossLimit = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.user.UserStateRequest.prototype.toObject = function (
    opt_includeInstance,
  ) {
    return proto.user.UserStateRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.user.UserStateRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.user.UserStateRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        userId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        datetime: jspb.Message.getFieldWithDefault(msg, 2, ''),
        state: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
        reasonType: jspb.Message.getFieldWithDefault(msg, 4, 0),
        reasonText: jspb.Message.getFieldWithDefault(msg, 5, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.user.UserStateRequest}
 */
proto.user.UserStateRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.user.UserStateRequest();
  return proto.user.UserStateRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.user.UserStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.user.UserStateRequest}
 */
proto.user.UserStateRequest.deserializeBinaryFromReader = function (
  msg,
  reader,
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setUserId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setDatetime(value);
        break;
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setState(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setReasonType(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setReasonText(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.user.UserStateRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.user.UserStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.user.UserStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.user.UserStateRequest.serializeBinaryToWriter = function (
  message,
  writer,
) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getDatetime();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getState();
  if (f) {
    writer.writeBool(3, f);
  }
  f = message.getReasonType();
  if (f !== 0) {
    writer.writeInt32(4, f);
  }
  f = message.getReasonText();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
};

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.user.UserStateRequest.prototype.getUserId = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UserStateRequest} returns this
 */
proto.user.UserStateRequest.prototype.setUserId = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string datetime = 2;
 * @return {string}
 */
proto.user.UserStateRequest.prototype.getDatetime = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UserStateRequest} returns this
 */
proto.user.UserStateRequest.prototype.setDatetime = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional bool state = 3;
 * @return {boolean}
 */
proto.user.UserStateRequest.prototype.getState = function () {
  return /** @type {boolean} */ (
    jspb.Message.getBooleanFieldWithDefault(this, 3, false)
  );
};

/**
 * @param {boolean} value
 * @return {!proto.user.UserStateRequest} returns this
 */
proto.user.UserStateRequest.prototype.setState = function (value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};

/**
 * optional int32 reason_type = 4;
 * @return {number}
 */
proto.user.UserStateRequest.prototype.getReasonType = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.user.UserStateRequest} returns this
 */
proto.user.UserStateRequest.prototype.setReasonType = function (value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional string reason_text = 5;
 * @return {string}
 */
proto.user.UserStateRequest.prototype.getReasonText = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.user.UserStateRequest} returns this
 */
proto.user.UserStateRequest.prototype.setReasonText = function (value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

goog.object.extend(exports, proto.user);
