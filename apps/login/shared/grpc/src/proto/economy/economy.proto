syntax = "proto3";

package economy;

message Amount {
  string game = 1;
  string cash = 2;
}

message AmountWithAccountId {
  string account_id = 1;
  Amount balance = 2;
  Amount money_box = 3;
}

service EconomyService {
  rpc CreateBalance(AccountIdParam) returns (CreateBalanceResponse) {} // 계정 생성
  rpc CreateMoneyBox(AccountIdParam) returns (CreateMoneyBoxResponse) {} // 금고 생성

  // hand, box transport
  rpc GetBalanceWithMoneyBox(AccountIdParam) returns (BalanceAndMoneyBoxResponse) {} // 계정의 손, 금고 조회
  rpc GetBalance(AccountIdParam) returns (BalanceAndMoneyBoxResponse) {} // 계정의 손에 들고있는 칩 조회
  rpc GetMoneyBox(AccountIdParam) returns (BalanceAndMoneyBoxResponse) {} // 계정의 금고 조회
  rpc MoneySafe(UpdateMoneyBoxRequest) returns (UpdateMoneyBoxResponse) {} // 금고 입금
  rpc MoneyUnSafe(UpdateMoneyBoxRequest) returns (UpdateMoneyBoxResponse) {} // 금고 출금
  rpc SetBalanceAndMoneyBox(SetBalanceAndMoneyBoxRequest) returns (BalanceAndMoneyBoxResponse) {} // 손과 금고를 동시에 설정

  // game
  rpc CreatePot(CreatePotRequest) returns (CreatePotResponse) {} // 게임 시작
  rpc Bet(BetRequest) returns (BetResponse) {} // 배팅
  rpc Distribute(DistributeRequest) returns (DistributeResponse) {} // 팟 분배
  rpc DistributeSpeedMode(DistributeRequest) returns (DistributeResponse) {} // 팟 분배
  // rpc DistributeResult(DistributeResultRequest) returns (DistributeResultResponse) {} // 팟 분배 결과
  rpc DistributeResult(DistributeResultRequest) returns (DistributeResponse) {} // 팟 분배 결과
  rpc ExceptRefund(ExceptRefundRequest) returns (ExceptRefundResponse) {} // 예외 환불

  // daily balance & loss limit
  rpc CreateDefaultDailyBalance(CreateDefaultDailyBalanceRequest) returns (DefaultResponse) {} // 일일 금액 흐름 생성
  rpc GetDailyFlow(GetDailyFlowRequest) returns (GetDailyFlowResponse) {} // 일일 금액 흐름
  rpc DailyFlowFromPostBox(DailyFlowFromPostBoxRequest) returns (DefaultResponse) {} // 일일 금액 흐름 (포스트박스에서)

  // util
  rpc TransferIn(TransferInRequest) returns (TransferInResponse) {} // 칩 입금

  // admin
  rpc GetAmountByAccountIds(GetAmountByAccountIdsRequest) returns (GetAmountByAccountIdsResponse) {} // 계정별 칩 조회

  // rpc ChangeBoxLimit(ChangeBoxLimitRequest) returns (ChangeBoxLimitResponse) {} // 금고 한도 변화에 따른 칩 이동
  // rpc TransferBoxToBox(TransferBoxToBoxRequest) returns (TransferBoxToBoxResponse) {} // 다른 Account의 금고로 칩 이동
  // ...
}

//공용, account_id 파라미터
message AccountIdParam {
  string account_id = 1;
}

message CreateBalanceResponse {
  bool success = 1;
  string error_message = 2;
  int32 balance_id = 3;
}

message CreateMoneyBoxResponse {
  bool success = 1;
  string error_message = 2;
  int32 money_box_id = 3;
}

message BalanceAndMoneyBoxResponse {
  bool success = 1;
  string error_message = 2;
  Amount balance = 3;
  Amount money_box = 4;
  string pause_at = 5; // pause at time
}

//금고 입출금 요청
message UpdateMoneyBoxRequest {
  string account_id = 1;
  string amount = 2;
}

//금고 업데이트 값, 유저 보유 자산 반환
message UpdateMoneyBoxResponse {
  bool success = 1;
  string error_message = 2;
  Amount balance = 3;
  Amount money_box = 4;
}

message SetBalanceAndMoneyBoxRequest {
  string account_id = 1;
  Amount balance = 2; // 손
  Amount money_box = 3; // 금고
}

message CreatePotRequest {
  string dealer_id = 1;
  repeated string account_id = 2;
}

message CreatePotResponse {
  bool success = 1;
  string error_message = 2;
  string pot_id = 3;
}

message BetRequest {
  string pot_id = 1;
  string account_id = 2;
  string amount = 3;
  bool is_deposit = 4; // true: deposit, false: normal bet
}

message BetResponse {
  bool success = 1;
  string error_message = 2;
  Amount balance = 3; // account balance
  string pot_amount = 4;
  string tx_id = 5; // tx id
}

message TransferInRequest {
  string tx_group_id = 1;
  string account_id = 2;
  Amount amount = 3;
  string from = 4; // REWARD, POST_BOX
  bool allow_overflow = 5;
}

message TransferInResponse {
  bool success = 1;
  string error_message = 2;
  Amount balance = 3;
  Amount overflow = 4;
  string tx_group_id = 5; // tx group id
  string tx_id = 6; // tx id
  int32 postbox_id = 7; // postbox id
}

message GetAmountByAccountIdsRequest {
  repeated string account_ids = 1;
}

message GetAmountByAccountIdsResponse {
  bool success = 1;
  string error_message = 2;
  repeated AmountWithAccountId amounts = 3;
}

message DistributePlayer {
  string account_id = 1;
  int32 rank = 2;
}

message DistributeRequest {
  string pot_id = 1;
  string game_id = 2;
  string channel = 3;
  repeated DistributePlayer players = 4;
}

message DistributeResult {
  string account_id = 1;
  string type = 2; // WIN, DRAW, DISTRIBUTE
  float lake = 3;
  string lake_amount = 4; // bigint
  Amount distribute_amount = 5;
  Amount balance_amount = 6;
  bool is_limit_over = 7; // true: limit over, false: normal distribute
}

message DistributeResponse {
  bool success = 1;
  string error_message = 2;
  repeated DistributeResult result = 3;
}

message DistributeResultRequest {
  string pot_id = 1;
  string account_id = 2;
}

message DistributeResultResponse {
  bool success = 1;
  string error_message = 2;
  DistributeResult result = 3;
}

message ExceptRefundRequest {
  string pot_id = 1;
}

message ExceptRefundResponse {
  bool success = 1;
  string error_message = 2;
  string tx_group_id = 3;
}

message CreateDefaultDailyBalanceRequest {
  string user_id = 1;
  string loss_limit = 2; // loss limit amount
}

message GetDailyFlowRequest {
  string user_id = 1;
}

message GetDailyFlowResponse {
  bool success = 1;
  string error_message = 2;
  string in = 3; // total in amount
  string out = 4; // total out amount
  string total = 5; // total amount
  string limit = 6; // total limit amount
  string remain = 7; // remain amount
}

message DailyFlowFromPostBoxRequest {
  string account_id = 1;
  string cash = 2; // cash amount
  string game = 3; // game amount
}

message DefaultResponse {
  bool success = 1;
  string error_message = 2;
}
