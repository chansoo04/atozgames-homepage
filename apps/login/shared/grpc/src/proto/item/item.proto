syntax = "proto3";

package item;

import "item-common.proto";

service ItemService {
  rpc CreateItemType(ItemTypeRequest) returns (ItemTypeResponse) {}
  rpc GetItemTypes(EmptyRequest) returns (GetItemTypeResponse) {}
  rpc UpdateItemType(ItemTypeRequest) returns (ItemTypeResponse) {}
  rpc DeactiveItemType(DefaultStringIdRequest) returns (DefaultResponse) {}

  rpc CreateItem(ItemRequest) returns (ItemResponse) {}
  rpc GetItem( DefaultStringIdRequest) returns ( ItemResponse) {}
  rpc GetItemStream(stream DefaultStringIdRequest) returns (stream ItemResponse) {}
  rpc GetItems( ItemRequest) returns ( ItemsResponse) {}
  rpc GetItemsStream(stream ItemRequest) returns (stream ItemsResponse) {}
  rpc GetItemsById( ItemsRequest) returns ( ItemsResponse) {}
  rpc GetItemsByIdStream(stream ItemsRequest) returns (stream ItemsResponse) {}
  rpc UpdateItem(ItemRequest) returns (ItemResponse) {}
  rpc DeactiveItem(DefaultStringIdRequest) returns (DefaultResponse) {}
  rpc GetDefaultCurrency(EmptyRequest) returns (ItemResponse) {}

  rpc CreateItemPack(ItemPackRequest) returns (ItemPackResponse) {}
  rpc CreateItemPackElement(ItemPackElementRequest) returns (ItemPackElementResponse) {}
  rpc UpdateItemPackElement(ItemPackElementRequest) returns (ItemPackElementResponse) {}
  rpc DeleteItemPackElement(DefaultIntIdRequest) returns (DefaultResponse) {}

  rpc GetItemPack( DefaultStringIdRequest) returns ( ItemPackResponse) {}
  rpc GetItemPackStream(stream DefaultStringIdRequest) returns (stream ItemPackResponse) {}
  rpc GetItemPacks( ItemPackRequest) returns ( ItemPacksResponse) {}
  rpc GetItemPacksStream(stream ItemPackRequest) returns (stream ItemPacksResponse) {}
  rpc GetItemPacksById( GetItemPacksRequest) returns ( ItemPacksResponse) {}
  rpc GetItemPacksByIdStream(stream GetItemPacksRequest) returns (stream ItemPacksResponse) {}
  rpc UpdateItemPack(ItemPackRequest) returns (ItemPackResponse) {}
  rpc DeactiveItemPack(DefaultStringIdRequest) returns (DefaultResponse) {}

  // admin
  rpc AdminGetAllItemType(AdminGetRequest) returns (GetItemTypeResponse) {}
  rpc AdminGetAllItem(AdminGetRequest) returns (ItemsResponse) {}
  rpc AdminGetAllItemPack(AdminGetRequest) returns (ItemPacksResponse) {}
}

message ItemTypeRequest {
  string item_type_id = 1;
  string name = 2;
  string description = 3;
  string image = 4;
  string meta = 5;
}

message ItemTypeResponse {
  bool success = 1;
  string error_message = 2;
  ItemType item_type = 3;
}

message GetItemTypeResponse {
  bool success = 1;
  string error_message = 2;
  repeated ItemType item_type = 3;
}

message ItemRequest {
  string item_id = 1;
  string item_type_id = 2;
  string name = 3;
  string description = 4;
  string image_url = 5;
  string metadata = 6;
  string price = 7; // bigint
  string currency = 8;

  int32 effect_duration = 9; // 효과 지속 시간 (초) | null 이면 영구 적용
  EffectApplyType effect_apply_type = 10; // 효과 적용 방식

  int32 acquire_limit_by_day = 11; // 일일 취득 제한 횟수 | 0 이면 무제한
  int32 acquire_limit_by_week = 12; // 주간 취득 제한 횟수 | 0 이면 무제한
  int32 acquire_limit_by_month = 13; // 월간 취득 제한 횟수 | 0 이면 무제한

  int32 use_limit_by_day = 14; // 일일 사용 제한 횟수 | 0 이면 무제한
  int32 use_limit_by_week = 15; // 주간 사용 제한 횟수 | 0 이면 무제한
  int32 use_limit_by_month = 16; // 월간 사용 제한 횟수 | 0 이면 무제한

  bool is_consumable = 17; // 소모성 여부

  bool is_active = 18;
  int32 page = 19;
  int32 count_per_page = 20;
}

message ItemResponse {
  bool success = 1;
  string error_message = 2;
  Item item = 3;
}

message ItemsRequest {
  repeated string item_id = 1;
}

message ItemsResponse {
  bool success = 1;
  string error_message = 2;
  repeated Item item = 3;
}

message ItemPackRequest {
  string item_pack_id = 1;
  string name = 2;
  string description = 3;
  string image_url = 4;
  string metadata = 5;

  string in_app_item_id = 6; // 구매 시 사용할 인앱 상품 ID
  string currency = 7;
  string price = 8; // bigint
  string total_price = 9; // bigint
  int32 discount = 10; // 할인율
  int32 gain_percent = 11; // 증가율 : 패키지 구매 시 얼마나 이득인지 표시

  SellingState selling_state = 12; // 판매 형태 | 판매중, 판매 예정, 판매 일시 중지, 판매 종료
  string selling_start_at = 13; // 판매 시작 시간 | null 이면 즉시 판매 가능
  int32 selling_duration = 14; // 판매 기간 (초) | null 이면 무제한 판매
  string selling_end_at = 15; // 판매 종료 시간 | null 이면 무제한 판매

  int32 buy_limit_by_day = 16; // 일일 구매 제한 횟수 | 0 이면 무제한
  int32 buy_limit_by_week = 17; // 주간 구매 제한 횟수 | 0 이면 무제한
  int32 buy_limit_by_month = 18; // 월간 구매 제한 횟수 | 0 이면 무제한

  bool is_refundable = 19; // 환불 가능 여부
  bool is_active = 20;

  int32 page = 21;
  int32 count_per_page = 22;
}

message ItemPackResponse {
  bool success = 1;
  string error_message = 2;
  ItemPack item_pack = 3;
}

message ItemPackElementRequest {
  int32 item_pack_element_id = 1;
  string item_pack_id = 2;
  string child_pack_id = 3;
  string item_id = 4;
  string amount = 5;
  int32 order = 6;
}

message ItemPackElementResponse {
  bool success = 1;
  string error_message = 2;
  ItemPackElement item_pack_element = 3;
}

message GetItemPacksRequest {
  repeated string item_pack_id = 1;
}

message ItemPacksResponse {
  bool success = 1;
  string error_message = 2;
  repeated ItemPack item_pack = 3;
}

message AdminGetRequest {
  int32 page = 1;
  int32 count_per_page = 2;
  bool is_active = 3;
}
