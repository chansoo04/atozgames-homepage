syntax = "proto3";

package user;

import "user-common.proto";

enum WordSearchMode {
  WORD_SEARCH_MODE_NONE = 0;
  WORD_SEARCH_MODE_QUERY = 1;
  WORD_SEARCH_MODE_AHO_CORASICK = 2;
  WORD_SEARCH_MODE_AHO_CORASICK_WITH_ALLOW = 3;
  WORD_SEARCH_MODE_AHO_CORASICK_STRICT = 4;
}

service AccountService {
  rpc isExistEmail(IsExistEmailRequest) returns (IsExistAccountResponse) {}
  rpc isExistAccount(IsExistAccountRequest) returns (IsExistAccountResponse) {}
  rpc SignUp(SignUpRequest) returns (SignResponse) {}
  rpc SignIn(SignInRequest) returns (SignResponse) {}
  rpc SignOut(SignOutRequest) returns (DefaultResponse) {}

  rpc WebSignIn(SignInRequest) returns (WebSignResponse) {}
  rpc WebSignOut(SignOutRequest) returns (DefaultResponse) {}

  rpc GetAccount(AccountIdParam) returns (GetAccountResponse) {}
  rpc GetAccountByUserId(GetAccountByUserIdRequest) returns (GetAccountByUserIdResponse) {}
  rpc UpdateAccount(UpdateAccountRequest) returns (DefaultResponse) {}

  rpc CheckNickname(WordRequest) returns (WordResponse) {} // 닉네임 중복확인
  rpc UpdateNickname(NickNameRequest) returns (WordResponse); // 닉네임 변경
  rpc GetNickByFirebaseUid(GetNickByFirebaseUidRequest) returns (GetNickByFirebaseUidResponse); // Firebase UID로 닉네임 조회

  // Account management
  rpc Withdrawal(AccountStateRequest) returns (DefaultResponse); // 계정탈퇴
  rpc WithdrawalRevoke(AccountIdParam) returns (DefaultResponse); // 계정탈퇴취소
  rpc Dormant(AccountStateRequest) returns (DefaultResponse); // 휴면계정
  rpc Disable(AccountStateRequest) returns (DefaultResponse); // 계정비활성화

  rpc ReportAccount(ReportAccountRequest) returns (DefaultResponse); // 계정신고
  rpc GetAccountLogs(AccountIdParam) returns (GetAccountLogsResponse) {}

  // admin
  rpc AdminGetAllAccount(AdminGetAllAccountRequest) returns (AdminGetAllAccountResponse) {}
}

message ReportAccountRequest {
  string reporter_account_id = 1;
  string reported_account_id = 2;
  string reported_reason = 3;
}

message AccountIdParam {
  string account_id = 1;
}

message IsExistEmailRequest {
  string email = 1;
}

message IsExistAccountRequest {
  string firebase_uid = 1;
}

message IsExistAccountResponse {
  bool success = 1;
  string error_message = 2;
  bool is_exist = 3;
  string user_id = 4;
  string account_id = 5;
  bool is_active = 6;
  bool is_public = 7;
  bool is_dormant = 8;
  bool is_disable = 9;
  bool is_withdrawal = 10;
  bool is_pause = 11;
}

message SignUpRequest {
  string user_id = 1;
  string firebase_uid = 2;
  AccountType account_type = 3;
  string account_name = 4; // 계정명
}

message SignInRequest {
  string firebase_uid = 1;
}

message SignResponse {
  bool success = 1;
  string error_message = 2;
  string account_id = 3;
}

message WebSignResponse {
  bool success = 1;
  string error_message = 2;
  string name = 3;
  string tel_code = 4;
  string tel = 5;
  string uid = 6; // Firebase Auth UID
  string account_id = 7;
  string account_type = 8;
  string account_name = 9; // 계정명
  string nickname = 10; // 닉네임
}

message SignOutRequest {
  string firebase_uid = 1;
}

message GetAccountResponse {
  bool success = 1;
  string error_message = 2;
  Account account = 3;
}

message GetAccountByUserIdRequest {
  string user_id = 1;
}

message GetAccountByUserIdResponse {
  bool success = 1;
  string error_message = 2;
  repeated Account account = 3;
}

message UpdateAccountRequest {
  string account_id = 1;
  string accountName = 2; // 계정명
  string nickname = 3; // 닉네임
  string push_token = 4;
}

message WordRequest {
  string word = 1;
  WordSearchMode search_mode = 2;
}

message WordBanCheckResult {
  int32 start = 1;
  int32 end = 2;
  string word = 3;
  int32 length = 4;
}

message WordResponse {
  bool success = 1;
  string error_message = 2;
  repeated WordBanCheckResult ban_list = 3;
}

message NickNameRequest {
  string account_id = 1;
  string nickname = 2; // 변경할 닉네임
  string item_id = 3; // 아이템 ID (닉네임 변경 아이템)
}

message GetNickByFirebaseUidRequest {
  repeated string firebase_uid = 1; // Firebase UID 목록
}

message GetNickByFirebaseUidResponse {
  bool success = 1;
  string error_message = 2;
  repeated Account account = 3;
}

message AccountStateRequest {
  string account_id = 1;
  string datetime = 2;
  bool state = 3; // true: 탈퇴, 휴면 | false: 탈퇴 취소, 휴면 해제
  int32 reasonType = 4;
  string reasonText = 5;
}

message GetAccountLogsResponse {
  bool success = 1;
  string error_message = 2;
  repeated AccountLogs account_logs = 3;
}

message AdminGetAllAccountRequest {
  int32 page = 1;
  int32 count_per_page = 2;
}

message AdminGetAllAccountResponse {
  bool success = 1;
  string error_message = 2;
  repeated Account account = 3;
}
