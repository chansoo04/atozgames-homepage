syntax = "proto3";

package user;

import "user-common.proto";

service UserService {
  // for Personal Identity Verification
  rpc GetIdentityRequestParam(VerifyUserRequest) returns (IdentityRequestParamResponse);
  rpc CheckIdentityToken(VerifyUserRequest) returns (VerifyUserResponse);

  // basic CRUD
  rpc IsExistUser(IsExistUserRequest) returns (IsExistUserResponse);
  rpc GetUser(GetUserRequest) returns (GetUserResponse);

  // need Personal Identity Verification
  rpc CreateUser(VerifyUserRequest) returns (CreateUserResponse);
  rpc RefreshVerification(VerifyUserRequest) returns (TokenResponse); // 본인인증 갱신 | 다른 본인인증이 필요한 경우 사용하여 토큰 발급
  rpc UpdateUser(UserInfoRequest) returns (DefaultResponse);
  rpc GetAllAccount(TokenRequest) returns (GetAllAccontResponse); // 모든 계정 정보 조회

  // user management
  rpc Withdrawal(UserStateRequest) returns (DefaultResponse); // 계정탈퇴
  rpc Dormant(UserStateRequest) returns (DefaultResponse); // 휴면계정
  rpc Disable(UserStateRequest) returns (DefaultResponse); // 계정비활성화

  rpc GamePause(UserStateRequest) returns (DefaultResponse); // 게임 일시정지
  rpc SetLossLimit(SetLossLimitRequest) returns (DefaultResponse); // 손실한도 설정

  rpc GetUserLogs(UserIdParam) returns (GetUserLogsResponse); // 유저 로그 조회

  rpc GetUserLossLimitByAccountIds(
      GetUserLossLimitByAccountIdsRequest) returns (GetUserLossLimitByAccountIdsResponse); // 계정별 손실한도 조회

  // admin
  rpc AdminGetAllUser(AdminGetAllUserRequest) returns (AdminGetAllUserResponse); // 모든 유저 정보 조회

  // not ready to release
  rpc TransferAccount(TransferAccountRequest) returns (DefaultResponse); // 계정 이전
}

message TokenRequest {
  string token = 1;
  string user_id = 2;
}

message TokenResponse {
  bool success = 1;
  string error_message = 2;
  string token = 3;
}

message UserIdParam {
  string user_id = 1;
}

message IsExistUserRequest {
  string user_id = 1;
  string name = 2;
  int32 tel_code = 3;
  int64 tel = 4;
}

message IsExistUserResponse {
  bool success = 1;
  string error_message = 2;
  bool is_exist = 3;
  string user_id = 4;
  bool is_active = 5;
  bool is_public = 6;
  bool is_dormant = 7;
  bool is_disable = 8;
  bool is_withdrawal = 9;
  bool is_pause = 10;
  bool is_game_pause = 11;
}

message GetUserRequest {
    string user_id = 1;
    string account_id = 2;
}

message GetUserResponse {
  bool success = 1;
  string error_message = 2;
  User user = 3;
  int32 account_count = 4;
}

message UserInfoRequest {
  string token = 1; // 본인인증 후 서버에서 발급한 커스텀 토큰
  string user_id = 2;
  string name = 3; // 본명 - 본인인증
  int32 tel_code = 4; // 국가번호
  int64 tel = 5; // 전화번호, 국가번호 제외, 01012345678 -> 1012345678
}

message GetAllAccontResponse {
  bool success = 1;
  string error_message = 2;
  repeated Account account = 3;
}

message VerifyUserRequest {
  /**
   * @param auth
   * 인증사에 따라 추가 정보 첨부
   * {
   *   comType: 'dreamsecurity', 'inicis' | 'nice' | 'danal' | 'kcb' | 'portone' | ... ,
   *   if(dreamsecurity) data : <auth request data>
   *   if(inicis)  data: { url: 'https://...', txId: '...', token: '...' } // 이니시스
   *   if(portone) data: { identityVerificationId: ' ... ' } // 포트원
   * }
   */
  string auth = 1;
}

message VerifyUserResponse {
  bool success = 1;
  string error_message = 2;
  string data = 3;
}

message IdentityRequestParamResponse {
  /**
   * @param data
   * 인증사에 따라 추가 정보
   * if(dreamsecurity) { serviceId: string; encClientTxId: string; }
   */

  bool success = 1;
  string error_message = 2;
  string data = 3; // 인증사에 따라 추가 정보
}

message CreateUserResponse {
  bool success = 1;
  string error_message = 2;
  string user_id = 3;
  string type = 4; // new, exist
  string token = 5; // 서버에서 발급한 토큰
  string name = 6; // 본인인증 이름
  string tel = 7; // 본인인증 전화번호 | 시작 0 제외, 01012345678 -> 1012345678
}

message SetLossLimitRequest {
  string user_id = 1;
  string loss_limit = 2; // 손실한도 설정 bigint
}

message UserStateRequest {
  string user_id = 1;
  string datetime = 2;
  bool state = 3; // true: 탈퇴, 휴면 | false: 탈퇴 취소, 휴면 해제
  int32 reason_type = 4;
  string reason_text = 5;
}

message GetUserLogsResponse {
  bool success = 1;
  string error_message = 2;
  repeated UserLogs user_logs = 3;
}

message GetUserLossLimitByAccountIdsRequest {
  repeated string account_ids = 1; // 계정 ID 목록
}

message UserLossLimit {
  string account_id = 1; // 계정 ID
  string user_id = 2; // 유저 ID
  string loss_limit = 3; // 손실한도 설정 bigint
}

message GetUserLossLimitByAccountIdsResponse {
  bool success = 1;
  string error_message = 2;
  repeated UserLossLimit user_loss_limits = 3; // 계정별 손실한도 정보
}

message AdminGetAllUserRequest {
  int32 page = 1;
  int32 count_per_page = 2;
}

message AdminGetAllUserResponse {
  bool success = 1;
  string error_message = 2;
  repeated User users = 3;
}

message TransferAccountRequest {
  string account_id = 1;
  string target_user_id = 2;
  string current_user_id = 3;
}
